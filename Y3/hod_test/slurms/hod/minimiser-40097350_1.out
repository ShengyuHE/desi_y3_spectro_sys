[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_00.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_00.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_00.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_00.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_00.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_00.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_00.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_00.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_00.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_00.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_00.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_00.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_00.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_00.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_00.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_00.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:31
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:31
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:31
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:31
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:31
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:31
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:31
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:31
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:31
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:31
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:31
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:31
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:31
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:31
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:31
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:31
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.566183077729443)) ('M_1_LRG', np.float64(13.860010274461013)) ('alpha_LRG', np.float64(1.0552240029437772)) ('f_sigv_LRG', np.float64(0.9784211994400472)) ('log_Mcent_LRG', np.float64(12.735290689403302)) ('sigma_M_LRG', np.float64(0.18819409819215344))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.524778994190573)) ('M_1_LRG', np.float64(13.843808895866225)) ('alpha_LRG', np.float64(1.1028940211506895)) ('f_sigv_LRG', np.float64(0.934586376956867)) ('log_Mcent_LRG', np.float64(12.736346201313625)) ('sigma_M_LRG', np.float64(0.19964314903980185))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.551179160572733)) ('M_1_LRG', np.float64(13.84843108555862)) ('alpha_LRG', np.float64(1.0804903210552492)) ('f_sigv_LRG', np.float64(0.9348852131331606)) ('log_Mcent_LRG', np.float64(12.749421128614708)) ('sigma_M_LRG', np.float64(0.2513516875379278))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.568792039584837)) ('M_1_LRG', np.float64(13.826756306801851)) ('alpha_LRG', np.float64(1.06476818967886)) ('f_sigv_LRG', np.float64(0.9530172870873644)) ('log_Mcent_LRG', np.float64(12.702857491060424)) ('sigma_M_LRG', np.float64(0.13415914770399817))
[Interation 1] chi2=530.9483995074096
[Interation 1] chi2=502.30416958308933
[Interation 1] chi2=570.020675006727
[Interation 1] chi2=539.9574301242575
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.487575334867643)) ('M_1_LRG', np.float64(13.834934435778722)) ('alpha_LRG', np.float64(1.1124505273422316)) ('f_sigv_LRG', np.float64(0.9319588976714037)) ('log_Mcent_LRG', np.float64(12.717627161785654)) ('sigma_M_LRG', np.float64(0.17483186137984813))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.583868411069115)) ('M_1_LRG', np.float64(13.83123508395159)) ('alpha_LRG', np.float64(1.0819597218741352)) ('f_sigv_LRG', np.float64(0.9377119401751067)) ('log_Mcent_LRG', np.float64(12.732102456926116)) ('sigma_M_LRG', np.float64(0.2044204433443781))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.527657626185988)) ('M_1_LRG', np.float64(13.842908848101139)) ('alpha_LRG', np.float64(1.0947326526200594)) ('f_sigv_LRG', np.float64(0.948662920453407)) ('log_Mcent_LRG', np.float64(12.724033017891225)) ('sigma_M_LRG', np.float64(0.1701517573591556))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.453426697570572)) ('M_1_LRG', np.float64(13.857578637706565)) ('alpha_LRG', np.float64(1.1136065561371384)) ('f_sigv_LRG', np.float64(0.9471175133909986)) ('log_Mcent_LRG', np.float64(12.742488537993104)) ('sigma_M_LRG', np.float64(0.21809776860375968))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.463545895139884)) ('M_1_LRG', np.float64(13.842257086115021)) ('alpha_LRG', np.float64(1.100456334700184)) ('f_sigv_LRG', np.float64(0.9377391351093506)) ('log_Mcent_LRG', np.float64(12.717307812028608)) ('sigma_M_LRG', np.float64(0.16727742249736133))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.551287096342502)) ('M_1_LRG', np.float64(13.82651640001776)) ('alpha_LRG', np.float64(1.0522404941606123)) ('f_sigv_LRG', np.float64(0.9525940697336231)) ('log_Mcent_LRG', np.float64(12.708244700929745)) ('sigma_M_LRG', np.float64(0.1610785142539632))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.497611522563156)) ('M_1_LRG', np.float64(13.862711834908762)) ('alpha_LRG', np.float64(1.0955854159563836)) ('f_sigv_LRG', np.float64(0.9604994523994396)) ('log_Mcent_LRG', np.float64(12.741104918522804)) ('sigma_M_LRG', np.float64(0.18919919162635518))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.55439715761718)) ('M_1_LRG', np.float64(13.856762258502908)) ('alpha_LRG', np.float64(1.1012578306551342)) ('f_sigv_LRG', np.float64(0.9426433776616097)) ('log_Mcent_LRG', np.float64(12.746544223036173)) ('sigma_M_LRG', np.float64(0.2148773266259107))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.584715329889539)) ('M_1_LRG', np.float64(13.82875451439547)) ('alpha_LRG', np.float64(1.0957502117306714)) ('f_sigv_LRG', np.float64(0.9063304633987636)) ('log_Mcent_LRG', np.float64(12.722387457972754)) ('sigma_M_LRG', np.float64(0.17683439236255294))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.541853801252154)) ('M_1_LRG', np.float64(13.848413123535206)) ('alpha_LRG', np.float64(1.0753750807936873)) ('f_sigv_LRG', np.float64(0.9387550403996766)) ('log_Mcent_LRG', np.float64(12.730909077213111)) ('sigma_M_LRG', np.float64(0.20280317217226096))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.550113502777291)) ('M_1_LRG', np.float64(13.845966218388172)) ('alpha_LRG', np.float64(1.0721219482777764)) ('f_sigv_LRG', np.float64(0.9346217123493794)) ('log_Mcent_LRG', np.float64(12.736888745454237)) ('sigma_M_LRG', np.float64(0.2125680732781186))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.469895698025441)) ('M_1_LRG', np.float64(13.841221316049351)) ('alpha_LRG', np.float64(1.108956289078683)) ('f_sigv_LRG', np.float64(0.9376910159080293)) ('log_Mcent_LRG', np.float64(12.735855480112587)) ('sigma_M_LRG', np.float64(0.2124110814464396))
[Interation 1] chi2=524.5398086667946
[Interation 1] chi2=505.0474151073842
[Interation 1] chi2=577.696275273413
[Interation 1] chi2=492.65343949411124
[Interation 1] chi2=585.4644282614952
[Interation 1] chi2=476.5071293316532
[Interation 1] chi2=493.9691492007607
[Interation 1] chi2=513.5073868729039
[Interation 1] chi2=522.2202163816073
[Interation 1] chi2=497.1215290292071
[Interation 1] chi2=553.5733701531304
[Interation 1] chi2=483.2225104735612
[Interation 2] ('M_0_LRG', np.float64(12.491398961338565)) ('M_1_LRG', np.float64(13.831717451750826)) ('alpha_LRG', np.float64(1.101637446813543)) ('f_sigv_LRG', np.float64(0.9397544085083412)) ('log_Mcent_LRG', np.float64(12.715773695991452)) ('sigma_M_LRG', np.float64(0.16452154048980677))
[Interation 2] ('M_0_LRG', np.float64(12.49105174389539)) ('M_1_LRG', np.float64(13.824250050117731)) ('alpha_LRG', np.float64(1.0969188673115724)) ('f_sigv_LRG', np.float64(0.9250094787083555)) ('log_Mcent_LRG', np.float64(12.699744910560668)) ('sigma_M_LRG', np.float64(0.1362987094310366))
[Interation 2] ('M_0_LRG', np.float64(12.4924646588711)) ('M_1_LRG', np.float64(13.816508063286554)) ('alpha_LRG', np.float64(1.0884526129025267)) ('f_sigv_LRG', np.float64(0.9639892487729901)) ('log_Mcent_LRG', np.float64(12.702683542401102)) ('sigma_M_LRG', np.float64(0.14270815728766317))
[Interation 2] ('M_0_LRG', np.float64(12.517361502406317)) ('M_1_LRG', np.float64(13.853464954096749)) ('alpha_LRG', np.float64(1.0964347731902793)) ('f_sigv_LRG', np.float64(0.9437453926482305)) ('log_Mcent_LRG', np.float64(12.741460813343098)) ('sigma_M_LRG', np.float64(0.21178544723477366))
[Interation 2] chi2=486.9141388585934
[Interation 2] chi2=496.6869248827026
[Interation 2] chi2=509.35660798549816
[Interation 2] chi2=486.1852054125154
[Interation 2] ('M_0_LRG', np.float64(12.471938292591002)) ('M_1_LRG', np.float64(13.844218008476213)) ('alpha_LRG', np.float64(1.118937570288896)) ('f_sigv_LRG', np.float64(0.9366918369127292)) ('log_Mcent_LRG', np.float64(12.73231144609568)) ('sigma_M_LRG', np.float64(0.19895822330818358))
[Interation 2] ('M_0_LRG', np.float64(12.506429415622616)) ('M_1_LRG', np.float64(13.833784018613855)) ('alpha_LRG', np.float64(1.1108214079558125)) ('f_sigv_LRG', np.float64(0.9179504714570775)) ('log_Mcent_LRG', np.float64(12.721033511362213)) ('sigma_M_LRG', np.float64(0.18114018621356093))
[Interation 2] ('M_0_LRG', np.float64(12.497716438460674)) ('M_1_LRG', np.float64(13.834287648753623)) ('alpha_LRG', np.float64(1.0931510173400163)) ('f_sigv_LRG', np.float64(0.9287326463347848)) ('log_Mcent_LRG', np.float64(12.714529201558628)) ('sigma_M_LRG', np.float64(0.16708912397186904))
[Interation 2] ('M_0_LRG', np.float64(12.534032375648815)) ('M_1_LRG', np.float64(13.839236104035724)) ('alpha_LRG', np.float64(1.0928445538960396)) ('f_sigv_LRG', np.float64(0.9275724687257503)) ('log_Mcent_LRG', np.float64(12.737102150484002)) ('sigma_M_LRG', np.float64(0.21988032160123622))
[Interation 2] ('M_0_LRG', np.float64(12.496827153671008)) ('M_1_LRG', np.float64(13.84918087145556)) ('alpha_LRG', np.float64(1.1022286299372273)) ('f_sigv_LRG', np.float64(0.9354233297155453)) ('log_Mcent_LRG', np.float64(12.732724393225839)) ('sigma_M_LRG', np.float64(0.2016479138022606))
[Interation 2] ('M_0_LRG', np.float64(12.489436310187143)) ('M_1_LRG', np.float64(13.85104403170785)) ('alpha_LRG', np.float64(1.0992152997738784)) ('f_sigv_LRG', np.float64(0.9390400422564699)) ('log_Mcent_LRG', np.float64(12.733561446008402)) ('sigma_M_LRG', np.float64(0.19885602502876465))
[Interation 2] ('M_0_LRG', np.float64(12.504567328565953)) ('M_1_LRG', np.float64(13.8383327264308)) ('alpha_LRG', np.float64(1.0991111138031748)) ('f_sigv_LRG', np.float64(0.9446561614726814)) ('log_Mcent_LRG', np.float64(12.721538199495408)) ('sigma_M_LRG', np.float64(0.17542476767036252))
[Interation 2] ('M_0_LRG', np.float64(12.476246347580249)) ('M_1_LRG', np.float64(13.846748769015928)) ('alpha_LRG', np.float64(1.1098024839092522)) ('f_sigv_LRG', np.float64(0.9449740616014038)) ('log_Mcent_LRG', np.float64(12.72063364253154)) ('sigma_M_LRG', np.float64(0.16049549322906975))
[Interation 2] ('M_0_LRG', np.float64(12.447711146820732)) ('M_1_LRG', np.float64(13.84520291345603)) ('alpha_LRG', np.float64(1.1308142119663434)) ('f_sigv_LRG', np.float64(0.923975891644367)) ('log_Mcent_LRG', np.float64(12.712667743993089)) ('sigma_M_LRG', np.float64(0.14685201755250016))
[Interation 2] ('M_0_LRG', np.float64(12.514663518804948)) ('M_1_LRG', np.float64(13.834952585961801)) ('alpha_LRG', np.float64(1.092879390193651)) ('f_sigv_LRG', np.float64(0.939928251638092)) ('log_Mcent_LRG', np.float64(12.711424183261721)) ('sigma_M_LRG', np.float64(0.15261312447392283))
[Interation 2] ('M_0_LRG', np.float64(12.502630453763858)) ('M_1_LRG', np.float64(13.840013756155443)) ('alpha_LRG', np.float64(1.1094608145826723)) ('f_sigv_LRG', np.float64(0.9337208802907458)) ('log_Mcent_LRG', np.float64(12.729771813372222)) ('sigma_M_LRG', np.float64(0.1930443191529128))
[Interation 2] ('M_0_LRG', np.float64(12.508612290460624)) ('M_1_LRG', np.float64(13.843572376332183)) ('alpha_LRG', np.float64(1.08876876754432)) ('f_sigv_LRG', np.float64(0.9478603268144963)) ('log_Mcent_LRG', np.float64(12.72291112040923)) ('sigma_M_LRG', np.float64(0.17626326974833))
[Interation 2] chi2=456.380745036219
[Interation 2] chi2=493.41255542719875
[Interation 2] chi2=533.9034006495623
[Interation 2] chi2=482.15439246919004
[Interation 2] chi2=482.29480306346284
[Interation 2] chi2=481.53721268995884
[Interation 2] chi2=530.7499186634061
[Interation 2] chi2=536.2580478135916
[Interation 2] chi2=429.33255706968407
[Interation 2] chi2=481.94610395022306
[Interation 2] chi2=478.95783777437214
[Interation 2] chi2=538.5067932787849
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_01.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_01.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_01.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_01.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_01.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_01.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_01.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_01.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_01.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_01.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_01.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_01.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_01.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_01.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_01.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.472473554246234)) ('M_1_LRG', np.float64(13.832688273554846)) ('alpha_LRG', np.float64(1.1151547245495348)) ('f_sigv_LRG', np.float64(0.9401912787650304)) ('log_Mcent_LRG', np.float64(12.712636286869188)) ('sigma_M_LRG', np.float64(0.1570423672519245))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 1.2408194541931152
Start satellite assignement
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
Satellite assignement done 1.8024539947509766
LRG mock catalogue done 1.875396490097046
606447 central galaxies, 94127 satellites, fraction of satellite 0.13 
Done overall time  LRG 3.3007616996765137
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_01.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:19
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:20
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:21
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:21
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Load smu measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:19
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.650894279510286)) ('M_1_LRG', np.float64(13.822434668224645)) ('alpha_LRG', np.float64(1.0260609792585889)) ('f_sigv_LRG', np.float64(0.9104922449496058)) ('log_Mcent_LRG', np.float64(12.802388310819634)) ('sigma_M_LRG', np.float64(0.4107944249064348))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.454254516670803)) ('M_1_LRG', np.float64(13.977851315671778)) ('alpha_LRG', np.float64(0.9439821446531385)) ('f_sigv_LRG', np.float64(1.0228945414395054)) ('log_Mcent_LRG', np.float64(12.782985078562348)) ('sigma_M_LRG', np.float64(0.2812963231288895))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.747227716644373)) ('M_1_LRG', np.float64(13.710774749293805)) ('alpha_LRG', np.float64(1.074756551657435)) ('f_sigv_LRG', np.float64(0.9617053645565697)) ('log_Mcent_LRG', np.float64(12.693769351845871)) ('sigma_M_LRG', np.float64(0.21304996480271243))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.737974735114015)) ('M_1_LRG', np.float64(14.018384531707076)) ('alpha_LRG', np.float64(0.8488075435042461)) ('f_sigv_LRG', np.float64(0.893935307957257)) ('log_Mcent_LRG', np.float64(12.883401813264479)) ('sigma_M_LRG', np.float64(0.38726084668927907))
[Interation 3] chi2=982.2827222216678
[Interation 3] chi2=652.3839193699921
[Interation 3] chi2=1023.2152687941225
[Interation 3] chi2=944.6283462545565
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.447558787410717)) ('M_1_LRG', np.float64(13.944341205377894)) ('alpha_LRG', np.float64(1.0484241154207785)) ('f_sigv_LRG', np.float64(0.9264872283644439)) ('log_Mcent_LRG', np.float64(12.787537589472795)) ('sigma_M_LRG', np.float64(0.3078222651480083))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.791204642294144)) ('M_1_LRG', np.float64(13.897985048998674)) ('alpha_LRG', np.float64(0.8942548266783732)) ('f_sigv_LRG', np.float64(0.9268053388767433)) ('log_Mcent_LRG', np.float64(12.802869248310007)) ('sigma_M_LRG', np.float64(0.3249191040659999))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.52163007197686)) ('M_1_LRG', np.float64(13.822395332058385)) ('alpha_LRG', np.float64(1.1755544032618233)) ('f_sigv_LRG', np.float64(0.9359526502902848)) ('log_Mcent_LRG', np.float64(12.708106638725214)) ('sigma_M_LRG', np.float64(0.18003231944366355))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.565276074311196)) ('M_1_LRG', np.float64(13.844656345547651)) ('alpha_LRG', np.float64(1.0544239343153798)) ('f_sigv_LRG', np.float64(0.9536395814812603)) ('log_Mcent_LRG', np.float64(12.716387584094972)) ('sigma_M_LRG', np.float64(0.19258262891750427))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.553415539088157)) ('M_1_LRG', np.float64(13.985876896537334)) ('alpha_LRG', np.float64(1.0218623257877366)) ('f_sigv_LRG', np.float64(1.0070482080469831)) ('log_Mcent_LRG', np.float64(12.833153833670126)) ('sigma_M_LRG', np.float64(0.31841442529022035))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.65896052380163)) ('M_1_LRG', np.float64(13.847406348010301)) ('alpha_LRG', np.float64(1.011424718758594)) ('f_sigv_LRG', np.float64(0.9027392506487392)) ('log_Mcent_LRG', np.float64(12.782773718099387)) ('sigma_M_LRG', np.float64(0.32397819541916745))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.705440753231445)) ('M_1_LRG', np.float64(13.855999055928084)) ('alpha_LRG', np.float64(0.9748407997980427)) ('f_sigv_LRG', np.float64(0.9208880837986404)) ('log_Mcent_LRG', np.float64(12.766937560817343)) ('sigma_M_LRG', np.float64(0.19998408522770555))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.723820431240625)) ('M_1_LRG', np.float64(13.850376983766024)) ('alpha_LRG', np.float64(1.0552777691147954)) ('f_sigv_LRG', np.float64(0.9058156604081802)) ('log_Mcent_LRG', np.float64(12.812480171496379)) ('sigma_M_LRG', np.float64(0.3100821110930415))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.448944557202765)) ('M_1_LRG', np.float64(13.930521319187644)) ('alpha_LRG', np.float64(1.0914046358146625)) ('f_sigv_LRG', np.float64(0.9519208728707756)) ('log_Mcent_LRG', np.float64(12.884083559868534)) ('sigma_M_LRG', np.float64(0.4507354853024771))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.395200865116784)) ('M_1_LRG', np.float64(13.845027068018881)) ('alpha_LRG', np.float64(1.1449633562119859)) ('f_sigv_LRG', np.float64(0.9546396807935481)) ('log_Mcent_LRG', np.float64(12.766759699316642)) ('sigma_M_LRG', np.float64(0.2606750339467711))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.638287551915399)) ('M_1_LRG', np.float64(13.863146481056917)) ('alpha_LRG', np.float64(1.0231484518832097)) ('f_sigv_LRG', np.float64(0.9214932241461468)) ('log_Mcent_LRG', np.float64(12.725138633519611)) ('sigma_M_LRG', np.float64(0.19740981826726522))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.39705978583951)) ('M_1_LRG', np.float64(13.891192671363502)) ('alpha_LRG', np.float64(1.0810703812298423)) ('f_sigv_LRG', np.float64(0.9281605590598632)) ('log_Mcent_LRG', np.float64(12.79582429488398)) ('sigma_M_LRG', np.float64(0.3085517475859414))
[Interation 3] chi2=722.152973605674
[Interation 3] chi2=616.7236988954764
[Interation 3] chi2=656.8176344065531
[Interation 3] chi2=693.2967110566835
[Interation 3] chi2=847.1373616989642
[Interation 3] chi2=550.8796658308544
[Interation 3] chi2=714.7044303541462
[Interation 3] chi2=801.2063085839886
[Interation 3] chi2=586.0473401889587
[Interation 3] chi2=517.0141471796669
[Interation 3] chi2=628.5867013697653
[Interation 3] chi2=588.450939250947
[Interation 4] ('M_0_LRG', np.float64(12.476101264075629)) ('M_1_LRG', np.float64(13.830643626074703)) ('alpha_LRG', np.float64(1.1163085542991333)) ('f_sigv_LRG', np.float64(0.9347281406304322)) ('log_Mcent_LRG', np.float64(12.719283918983107)) ('sigma_M_LRG', np.float64(0.1727146198221659))
[Interation 4] ('M_0_LRG', np.float64(12.527782426434742)) ('M_1_LRG', np.float64(13.824857855832336)) ('alpha_LRG', np.float64(1.0917371997688194)) ('f_sigv_LRG', np.float64(0.9377633165420383)) ('log_Mcent_LRG', np.float64(12.714445430229729)) ('sigma_M_LRG', np.float64(0.16434858658117713))
[Interation 4] ('M_0_LRG', np.float64(12.530531687855321)) ('M_1_LRG', np.float64(13.82865976245305)) ('alpha_LRG', np.float64(1.0889629286236766)) ('f_sigv_LRG', np.float64(0.9413902241865012)) ('log_Mcent_LRG', np.float64(12.699991640830223)) ('sigma_M_LRG', np.float64(0.11700683033766429))
[Interation 4] ('M_0_LRG', np.float64(12.479362887594672)) ('M_1_LRG', np.float64(13.817242438678653)) ('alpha_LRG', np.float64(1.1187018166541343)) ('f_sigv_LRG', np.float64(0.9307623982251049)) ('log_Mcent_LRG', np.float64(12.705090047558313)) ('sigma_M_LRG', np.float64(0.14277316887450953))
[Interation 4] chi2=509.47417810601945
[Interation 4] chi2=517.2529926053841
[Interation 4] chi2=512.4798157691005
[Interation 4] chi2=428.1663607944941
[Interation 4] ('M_0_LRG', np.float64(12.56572713393537)) ('M_1_LRG', np.float64(13.819980828427292)) ('alpha_LRG', np.float64(1.1004391097479127)) ('f_sigv_LRG', np.float64(0.9240297967499156)) ('log_Mcent_LRG', np.float64(12.708457832694753)) ('sigma_M_LRG', np.float64(0.1471330597495834))
[Interation 4] ('M_0_LRG', np.float64(12.489331244217682)) ('M_1_LRG', np.float64(13.84029343695296)) ('alpha_LRG', np.float64(1.1071997660304616)) ('f_sigv_LRG', np.float64(0.943168422007164)) ('log_Mcent_LRG', np.float64(12.722136840645145)) ('sigma_M_LRG', np.float64(0.17211369535972637))
[Interation 4] ('M_0_LRG', np.float64(12.460060592438504)) ('M_1_LRG', np.float64(13.820581923556034)) ('alpha_LRG', np.float64(1.129590091188098)) ('f_sigv_LRG', np.float64(0.9400550472129756)) ('log_Mcent_LRG', np.float64(12.703889744415036)) ('sigma_M_LRG', np.float64(0.1313579389458729))
[Interation 4] ('M_0_LRG', np.float64(12.50499561662278)) ('M_1_LRG', np.float64(13.84345959408218)) ('alpha_LRG', np.float64(1.0993081445999255)) ('f_sigv_LRG', np.float64(0.9330711592048458)) ('log_Mcent_LRG', np.float64(12.721317376072676)) ('sigma_M_LRG', np.float64(0.17007271302359556))
[Interation 4] ('M_0_LRG', np.float64(12.481323378318077)) ('M_1_LRG', np.float64(13.842662923525443)) ('alpha_LRG', np.float64(1.119453950892924)) ('f_sigv_LRG', np.float64(0.9405964102391702)) ('log_Mcent_LRG', np.float64(12.717984671768818)) ('sigma_M_LRG', np.float64(0.149033979724766))
[Interation 4] ('M_0_LRG', np.float64(12.502499891491986)) ('M_1_LRG', np.float64(13.8302868689493)) ('alpha_LRG', np.float64(1.0963236737056874)) ('f_sigv_LRG', np.float64(0.9409031708953458)) ('log_Mcent_LRG', np.float64(12.71376698604002)) ('sigma_M_LRG', np.float64(0.16185168739613431))
[Interation 4] ('M_0_LRG', np.float64(12.48109237428926)) ('M_1_LRG', np.float64(13.823319730503028)) ('alpha_LRG', np.float64(1.1194865067965956)) ('f_sigv_LRG', np.float64(0.9266325092581537)) ('log_Mcent_LRG', np.float64(12.710210145006373)) ('sigma_M_LRG', np.float64(0.14561026497679452))
[Interation 4] ('M_0_LRG', np.float64(12.474542661908616)) ('M_1_LRG', np.float64(13.817962192340575)) ('alpha_LRG', np.float64(1.1126047825454235)) ('f_sigv_LRG', np.float64(0.9528311525975302)) ('log_Mcent_LRG', np.float64(12.70378127390054)) ('sigma_M_LRG', np.float64(0.14760612550298152))
[Interation 4] ('M_0_LRG', np.float64(12.526140922210123)) ('M_1_LRG', np.float64(13.818471108048357)) ('alpha_LRG', np.float64(1.1012768352699787)) ('f_sigv_LRG', np.float64(0.9371217223653266)) ('log_Mcent_LRG', np.float64(12.696117411991903)) ('sigma_M_LRG', np.float64(0.10741736374488092))
[Interation 4] ('M_0_LRG', np.float64(12.567259964639952)) ('M_1_LRG', np.float64(13.829520490313824)) ('alpha_LRG', np.float64(1.0815293066292984)) ('f_sigv_LRG', np.float64(0.9308712675580192)) ('log_Mcent_LRG', np.float64(12.716082791201233)) ('sigma_M_LRG', np.float64(0.1571491586260002))
[Interation 4] ('M_0_LRG', np.float64(12.5101173468586)) ('M_1_LRG', np.float64(13.820633581025728)) ('alpha_LRG', np.float64(1.113575804242502)) ('f_sigv_LRG', np.float64(0.9326441361522834)) ('log_Mcent_LRG', np.float64(12.705562011248702)) ('sigma_M_LRG', np.float64(0.13092100523833744))
[Interation 4] ('M_0_LRG', np.float64(12.487185233050432)) ('M_1_LRG', np.float64(13.830054183683291)) ('alpha_LRG', np.float64(1.122850347416146)) ('f_sigv_LRG', np.float64(0.9440016385276419)) ('log_Mcent_LRG', np.float64(12.712766544013578)) ('sigma_M_LRG', np.float64(0.15078818422327195))
[Interation 4] chi2=516.2014661214497
[Interation 4] chi2=502.91727472260914
[Interation 4] chi2=494.6816603559543
[Interation 4] chi2=521.4301582395244
[Interation 4] chi2=510.26516035206316
[Interation 4] chi2=534.0544982939832
[Interation 4] chi2=537.8126642000435
[Interation 4] chi2=519.861501340289
[Interation 4] chi2=448.7500274227629
[Interation 4] chi2=509.8204409756265
[Interation 4] chi2=519.8878483403765
[Interation 4] chi2=502.8627061949091
[Interation 5] ('M_0_LRG', np.float64(12.48317057242964)) ('M_1_LRG', np.float64(13.830501771231994)) ('alpha_LRG', np.float64(1.1126278900997386)) ('f_sigv_LRG', np.float64(0.9367506881370438)) ('log_Mcent_LRG', np.float64(12.714805895039133)) ('sigma_M_LRG', np.float64(0.16734735219986308))
[Interation 5] ('M_0_LRG', np.float64(12.487459032913751)) ('M_1_LRG', np.float64(13.8321358284176)) ('alpha_LRG', np.float64(1.114644238946835)) ('f_sigv_LRG', np.float64(0.9355532594916777)) ('log_Mcent_LRG', np.float64(12.712251138873372)) ('sigma_M_LRG', np.float64(0.15243877232556824))
[Interation 5] ('M_0_LRG', np.float64(12.486714214745271)) ('M_1_LRG', np.float64(13.833911829169436)) ('alpha_LRG', np.float64(1.1067340585708527)) ('f_sigv_LRG', np.float64(0.9445317999637812)) ('log_Mcent_LRG', np.float64(12.719520563332452)) ('sigma_M_LRG', np.float64(0.16975446990049026))
[Interation 5] ('M_0_LRG', np.float64(12.484815955781942)) ('M_1_LRG', np.float64(13.83055240730021)) ('alpha_LRG', np.float64(1.1174343474837445)) ('f_sigv_LRG', np.float64(0.9369302663206672)) ('log_Mcent_LRG', np.float64(12.712761652652427)) ('sigma_M_LRG', np.float64(0.15587748076926106))
[Interation 5] chi2=524.5839545128322
[Interation 5] chi2=502.3322894063287
[Interation 5] chi2=576.9076087902517
[Interation 5] chi2=477.2590492747538
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_02.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_02.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_02.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_02.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_02.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_02.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_02.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_02.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_02.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_02.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_02.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_02.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_02.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_02.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_02.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.494539717899563)) ('M_1_LRG', np.float64(13.816718901999572)) ('alpha_LRG', np.float64(1.1119441586673018)) ('f_sigv_LRG', np.float64(0.9363529588455207)) ('log_Mcent_LRG', np.float64(12.70092325923422)) ('sigma_M_LRG', np.float64(0.12883482986143752))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3267967700958252
Start satellite assignement
Satellite assignement done 0.07640361785888672
LRG mock catalogue done 0.1511681079864502
605935 central galaxies, 94187 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6677484512329102
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_02.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:19
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Load smu measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Load rppi measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Load correlation matrix for LRG at z0.725 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.412737529398541)) ('M_1_LRG', np.float64(13.475369443138538)) ('alpha_LRG', np.float64(1.0421028365629708)) ('f_sigv_LRG', np.float64(0.9872845074710613)) ('log_Mcent_LRG', np.float64(12.768883668124195)) ('sigma_M_LRG', np.float64(0.42779572343006234))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.550220865874815)) ('M_1_LRG', np.float64(13.507385777152118)) ('alpha_LRG', np.float64(0.9381145091126046)) ('f_sigv_LRG', np.float64(0.8541351785920803)) ('log_Mcent_LRG', np.float64(12.871574691357491)) ('sigma_M_LRG', np.float64(0.47435137354979634))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.452780484759085)) ('M_1_LRG', np.float64(13.359906351797878)) ('alpha_LRG', np.float64(0.9923335152033917)) ('f_sigv_LRG', np.float64(1.0098984149384982)) ('log_Mcent_LRG', np.float64(12.74298554688835)) ('sigma_M_LRG', np.float64(0.5270198841983861))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.448967691648251)) ('M_1_LRG', np.float64(13.462230143350835)) ('alpha_LRG', np.float64(1.009954427781658)) ('f_sigv_LRG', np.float64(0.9591742515090466)) ('log_Mcent_LRG', np.float64(12.711926774544688)) ('sigma_M_LRG', np.float64(0.3876251066816945))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.517743221644198)) ('M_1_LRG', np.float64(13.540783497859543)) ('alpha_LRG', np.float64(0.9646954253138689)) ('f_sigv_LRG', np.float64(0.9927310970159102)) ('log_Mcent_LRG', np.float64(12.77637773731386)) ('sigma_M_LRG', np.float64(0.5670789485012919))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.46198200050798)) ('M_1_LRG', np.float64(13.496382977760966)) ('alpha_LRG', np.float64(1.0396677200768616)) ('f_sigv_LRG', np.float64(0.9395031367300992)) ('log_Mcent_LRG', np.float64(12.760549037611156)) ('sigma_M_LRG', np.float64(0.5014526607392591))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.572691630638207)) ('M_1_LRG', np.float64(13.522354418511046)) ('alpha_LRG', np.float64(0.9815051144485517)) ('f_sigv_LRG', np.float64(0.9894377260410425)) ('log_Mcent_LRG', np.float64(12.766571935544254)) ('sigma_M_LRG', np.float64(0.4794826676587623))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.472337136122926)) ('M_1_LRG', np.float64(13.510142644690024)) ('alpha_LRG', np.float64(0.944511042512581)) ('f_sigv_LRG', np.float64(0.9924422863843797)) ('log_Mcent_LRG', np.float64(12.703266501255758)) ('sigma_M_LRG', np.float64(0.44740383482930707))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.578441604397977)) ('M_1_LRG', np.float64(13.735775783853756)) ('alpha_LRG', np.float64(0.9384411713636853)) ('f_sigv_LRG', np.float64(0.9869516937241393)) ('log_Mcent_LRG', np.float64(12.779096152004174)) ('sigma_M_LRG', np.float64(0.5189016349494807))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.458910400312003)) ('M_1_LRG', np.float64(13.516954889977654)) ('alpha_LRG', np.float64(1.0083837127487398)) ('f_sigv_LRG', np.float64(0.9127323722295736)) ('log_Mcent_LRG', np.float64(12.80694630383509)) ('sigma_M_LRG', np.float64(0.5582256114502318))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.46361407983487)) ('M_1_LRG', np.float64(13.542711094413454)) ('alpha_LRG', np.float64(0.9508794717868756)) ('f_sigv_LRG', np.float64(1.0252963621951572)) ('log_Mcent_LRG', np.float64(12.70928348745767)) ('sigma_M_LRG', np.float64(0.44490418946238))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.458254179058368)) ('M_1_LRG', np.float64(13.491352132388057)) ('alpha_LRG', np.float64(1.042123655814528)) ('f_sigv_LRG', np.float64(1.0005404839550878)) ('log_Mcent_LRG', np.float64(12.7460897982528)) ('sigma_M_LRG', np.float64(0.5650908854989366))
[Interation 5] chi2=10051.18185309665
[Interation 5] chi2=17727.45128265114
[Interation 5] chi2=6782.337292743746
[Interation 5] chi2=4886.5604836779585
[Interation 5] chi2=8870.224792844489
[Interation 5] chi2=5049.843545892935
[Interation 5] chi2=4500.1264196297625
[Interation 5] chi2=4095.8433445372334
[Interation 5] chi2=3621.240225442187
[Interation 5] chi2=4896.8161067247875
[Interation 5] chi2=3928.3031024283155
[Interation 5] chi2=5487.264594840007
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 6] ('M_0_LRG', np.float64(12.37994185010099)) ('M_1_LRG', np.float64(13.85954491537802)) ('alpha_LRG', np.float64(1.1766365407785755)) ('f_sigv_LRG', np.float64(0.942906061007941)) ('log_Mcent_LRG', np.float64(12.737567843003902)) ('sigma_M_LRG', np.float64(0.19853510521875917))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 6] ('M_0_LRG', np.float64(12.429861562943586)) ('M_1_LRG', np.float64(13.884006674037431)) ('alpha_LRG', np.float64(1.1493945891326098)) ('f_sigv_LRG', np.float64(0.9066424527615947)) ('log_Mcent_LRG', np.float64(12.785633288864336)) ('sigma_M_LRG', np.float64(0.29209430584354845))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 6] ('M_0_LRG', np.float64(12.425692358085984)) ('M_1_LRG', np.float64(13.842025726808115)) ('alpha_LRG', np.float64(1.1460890057257933)) ('f_sigv_LRG', np.float64(0.9012689666364869)) ('log_Mcent_LRG', np.float64(12.751764523746882)) ('sigma_M_LRG', np.float64(0.2512508078907013))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 6] ('M_0_LRG', np.float64(12.566106575851228)) ('M_1_LRG', np.float64(13.844617894295581)) ('alpha_LRG', np.float64(1.0591584105505158)) ('f_sigv_LRG', np.float64(0.9409292900724262)) ('log_Mcent_LRG', np.float64(12.728911255180215)) ('sigma_M_LRG', np.float64(0.2043581148339884))
[Interation 6] chi2=528.5645761771084
[Interation 6] chi2=570.1815539865693
[Interation 6] chi2=525.1888519138099
[Interation 6] chi2=535.7796940222893
[Interation 6] ('M_0_LRG', np.float64(12.577180075939806)) ('M_1_LRG', np.float64(13.835800577896121)) ('alpha_LRG', np.float64(1.0430336802711138)) ('f_sigv_LRG', np.float64(0.9677299132638318)) ('log_Mcent_LRG', np.float64(12.719993258861363)) ('sigma_M_LRG', np.float64(0.1742303602702852))
[Interation 6] ('M_0_LRG', np.float64(12.508988093938596)) ('M_1_LRG', np.float64(13.839928814849735)) ('alpha_LRG', np.float64(1.1068288869735003)) ('f_sigv_LRG', np.float64(0.9185740900269774)) ('log_Mcent_LRG', np.float64(12.743700584364175)) ('sigma_M_LRG', np.float64(0.2374148795947062))
[Interation 6] ('M_0_LRG', np.float64(12.497198237403936)) ('M_1_LRG', np.float64(13.860096609473294)) ('alpha_LRG', np.float64(1.0959771691805347)) ('f_sigv_LRG', np.float64(0.928039948086922)) ('log_Mcent_LRG', np.float64(12.753382189501918)) ('sigma_M_LRG', np.float64(0.23400782100775036))
[Interation 6] ('M_0_LRG', np.float64(12.602141419342148)) ('M_1_LRG', np.float64(13.84171268689178)) ('alpha_LRG', np.float64(1.0466530345892668)) ('f_sigv_LRG', np.float64(0.946667408632447)) ('log_Mcent_LRG', np.float64(12.729106396049469)) ('sigma_M_LRG', np.float64(0.1967592547203626))
[Interation 6] ('M_0_LRG', np.float64(12.511731786327777)) ('M_1_LRG', np.float64(13.853826406644362)) ('alpha_LRG', np.float64(1.087295196085523)) ('f_sigv_LRG', np.float64(0.9403821689544908)) ('log_Mcent_LRG', np.float64(12.765411719265078)) ('sigma_M_LRG', np.float64(0.2682661672397176))
[Interation 6] ('M_0_LRG', np.float64(12.471925541643422)) ('M_1_LRG', np.float64(13.868021347937772)) ('alpha_LRG', np.float64(1.1068955855442055)) ('f_sigv_LRG', np.float64(0.9283967950472428)) ('log_Mcent_LRG', np.float64(12.756356487530383)) ('sigma_M_LRG', np.float64(0.245252223994542))
[Interation 6] ('M_0_LRG', np.float64(12.58326353392644)) ('M_1_LRG', np.float64(13.788336924306233)) ('alpha_LRG', np.float64(1.077092192297311)) ('f_sigv_LRG', np.float64(0.9279827622471858)) ('log_Mcent_LRG', np.float64(12.69211535873384)) ('sigma_M_LRG', np.float64(0.14219285717354785))
[Interation 6] ('M_0_LRG', np.float64(12.518351038568705)) ('M_1_LRG', np.float64(13.8341334661952)) ('alpha_LRG', np.float64(1.1027197576361119)) ('f_sigv_LRG', np.float64(0.9269836348162874)) ('log_Mcent_LRG', np.float64(12.748367853950414)) ('sigma_M_LRG', np.float64(0.24262763312706093))
[Interation 6] ('M_0_LRG', np.float64(12.525110666791281)) ('M_1_LRG', np.float64(13.840053980530534)) ('alpha_LRG', np.float64(1.102793084170042)) ('f_sigv_LRG', np.float64(0.924287995728564)) ('log_Mcent_LRG', np.float64(12.743865993339542)) ('sigma_M_LRG', np.float64(0.23105298584667439))
[Interation 6] ('M_0_LRG', np.float64(12.547237954500439)) ('M_1_LRG', np.float64(13.867356197642321)) ('alpha_LRG', np.float64(1.0777891087058553)) ('f_sigv_LRG', np.float64(0.9309465604348753)) ('log_Mcent_LRG', np.float64(12.769722368806505)) ('sigma_M_LRG', np.float64(0.27083653648718636))
[Interation 6] ('M_0_LRG', np.float64(12.442446414556343)) ('M_1_LRG', np.float64(13.85334253621274)) ('alpha_LRG', np.float64(1.1338481023313167)) ('f_sigv_LRG', np.float64(0.9217450611218128)) ('log_Mcent_LRG', np.float64(12.761350306240864)) ('sigma_M_LRG', np.float64(0.25797867373212646))
[Interation 6] ('M_0_LRG', np.float64(12.488974850641506)) ('M_1_LRG', np.float64(13.862356682787615)) ('alpha_LRG', np.float64(1.097125295359374)) ('f_sigv_LRG', np.float64(0.9246421275244694)) ('log_Mcent_LRG', np.float64(12.753418523278942)) ('sigma_M_LRG', np.float64(0.23587558955410864))
[Interation 6] chi2=492.68558177553854
[Interation 6] chi2=496.6911512017091
[Interation 6] chi2=478.86587132506133
[Interation 6] chi2=526.0614835098608
[Interation 6] chi2=502.26291100879473
[Interation 6] chi2=526.6666563821867
[Interation 6] chi2=421.2075382034057
[Interation 6] chi2=534.975385538472
[Interation 6] chi2=448.49886640914974
[Interation 6] chi2=552.2623372849929
[Interation 6] chi2=539.8165979649563
[Interation 6] chi2=528.0861530124241
[Interation 7] ('M_0_LRG', np.float64(12.632889186093816)) ('M_1_LRG', np.float64(13.814288611213517)) ('alpha_LRG', np.float64(1.041997741077953)) ('f_sigv_LRG', np.float64(0.9343120953335657)) ('log_Mcent_LRG', np.float64(12.715232790405896)) ('sigma_M_LRG', np.float64(0.16609971775519755))
[Interation 7] ('M_0_LRG', np.float64(12.642400454039194)) ('M_1_LRG', np.float64(13.807633506846365)) ('alpha_LRG', np.float64(1.0349602211184743)) ('f_sigv_LRG', np.float64(0.9326122215934967)) ('log_Mcent_LRG', np.float64(12.70920103504671)) ('sigma_M_LRG', np.float64(0.15822537774805184))
[Interation 7] ('M_0_LRG', np.float64(12.598873044928794)) ('M_1_LRG', np.float64(13.783033175437923)) ('alpha_LRG', np.float64(1.0817837745950836)) ('f_sigv_LRG', np.float64(0.914751215738554)) ('log_Mcent_LRG', np.float64(12.69590257730502)) ('sigma_M_LRG', np.float64(0.14389035146284396))
[Interation 7] ('M_0_LRG', np.float64(12.569226159066984)) ('M_1_LRG', np.float64(13.820557813761416)) ('alpha_LRG', np.float64(1.0712859432464055)) ('f_sigv_LRG', np.float64(0.9240481975171244)) ('log_Mcent_LRG', np.float64(12.714183680958536)) ('sigma_M_LRG', np.float64(0.17217502147446134))
[Interation 7] chi2=501.54010807571245
[Interation 7] chi2=516.4322336327039
[Interation 7] chi2=557.7493734208804
[Interation 7] chi2=496.2597158107902
[Interation 7] ('M_0_LRG', np.float64(12.5976204436165)) ('M_1_LRG', np.float64(13.81735755047392)) ('alpha_LRG', np.float64(1.0536243260386076)) ('f_sigv_LRG', np.float64(0.9358975493526357)) ('log_Mcent_LRG', np.float64(12.708878972106033)) ('sigma_M_LRG', np.float64(0.16592949074039742))
[Interation 7] ('M_0_LRG', np.float64(12.65144078840431)) ('M_1_LRG', np.float64(13.82605265383442)) ('alpha_LRG', np.float64(1.0418041226906773)) ('f_sigv_LRG', np.float64(0.9196092193761477)) ('log_Mcent_LRG', np.float64(12.738002321391347)) ('sigma_M_LRG', np.float64(0.23020845973970355))
[Interation 7] ('M_0_LRG', np.float64(12.637340779265514)) ('M_1_LRG', np.float64(13.797702476470606)) ('alpha_LRG', np.float64(1.0322345123060994)) ('f_sigv_LRG', np.float64(0.9245753076465608)) ('log_Mcent_LRG', np.float64(12.699090865381494)) ('sigma_M_LRG', np.float64(0.14980228608332424))
[Interation 7] ('M_0_LRG', np.float64(12.58767910248708)) ('M_1_LRG', np.float64(13.832393978423218)) ('alpha_LRG', np.float64(1.076841783827916)) ('f_sigv_LRG', np.float64(0.9265598108087016)) ('log_Mcent_LRG', np.float64(12.736948175639505)) ('sigma_M_LRG', np.float64(0.21407279647844973))
[Interation 7] ('M_0_LRG', np.float64(12.617379911809543)) ('M_1_LRG', np.float64(13.819599447894529)) ('alpha_LRG', np.float64(1.058592562912925)) ('f_sigv_LRG', np.float64(0.9283206175268789)) ('log_Mcent_LRG', np.float64(12.721843370973373)) ('sigma_M_LRG', np.float64(0.18234430478143987))
[Interation 7] ('M_0_LRG', np.float64(12.569503358005457)) ('M_1_LRG', np.float64(13.831531968526702)) ('alpha_LRG', np.float64(1.0757920041476026)) ('f_sigv_LRG', np.float64(0.933949124922809)) ('log_Mcent_LRG', np.float64(12.725558785769604)) ('sigma_M_LRG', np.float64(0.18499839249420313))
[Interation 7] ('M_0_LRG', np.float64(12.681761525622765)) ('M_1_LRG', np.float64(13.794321932425662)) ('alpha_LRG', np.float64(1.0164323381292395)) ('f_sigv_LRG', np.float64(0.9246465164024175)) ('log_Mcent_LRG', np.float64(12.698293024646535)) ('sigma_M_LRG', np.float64(0.1411575675697373))
[Interation 7] ('M_0_LRG', np.float64(12.640101207067225)) ('M_1_LRG', np.float64(13.821763426496094)) ('alpha_LRG', np.float64(1.0266738386017853)) ('f_sigv_LRG', np.float64(0.9307060397276641)) ('log_Mcent_LRG', np.float64(12.720019649680834)) ('sigma_M_LRG', np.float64(0.18273614384734987))
[Interation 7] ('M_0_LRG', np.float64(12.636592697501417)) ('M_1_LRG', np.float64(13.79899141304993)) ('alpha_LRG', np.float64(1.026295011840225)) ('f_sigv_LRG', np.float64(0.9303765554265422)) ('log_Mcent_LRG', np.float64(12.699590647180653)) ('sigma_M_LRG', np.float64(0.15064616063655312))
[Interation 7] ('M_0_LRG', np.float64(12.590890901843249)) ('M_1_LRG', np.float64(13.831891869591308)) ('alpha_LRG', np.float64(1.0566211130684613)) ('f_sigv_LRG', np.float64(0.9269091183709409)) ('log_Mcent_LRG', np.float64(12.721385495198282)) ('sigma_M_LRG', np.float64(0.17548642767497846))
[Interation 7] ('M_0_LRG', np.float64(12.600301574497642)) ('M_1_LRG', np.float64(13.809221617532414)) ('alpha_LRG', np.float64(1.0524900470323493)) ('f_sigv_LRG', np.float64(0.9363492979919852)) ('log_Mcent_LRG', np.float64(12.716978967736265)) ('sigma_M_LRG', np.float64(0.19861922108313246))
[Interation 7] ('M_0_LRG', np.float64(12.660583912982979)) ('M_1_LRG', np.float64(13.814372739243785)) ('alpha_LRG', np.float64(1.0223644489324173)) ('f_sigv_LRG', np.float64(0.9342410644918182)) ('log_Mcent_LRG', np.float64(12.716399649191898)) ('sigma_M_LRG', np.float64(0.16952397761622828))
[Interation 7] chi2=492.20967135611426
[Interation 7] chi2=492.5899966467081
[Interation 7] chi2=494.55714476014185
[Interation 7] chi2=466.73784359280523
[Interation 7] chi2=529.0573476173255
[Interation 7] chi2=537.2813491446975
[Interation 7] chi2=474.7301885400108
[Interation 7] chi2=441.28978599392053
[Interation 7] chi2=456.68562697079324
[Interation 7] chi2=521.8977637584898
[Interation 7] chi2=480.14749611567055
[Interation 7] chi2=521.1291856346386
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_03.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.61101035784029)) ('M_1_LRG', np.float64(13.809508557033384)) ('alpha_LRG', np.float64(1.0539538201124936)) ('f_sigv_LRG', np.float64(0.9314406095253394)) ('log_Mcent_LRG', np.float64(12.704303320029815)) ('sigma_M_LRG', np.float64(0.15194756989977865))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.32813239097595215
Start satellite assignement
Satellite assignement done 0.08518362045288086
LRG mock catalogue done 0.1638786792755127
609546 central galaxies, 90325 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.7033946514129639
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_03.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:19
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.624280069184124)) ('M_1_LRG', np.float64(13.751434734515326)) ('alpha_LRG', np.float64(0.8437950704037195)) ('f_sigv_LRG', np.float64(0.8509289934296684)) ('log_Mcent_LRG', np.float64(12.583940497507795)) ('sigma_M_LRG', np.float64(0.20348446355420285))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.35919499980914)) ('M_1_LRG', np.float64(13.810480997975306)) ('alpha_LRG', np.float64(0.8996915630497904)) ('f_sigv_LRG', np.float64(1.0347728785457238)) ('log_Mcent_LRG', np.float64(12.607311216753887)) ('sigma_M_LRG', np.float64(0.13452642013959265))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.269600683528306)) ('M_1_LRG', np.float64(14.059538241978874)) ('alpha_LRG', np.float64(1.1681960185471214)) ('f_sigv_LRG', np.float64(1.0311705658446109)) ('log_Mcent_LRG', np.float64(12.893179546940729)) ('sigma_M_LRG', np.float64(0.32896920351736575))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.60779297839725)) ('M_1_LRG', np.float64(13.54219359721748)) ('alpha_LRG', np.float64(0.8560140122124105)) ('f_sigv_LRG', np.float64(0.7709080638617818)) ('log_Mcent_LRG', np.float64(12.560216858557194)) ('sigma_M_LRG', np.float64(0.17481798870200616))
[Interation 8] chi2=2545.002357632442
[Interation 8] chi2=1916.3364871946749
[Interation 8] chi2=1040.3507467081067
[Interation 8] chi2=2476.2487456328686
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.58333140779899)) ('M_1_LRG', np.float64(13.82257912739495)) ('alpha_LRG', np.float64(1.0813582146822769)) ('f_sigv_LRG', np.float64(0.9241523390432105)) ('log_Mcent_LRG', np.float64(12.744765767739446)) ('sigma_M_LRG', np.float64(0.2556398941432631))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.591666566824037)) ('M_1_LRG', np.float64(13.855848215578856)) ('alpha_LRG', np.float64(1.0281567373302636)) ('f_sigv_LRG', np.float64(0.9304965431594336)) ('log_Mcent_LRG', np.float64(12.7744005540854)) ('sigma_M_LRG', np.float64(0.25010701843537275))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.616734639347843)) ('M_1_LRG', np.float64(13.886579380486017)) ('alpha_LRG', np.float64(1.0333624571048565)) ('f_sigv_LRG', np.float64(0.9336182263690077)) ('log_Mcent_LRG', np.float64(12.75963224277553)) ('sigma_M_LRG', np.float64(0.22873882698383718))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.41708724451943)) ('M_1_LRG', np.float64(13.816255792322435)) ('alpha_LRG', np.float64(1.1590483424907292)) ('f_sigv_LRG', np.float64(0.9492158787122987)) ('log_Mcent_LRG', np.float64(12.709490720095399)) ('sigma_M_LRG', np.float64(0.1378109330078049))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.356618528835023)) ('M_1_LRG', np.float64(13.867927953821159)) ('alpha_LRG', np.float64(1.1382035653647964)) ('f_sigv_LRG', np.float64(0.9348829543475181)) ('log_Mcent_LRG', np.float64(12.751372177430627)) ('sigma_M_LRG', np.float64(0.24635884479532477))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.438329386378804)) ('M_1_LRG', np.float64(13.868052992372334)) ('alpha_LRG', np.float64(1.117430838157718)) ('f_sigv_LRG', np.float64(0.9180999468101594)) ('log_Mcent_LRG', np.float64(12.721131622564283)) ('sigma_M_LRG', np.float64(0.16038723637617247))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.5509934218282)) ('M_1_LRG', np.float64(13.819258176652026)) ('alpha_LRG', np.float64(1.052069456029687)) ('f_sigv_LRG', np.float64(0.9195393125017944)) ('log_Mcent_LRG', np.float64(12.715627988924242)) ('sigma_M_LRG', np.float64(0.19723957828150407))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.508831751849337)) ('M_1_LRG', np.float64(13.919688296829763)) ('alpha_LRG', np.float64(1.0844418228980524)) ('f_sigv_LRG', np.float64(0.9558740411762578)) ('log_Mcent_LRG', np.float64(12.762148368664468)) ('sigma_M_LRG', np.float64(0.22821216537804667))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.567207672947761)) ('M_1_LRG', np.float64(13.88794764274729)) ('alpha_LRG', np.float64(1.0517259070288842)) ('f_sigv_LRG', np.float64(0.9447517346392726)) ('log_Mcent_LRG', np.float64(12.758945798995562)) ('sigma_M_LRG', np.float64(0.22242244117976218))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.70964065544718)) ('M_1_LRG', np.float64(13.842120798561497)) ('alpha_LRG', np.float64(0.9609973679443464)) ('f_sigv_LRG', np.float64(0.954562981698803)) ('log_Mcent_LRG', np.float64(12.75193142516331)) ('sigma_M_LRG', np.float64(0.231067151577789))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.477887092998841)) ('M_1_LRG', np.float64(13.821605177966418)) ('alpha_LRG', np.float64(1.1052290156117393)) ('f_sigv_LRG', np.float64(0.923399240118969)) ('log_Mcent_LRG', np.float64(12.700935170199221)) ('sigma_M_LRG', np.float64(0.14298886569914104))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.522981851615413)) ('M_1_LRG', np.float64(13.8645980142069)) ('alpha_LRG', np.float64(1.0882914736857516)) ('f_sigv_LRG', np.float64(0.9138253326936814)) ('log_Mcent_LRG', np.float64(12.768903805100974)) ('sigma_M_LRG', np.float64(0.2638488256024568))
[Interation 8] chi2=577.479479590285
[Interation 8] chi2=698.7937497162486
[Interation 8] chi2=550.5168984480771
[Interation 8] chi2=553.1574614298587
[Interation 8] chi2=571.0656316615313
[Interation 8] chi2=466.5458183282149
[Interation 8] chi2=452.49723993253934
[Interation 8] chi2=526.7302414281969
[Interation 8] chi2=554.3540474052583
[Interation 8] chi2=585.5906772889797
[Interation 8] chi2=514.2914307522777
[Interation 8] chi2=512.6224127911449
[Interation 9] ('M_0_LRG', np.float64(12.58329844133947)) ('M_1_LRG', np.float64(13.814726820804625)) ('alpha_LRG', np.float64(1.087185970127601)) ('f_sigv_LRG', np.float64(0.920664765014793)) ('log_Mcent_LRG', np.float64(12.710968830921427)) ('sigma_M_LRG', np.float64(0.15615249151931876))
[Interation 9] ('M_0_LRG', np.float64(12.51911799959265)) ('M_1_LRG', np.float64(13.831817883578909)) ('alpha_LRG', np.float64(1.1087031514892154)) ('f_sigv_LRG', np.float64(0.9133030366914519)) ('log_Mcent_LRG', np.float64(12.725856690074727)) ('sigma_M_LRG', np.float64(0.2017867238076264))
[Interation 9] ('M_0_LRG', np.float64(12.495537531065235)) ('M_1_LRG', np.float64(13.837548974576233)) ('alpha_LRG', np.float64(1.1299015407287711)) ('f_sigv_LRG', np.float64(0.9150274194618614)) ('log_Mcent_LRG', np.float64(12.734694817520563)) ('sigma_M_LRG', np.float64(0.21184063846689577))
[Interation 9] ('M_0_LRG', np.float64(12.534959041106461)) ('M_1_LRG', np.float64(13.816875634672616)) ('alpha_LRG', np.float64(1.1012562630752263)) ('f_sigv_LRG', np.float64(0.9277099271640629)) ('log_Mcent_LRG', np.float64(12.713446539691239)) ('sigma_M_LRG', np.float64(0.16702331093704526))
[Interation 9] chi2=503.40709650057966
[Interation 9] chi2=488.3010982545619
[Interation 9] chi2=482.13636543585517
[Interation 9] chi2=525.2407834253532
[Interation 9] ('M_0_LRG', np.float64(12.532003065680955)) ('M_1_LRG', np.float64(13.8327444563308)) ('alpha_LRG', np.float64(1.0894679647768866)) ('f_sigv_LRG', np.float64(0.9272198628890224)) ('log_Mcent_LRG', np.float64(12.716707789034263)) ('sigma_M_LRG', np.float64(0.1699035745644777))
[Interation 9] ('M_0_LRG', np.float64(12.535764407982956)) ('M_1_LRG', np.float64(13.82735221259378)) ('alpha_LRG', np.float64(1.0898526218929607)) ('f_sigv_LRG', np.float64(0.9398121488409965)) ('log_Mcent_LRG', np.float64(12.710141252996065)) ('sigma_M_LRG', np.float64(0.14886031687636908))
[Interation 9] ('M_0_LRG', np.float64(12.639211093461011)) ('M_1_LRG', np.float64(13.811058974038257)) ('alpha_LRG', np.float64(1.0511002027114449)) ('f_sigv_LRG', np.float64(0.918291297961537)) ('log_Mcent_LRG', np.float64(12.715594560404076)) ('sigma_M_LRG', np.float64(0.18505607248330974))
[Interation 9] ('M_0_LRG', np.float64(12.531390131818394)) ('M_1_LRG', np.float64(13.823146673887099)) ('alpha_LRG', np.float64(1.0944431987423868)) ('f_sigv_LRG', np.float64(0.9240968161584087)) ('log_Mcent_LRG', np.float64(12.707543688885183)) ('sigma_M_LRG', np.float64(0.15227865464509255))
[Interation 9] ('M_0_LRG', np.float64(12.458092422031285)) ('M_1_LRG', np.float64(13.832796702015319)) ('alpha_LRG', np.float64(1.1426248179978111)) ('f_sigv_LRG', np.float64(0.9351900072800718)) ('log_Mcent_LRG', np.float64(12.713073014844928)) ('sigma_M_LRG', np.float64(0.14591484272679978))
[Interation 9] ('M_0_LRG', np.float64(12.57311071324993)) ('M_1_LRG', np.float64(13.819028942517086)) ('alpha_LRG', np.float64(1.0800931423471234)) ('f_sigv_LRG', np.float64(0.9283571474739077)) ('log_Mcent_LRG', np.float64(12.712026265759613)) ('sigma_M_LRG', np.float64(0.15758334054350537))
[Interation 9] ('M_0_LRG', np.float64(12.53247227138116)) ('M_1_LRG', np.float64(13.83213140848676)) ('alpha_LRG', np.float64(1.0773837198604233)) ('f_sigv_LRG', np.float64(0.9416124090239013)) ('log_Mcent_LRG', np.float64(12.72152192790731)) ('sigma_M_LRG', np.float64(0.1793057916933415))
[Interation 9] ('M_0_LRG', np.float64(12.514397953643009)) ('M_1_LRG', np.float64(13.833824420546684)) ('alpha_LRG', np.float64(1.108333726960617)) ('f_sigv_LRG', np.float64(0.9173624030640181)) ('log_Mcent_LRG', np.float64(12.721234928946528)) ('sigma_M_LRG', np.float64(0.1828766527650183))
[Interation 9] ('M_0_LRG', np.float64(12.494759390444791)) ('M_1_LRG', np.float64(13.829133389073194)) ('alpha_LRG', np.float64(1.1070639286627295)) ('f_sigv_LRG', np.float64(0.9425591846126851)) ('log_Mcent_LRG', np.float64(12.709095792680893)) ('sigma_M_LRG', np.float64(0.1427490195268878))
[Interation 9] ('M_0_LRG', np.float64(12.618965421852536)) ('M_1_LRG', np.float64(13.811056195338496)) ('alpha_LRG', np.float64(1.0510365223861358)) ('f_sigv_LRG', np.float64(0.9248738873383009)) ('log_Mcent_LRG', np.float64(12.710274266764383)) ('sigma_M_LRG', np.float64(0.1705953160544258))
[Interation 9] ('M_0_LRG', np.float64(12.50075357825321)) ('M_1_LRG', np.float64(13.822638802538277)) ('alpha_LRG', np.float64(1.1097060338545028)) ('f_sigv_LRG', np.float64(0.934522323165495)) ('log_Mcent_LRG', np.float64(12.709373116287013)) ('sigma_M_LRG', np.float64(0.14853223885547012))
[Interation 9] ('M_0_LRG', np.float64(12.53427088143162)) ('M_1_LRG', np.float64(13.81458861556813)) ('alpha_LRG', np.float64(1.0961523663269572)) ('f_sigv_LRG', np.float64(0.9259823976944763)) ('log_Mcent_LRG', np.float64(12.699739584657248)) ('sigma_M_LRG', np.float64(0.13537548023984242))
[Interation 9] chi2=501.6994893782491
[Interation 9] chi2=503.3382907439676
[Interation 9] chi2=521.4200724170112
[Interation 9] chi2=506.67527026926945
[Interation 9] chi2=513.1167308278284
[Interation 9] chi2=550.3591754000317
[Interation 9] chi2=494.3223541523269
[Interation 9] chi2=451.5162539396939
[Interation 9] chi2=490.81456534979657
[Interation 9] chi2=531.5200409337041
[Interation 9] chi2=538.1383410543925
[Interation 9] chi2=490.0192621018569
[Interation 10] ('M_0_LRG', np.float64(12.551475089670594)) ('M_1_LRG', np.float64(13.811797998042168)) ('alpha_LRG', np.float64(1.0878523130091124)) ('f_sigv_LRG', np.float64(0.9271281494095318)) ('log_Mcent_LRG', np.float64(12.699485525821046)) ('sigma_M_LRG', np.float64(0.12890072812548764))
[Interation 10] ('M_0_LRG', np.float64(12.57157479559971)) ('M_1_LRG', np.float64(13.818446140509195)) ('alpha_LRG', np.float64(1.062491020850158)) ('f_sigv_LRG', np.float64(0.9488567811066174)) ('log_Mcent_LRG', np.float64(12.704169312107648)) ('sigma_M_LRG', np.float64(0.14074713639857106))
[Interation 10] ('M_0_LRG', np.float64(12.505733988239792)) ('M_1_LRG', np.float64(13.824183752506277)) ('alpha_LRG', np.float64(1.1112911797707652)) ('f_sigv_LRG', np.float64(0.9276631740811602)) ('log_Mcent_LRG', np.float64(12.706851445746445)) ('sigma_M_LRG', np.float64(0.14271737011818075))
[Interation 10] ('M_0_LRG', np.float64(12.62590584000275)) ('M_1_LRG', np.float64(13.810441045529604)) ('alpha_LRG', np.float64(1.0407338598459261)) ('f_sigv_LRG', np.float64(0.9450095187164235)) ('log_Mcent_LRG', np.float64(12.706672143085324)) ('sigma_M_LRG', np.float64(0.1482129590348616))
[Interation 10] chi2=468.3876782414313
[Interation 10] chi2=470.76163992089374
[Interation 10] chi2=462.14942362686315
[Interation 10] chi2=597.0495516686124
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_04.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.551875829825569)) ('M_1_LRG', np.float64(13.818619359161854)) ('alpha_LRG', np.float64(1.0785696726095229)) ('f_sigv_LRG', np.float64(0.9364902222440811)) ('log_Mcent_LRG', np.float64(12.70853596574494)) ('sigma_M_LRG', np.float64(0.1550037918878402))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3270862102508545
Start satellite assignement
Satellite assignement done 0.08246040344238281
LRG mock catalogue done 0.15971970558166504
606889 central galaxies, 92644 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6782512664794922
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_04.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:28
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.467224255776669)) ('M_1_LRG', np.float64(13.3932284855133)) ('alpha_LRG', np.float64(1.155517206308871)) ('f_sigv_LRG', np.float64(1.0404837172876777)) ('log_Mcent_LRG', np.float64(12.688500377409918)) ('sigma_M_LRG', np.float64(0.5075566173313408))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.656844843680947)) ('M_1_LRG', np.float64(13.54094347442608)) ('alpha_LRG', np.float64(1.0036660333312393)) ('f_sigv_LRG', np.float64(1.0882298784444389)) ('log_Mcent_LRG', np.float64(12.794710993068504)) ('sigma_M_LRG', np.float64(0.447440596970464))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.359563063056292)) ('M_1_LRG', np.float64(13.616054058566856)) ('alpha_LRG', np.float64(1.060956791369259)) ('f_sigv_LRG', np.float64(1.0694040830798217)) ('log_Mcent_LRG', np.float64(12.86531835560043)) ('sigma_M_LRG', np.float64(0.625979741935979))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.487949405527502)) ('M_1_LRG', np.float64(13.5257843703434)) ('alpha_LRG', np.float64(0.8473242595101401)) ('f_sigv_LRG', np.float64(1.0078281103995828)) ('log_Mcent_LRG', np.float64(12.716955764001238)) ('sigma_M_LRG', np.float64(0.5069435909058055))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.571338518914068)) ('M_1_LRG', np.float64(13.461935022842765)) ('alpha_LRG', np.float64(0.9480716151288076)) ('f_sigv_LRG', np.float64(1.071283316117186)) ('log_Mcent_LRG', np.float64(12.690414610385934)) ('sigma_M_LRG', np.float64(0.4342600447736228))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.401496837686825)) ('M_1_LRG', np.float64(13.613601696219629)) ('alpha_LRG', np.float64(0.9844579667464497)) ('f_sigv_LRG', np.float64(1.0368246310969385)) ('log_Mcent_LRG', np.float64(12.692330028907561)) ('sigma_M_LRG', np.float64(0.5004279415676997))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.56473301001656)) ('M_1_LRG', np.float64(13.623114660359548)) ('alpha_LRG', np.float64(0.8872535930374293)) ('f_sigv_LRG', np.float64(1.064111406292782)) ('log_Mcent_LRG', np.float64(12.722993591628516)) ('sigma_M_LRG', np.float64(0.49180781081883096))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.419425250363254)) ('M_1_LRG', np.float64(13.4992677378361)) ('alpha_LRG', np.float64(0.9507232895708172)) ('f_sigv_LRG', np.float64(0.9012414345321514)) ('log_Mcent_LRG', np.float64(12.701412403860846)) ('sigma_M_LRG', np.float64(0.488125643592187))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.52395377211869)) ('M_1_LRG', np.float64(13.339370925878235)) ('alpha_LRG', np.float64(1.0931473234737428)) ('f_sigv_LRG', np.float64(0.8777854134556852)) ('log_Mcent_LRG', np.float64(12.678665034614676)) ('sigma_M_LRG', np.float64(0.5248012921790084))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.629212953944084)) ('M_1_LRG', np.float64(13.607383562975997)) ('alpha_LRG', np.float64(0.9293101713314016)) ('f_sigv_LRG', np.float64(1.0184406142571836)) ('log_Mcent_LRG', np.float64(12.659680794546103)) ('sigma_M_LRG', np.float64(0.44816130505059615))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.423636933537395)) ('M_1_LRG', np.float64(13.735407195265076)) ('alpha_LRG', np.float64(0.9921621944502639)) ('f_sigv_LRG', np.float64(0.9767123441548968)) ('log_Mcent_LRG', np.float64(12.704403113698021)) ('sigma_M_LRG', np.float64(0.4319141843354086))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.496816520094155)) ('M_1_LRG', np.float64(13.630706728611734)) ('alpha_LRG', np.float64(1.025501474531955)) ('f_sigv_LRG', np.float64(1.0164932000247178)) ('log_Mcent_LRG', np.float64(12.695400258000635)) ('sigma_M_LRG', np.float64(0.4602334972267013))
[Interation 10] chi2=6020.534956985758
[Interation 10] chi2=9356.049208723625
[Interation 10] chi2=4842.987660243745
[Interation 10] chi2=5563.108270547906
[Interation 10] chi2=4717.914939357686
[Interation 10] chi2=5185.538957164747
[Interation 10] chi2=4142.824883218678
[Interation 10] chi2=4125.203391152773
[Interation 10] chi2=4783.4820358042025
[Interation 10] chi2=7343.547152492858
[Interation 10] chi2=3289.01013154955
[Interation 10] chi2=3998.8035173490416
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 11] ('M_0_LRG', np.float64(12.423666976870482)) ('M_1_LRG', np.float64(13.91880323121574)) ('alpha_LRG', np.float64(1.0817163239159833)) ('f_sigv_LRG', np.float64(0.9502891432900251)) ('log_Mcent_LRG', np.float64(12.800659625962542)) ('sigma_M_LRG', np.float64(0.30804660327993383))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 11] ('M_0_LRG', np.float64(12.532024824792789)) ('M_1_LRG', np.float64(13.822592994901699)) ('alpha_LRG', np.float64(1.0967725220147375)) ('f_sigv_LRG', np.float64(0.9142373497903158)) ('log_Mcent_LRG', np.float64(12.717841977914441)) ('sigma_M_LRG', np.float64(0.20189479053890735))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 11] ('M_0_LRG', np.float64(12.5105859167387)) ('M_1_LRG', np.float64(13.844999992406015)) ('alpha_LRG', np.float64(1.0595519109689628)) ('f_sigv_LRG', np.float64(0.9377321974947902)) ('log_Mcent_LRG', np.float64(12.731125499037956)) ('sigma_M_LRG', np.float64(0.22619652826044523))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 11] ('M_0_LRG', np.float64(12.384208957198299)) ('M_1_LRG', np.float64(13.803373814089548)) ('alpha_LRG', np.float64(1.1606963337902412)) ('f_sigv_LRG', np.float64(0.9150603804964405)) ('log_Mcent_LRG', np.float64(12.705183811880834)) ('sigma_M_LRG', np.float64(0.160479798986999))
[Interation 11] chi2=601.6275504419264
[Interation 11] chi2=516.7767900048406
[Interation 11] chi2=562.8964996434238
[Interation 11] chi2=529.1282249744615
[Interation 11] ('M_0_LRG', np.float64(12.438490791073313)) ('M_1_LRG', np.float64(13.85386848064089)) ('alpha_LRG', np.float64(1.1237103061372509)) ('f_sigv_LRG', np.float64(0.9172706408788949)) ('log_Mcent_LRG', np.float64(12.740477238340707)) ('sigma_M_LRG', np.float64(0.22097002740448307))
[Interation 11] ('M_0_LRG', np.float64(12.576712055726167)) ('M_1_LRG', np.float64(13.802248243913558)) ('alpha_LRG', np.float64(1.085659106788299)) ('f_sigv_LRG', np.float64(0.9410153641916744)) ('log_Mcent_LRG', np.float64(12.68121358037336)) ('sigma_M_LRG', np.float64(0.09863995931559777))
[Interation 11] ('M_0_LRG', np.float64(12.459651498271155)) ('M_1_LRG', np.float64(13.819144786181512)) ('alpha_LRG', np.float64(1.1376659122642623)) ('f_sigv_LRG', np.float64(0.9182948579112986)) ('log_Mcent_LRG', np.float64(12.707194536197704)) ('sigma_M_LRG', np.float64(0.1496533460877022))
[Interation 11] ('M_0_LRG', np.float64(12.554219577568212)) ('M_1_LRG', np.float64(13.817409670252395)) ('alpha_LRG', np.float64(1.079306271091722)) ('f_sigv_LRG', np.float64(0.9129900718943907)) ('log_Mcent_LRG', np.float64(12.705827071111326)) ('sigma_M_LRG', np.float64(0.15621762423327068))
[Interation 11] ('M_0_LRG', np.float64(12.428355844175815)) ('M_1_LRG', np.float64(13.845860983113228)) ('alpha_LRG', np.float64(1.1212108004977666)) ('f_sigv_LRG', np.float64(0.9453111664846086)) ('log_Mcent_LRG', np.float64(12.719938430633176)) ('sigma_M_LRG', np.float64(0.1618320000852454))
[Interation 11] ('M_0_LRG', np.float64(12.407255175667643)) ('M_1_LRG', np.float64(13.83335342279328)) ('alpha_LRG', np.float64(1.1238297160278707)) ('f_sigv_LRG', np.float64(0.9457687504244048)) ('log_Mcent_LRG', np.float64(12.719084098895328)) ('sigma_M_LRG', np.float64(0.1785339466722053))
[Interation 11] ('M_0_LRG', np.float64(12.51057653283239)) ('M_1_LRG', np.float64(13.790852460799961)) ('alpha_LRG', np.float64(1.1423345209154967)) ('f_sigv_LRG', np.float64(0.8942884112376727)) ('log_Mcent_LRG', np.float64(12.686700083553207)) ('sigma_M_LRG', np.float64(0.1216377006767948))
[Interation 11] ('M_0_LRG', np.float64(12.449723581342734)) ('M_1_LRG', np.float64(13.825028442638311)) ('alpha_LRG', np.float64(1.1100647041321643)) ('f_sigv_LRG', np.float64(0.9585006667913647)) ('log_Mcent_LRG', np.float64(12.713112017759457)) ('sigma_M_LRG', np.float64(0.16375515653105494))
[Interation 11] ('M_0_LRG', np.float64(12.348111785448722)) ('M_1_LRG', np.float64(13.857652756788285)) ('alpha_LRG', np.float64(1.1464537183882184)) ('f_sigv_LRG', np.float64(0.9464184805454058)) ('log_Mcent_LRG', np.float64(12.732251538080074)) ('sigma_M_LRG', np.float64(0.1932320165362032))
[Interation 11] ('M_0_LRG', np.float64(12.466014150305995)) ('M_1_LRG', np.float64(13.827441074084394)) ('alpha_LRG', np.float64(1.1153250323935637)) ('f_sigv_LRG', np.float64(0.9466188493035228)) ('log_Mcent_LRG', np.float64(12.700388684075206)) ('sigma_M_LRG', np.float64(0.1215488752236587))
[Interation 11] ('M_0_LRG', np.float64(12.53406540839393)) ('M_1_LRG', np.float64(13.839044023632631)) ('alpha_LRG', np.float64(1.0545946361693337)) ('f_sigv_LRG', np.float64(0.9471382286213017)) ('log_Mcent_LRG', np.float64(12.736073853253986)) ('sigma_M_LRG', np.float64(0.2194789579076089))
[Interation 11] ('M_0_LRG', np.float64(12.467971153671131)) ('M_1_LRG', np.float64(13.84099252430891)) ('alpha_LRG', np.float64(1.1223969224287431)) ('f_sigv_LRG', np.float64(0.9362753858552367)) ('log_Mcent_LRG', np.float64(12.732464761717269)) ('sigma_M_LRG', np.float64(0.18320241916683355))
[Interation 11] chi2=504.80412049047055
[Interation 11] chi2=551.2195441074122
[Interation 11] chi2=488.76898736143295
[Interation 11] chi2=505.46610021072445
[Interation 11] chi2=512.0546922603003
[Interation 11] chi2=495.7729646266529
[Interation 11] chi2=532.1969944471621
[Interation 11] chi2=534.2249669464373
[Interation 11] chi2=443.1557068664401
[Interation 11] chi2=469.51861087900784
[Interation 11] chi2=597.5352835343108
[Interation 11] chi2=453.33817156318185
[Interation 12] ('M_0_LRG', np.float64(12.460778525266678)) ('M_1_LRG', np.float64(13.819273402832565)) ('alpha_LRG', np.float64(1.1182524951232709)) ('f_sigv_LRG', np.float64(0.9381828332487316)) ('log_Mcent_LRG', np.float64(12.708394082716815)) ('sigma_M_LRG', np.float64(0.1560060236754915))
[Interation 12] ('M_0_LRG', np.float64(12.529546175721181)) ('M_1_LRG', np.float64(13.81142589286591)) ('alpha_LRG', np.float64(1.0897757716419738)) ('f_sigv_LRG', np.float64(0.9290384258412532)) ('log_Mcent_LRG', np.float64(12.699692076835985)) ('sigma_M_LRG', np.float64(0.13047937724112457))
[Interation 12] ('M_0_LRG', np.float64(12.464604893250675)) ('M_1_LRG', np.float64(13.847585999752084)) ('alpha_LRG', np.float64(1.1289959894476433)) ('f_sigv_LRG', np.float64(0.9383185957625216)) ('log_Mcent_LRG', np.float64(12.722400371591487)) ('sigma_M_LRG', np.float64(0.16256849092252978))
[Interation 12] ('M_0_LRG', np.float64(12.364666177283906)) ('M_1_LRG', np.float64(13.847941247022485)) ('alpha_LRG', np.float64(1.1582605499679057)) ('f_sigv_LRG', np.float64(0.9439730824367125)) ('log_Mcent_LRG', np.float64(12.721421181190655)) ('sigma_M_LRG', np.float64(0.16456323552445185))
[Interation 12] chi2=452.6005234329787
[Interation 12] chi2=493.1127476083412
[Interation 12] chi2=487.8534899718987
[Interation 12] chi2=472.7931651546984
[Interation 12] ('M_0_LRG', np.float64(12.473884114283113)) ('M_1_LRG', np.float64(13.831104543729829)) ('alpha_LRG', np.float64(1.115186692294311)) ('f_sigv_LRG', np.float64(0.9403174650164374)) ('log_Mcent_LRG', np.float64(12.713847330486553)) ('sigma_M_LRG', np.float64(0.15516780645443928))
[Interation 12] ('M_0_LRG', np.float64(12.491693483694606)) ('M_1_LRG', np.float64(13.827241134702954)) ('alpha_LRG', np.float64(1.1169013774735272)) ('f_sigv_LRG', np.float64(0.9389808916653851)) ('log_Mcent_LRG', np.float64(12.709220995024141)) ('sigma_M_LRG', np.float64(0.1476630285378041))
[Interation 12] ('M_0_LRG', np.float64(12.481132040888607)) ('M_1_LRG', np.float64(13.828528484588476)) ('alpha_LRG', np.float64(1.1257303722380674)) ('f_sigv_LRG', np.float64(0.9257730458203142)) ('log_Mcent_LRG', np.float64(12.71379248216815)) ('sigma_M_LRG', np.float64(0.16332295013946813))
[Interation 12] ('M_0_LRG', np.float64(12.509354931368458)) ('M_1_LRG', np.float64(13.829420674124888)) ('alpha_LRG', np.float64(1.1052334436170324)) ('f_sigv_LRG', np.float64(0.9363469607600567)) ('log_Mcent_LRG', np.float64(12.711546045555867)) ('sigma_M_LRG', np.float64(0.14956433900548516))
[Interation 12] ('M_0_LRG', np.float64(12.517434700668069)) ('M_1_LRG', np.float64(13.8250616574589)) ('alpha_LRG', np.float64(1.099322929267698)) ('f_sigv_LRG', np.float64(0.9347452914683645)) ('log_Mcent_LRG', np.float64(12.706426029768474)) ('sigma_M_LRG', np.float64(0.1364614697650623))
[Interation 12] ('M_0_LRG', np.float64(12.503151913520934)) ('M_1_LRG', np.float64(13.823625694645582)) ('alpha_LRG', np.float64(1.1034599894853363)) ('f_sigv_LRG', np.float64(0.9392064764377024)) ('log_Mcent_LRG', np.float64(12.713017499129304)) ('sigma_M_LRG', np.float64(0.1603464557370437))
[Interation 12] ('M_0_LRG', np.float64(12.482373503847866)) ('M_1_LRG', np.float64(13.817034336651814)) ('alpha_LRG', np.float64(1.1107182511407032)) ('f_sigv_LRG', np.float64(0.9283397986224229)) ('log_Mcent_LRG', np.float64(12.703406149623554)) ('sigma_M_LRG', np.float64(0.14506519013424207))
[Interation 12] ('M_0_LRG', np.float64(12.449727301880696)) ('M_1_LRG', np.float64(13.84615670642334)) ('alpha_LRG', np.float64(1.1216228091282583)) ('f_sigv_LRG', np.float64(0.9376759168615508)) ('log_Mcent_LRG', np.float64(12.72720772703679)) ('sigma_M_LRG', np.float64(0.1770702375388447))
[Interation 12] ('M_0_LRG', np.float64(12.476193260274147)) ('M_1_LRG', np.float64(13.830416747333647)) ('alpha_LRG', np.float64(1.106089101001251)) ('f_sigv_LRG', np.float64(0.9398035384109532)) ('log_Mcent_LRG', np.float64(12.71261998363494)) ('sigma_M_LRG', np.float64(0.1540731218315391))
[Interation 12] ('M_0_LRG', np.float64(12.471730641216359)) ('M_1_LRG', np.float64(13.830185666684692)) ('alpha_LRG', np.float64(1.1276996450241286)) ('f_sigv_LRG', np.float64(0.9396058356297401)) ('log_Mcent_LRG', np.float64(12.709604185866661)) ('sigma_M_LRG', np.float64(0.1350405131848521))
[Interation 12] ('M_0_LRG', np.float64(12.468863305745316)) ('M_1_LRG', np.float64(13.825720056700757)) ('alpha_LRG', np.float64(1.1334457850273132)) ('f_sigv_LRG', np.float64(0.9276590881999349)) ('log_Mcent_LRG', np.float64(12.709868796190827)) ('sigma_M_LRG', np.float64(0.14450361949750762))
[Interation 12] ('M_0_LRG', np.float64(12.47166291135106)) ('M_1_LRG', np.float64(13.840925116039639)) ('alpha_LRG', np.float64(1.1269277908147466)) ('f_sigv_LRG', np.float64(0.9324138977696187)) ('log_Mcent_LRG', np.float64(12.721652480097257)) ('sigma_M_LRG', np.float64(0.16713437411181392))
[Interation 12] chi2=567.441180859708
[Interation 12] chi2=514.9309275831085
[Interation 12] chi2=562.4088992783567
[Interation 12] chi2=514.8746666069069
[Interation 12] chi2=576.0296794008549
[Interation 12] chi2=471.9223201030707
[Interation 12] chi2=507.96058064012607
[Interation 12] chi2=515.3112086591561
[Interation 12] chi2=552.1178982947313
[Interation 12] chi2=516.0751542725346
[Interation 12] chi2=444.99652697317356
[Interation 12] chi2=474.8556588072336
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_05.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.464798258443835)) ('M_1_LRG', np.float64(13.846241474752004)) ('alpha_LRG', np.float64(1.129822364695902)) ('f_sigv_LRG', np.float64(0.9310955083539261)) ('log_Mcent_LRG', np.float64(12.729372022124501)) ('sigma_M_LRG', np.float64(0.182728165102169))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.31131768226623535
Start satellite assignement
Satellite assignement done 0.08319687843322754
LRG mock catalogue done 0.1595149040222168
608136 central galaxies, 92306 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6589229106903076
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_05.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.581881340990615)) ('M_1_LRG', np.float64(14.313000767195556)) ('alpha_LRG', np.float64(1.0365988382856028)) ('f_sigv_LRG', np.float64(0.9581658674579147)) ('log_Mcent_LRG', np.float64(12.88418815532202)) ('sigma_M_LRG', np.float64(0.06576951053221586))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.455009463265473)) ('M_1_LRG', np.float64(14.29430465642995)) ('alpha_LRG', np.float64(1.1062130628184565)) ('f_sigv_LRG', np.float64(0.9652578415120356)) ('log_Mcent_LRG', np.float64(12.861505900291263)) ('sigma_M_LRG', np.float64(0.31554335871505657))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.952400481184462)) ('M_1_LRG', np.float64(13.270536709363972)) ('alpha_LRG', np.float64(0.9039522413933092)) ('f_sigv_LRG', np.float64(1.0372087811979143)) ('log_Mcent_LRG', np.float64(12.564440349050688)) ('sigma_M_LRG', np.float64(0.4988006461212952))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.206266914911568)) ('M_1_LRG', np.float64(13.523435641382248)) ('alpha_LRG', np.float64(1.2170879204926537)) ('f_sigv_LRG', np.float64(0.5811657734510792)) ('log_Mcent_LRG', np.float64(12.624562911579996)) ('sigma_M_LRG', np.float64(0.4232668311193163))
[Interation 13] chi2=5461.961574232561
[Interation 13] chi2=5430.946035033127
[Interation 13] chi2=9904.6291283762
[Interation 13] chi2=4318.11964513536
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.59713552911873)) ('M_1_LRG', np.float64(13.888982610008798)) ('alpha_LRG', np.float64(1.0316835152594466)) ('f_sigv_LRG', np.float64(0.9046986059461495)) ('log_Mcent_LRG', np.float64(12.787662511130655)) ('sigma_M_LRG', np.float64(0.27162134258155257))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.589426397543468)) ('M_1_LRG', np.float64(13.78979010792967)) ('alpha_LRG', np.float64(1.078602568812564)) ('f_sigv_LRG', np.float64(0.9360657547821053)) ('log_Mcent_LRG', np.float64(12.654627404326657)) ('sigma_M_LRG', np.float64(0.05986657447121618))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.303373651384184)) ('M_1_LRG', np.float64(13.834721939009153)) ('alpha_LRG', np.float64(1.2035740297989481)) ('f_sigv_LRG', np.float64(0.978136834117194)) ('log_Mcent_LRG', np.float64(12.71895780140671)) ('sigma_M_LRG', np.float64(0.1389509423241242))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.43363432732204)) ('M_1_LRG', np.float64(13.797857780909398)) ('alpha_LRG', np.float64(1.140884224001991)) ('f_sigv_LRG', np.float64(0.9287090266905603)) ('log_Mcent_LRG', np.float64(12.679681394584636)) ('sigma_M_LRG', np.float64(0.11666086403087084))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.61108137922186)) ('M_1_LRG', np.float64(13.879287793281996)) ('alpha_LRG', np.float64(1.0167312434396227)) ('f_sigv_LRG', np.float64(0.9286578044762123)) ('log_Mcent_LRG', np.float64(12.79900387232534)) ('sigma_M_LRG', np.float64(0.33160015348922856))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.332821712918657)) ('M_1_LRG', np.float64(13.94342359046238)) ('alpha_LRG', np.float64(1.1343694698651785)) ('f_sigv_LRG', np.float64(0.972615230813513)) ('log_Mcent_LRG', np.float64(12.827080726577336)) ('sigma_M_LRG', np.float64(0.32678213564335223))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.435895726068313)) ('M_1_LRG', np.float64(13.841068836295715)) ('alpha_LRG', np.float64(1.134336367628348)) ('f_sigv_LRG', np.float64(0.9720577183146958)) ('log_Mcent_LRG', np.float64(12.759631837630334)) ('sigma_M_LRG', np.float64(0.2598435188099641))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.408460979327476)) ('M_1_LRG', np.float64(13.872362972769977)) ('alpha_LRG', np.float64(1.1255404289690205)) ('f_sigv_LRG', np.float64(0.9426006455238793)) ('log_Mcent_LRG', np.float64(12.782840390303532)) ('sigma_M_LRG', np.float64(0.2966204933918132))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.476221418506782)) ('M_1_LRG', np.float64(13.839030048599948)) ('alpha_LRG', np.float64(1.1019111386628282)) ('f_sigv_LRG', np.float64(0.9436429165472631)) ('log_Mcent_LRG', np.float64(12.707389501454706)) ('sigma_M_LRG', np.float64(0.1807464492746414))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.45263273113685)) ('M_1_LRG', np.float64(13.915045987220886)) ('alpha_LRG', np.float64(1.0234938022490625)) ('f_sigv_LRG', np.float64(1.0393870996913999)) ('log_Mcent_LRG', np.float64(12.7867921087296)) ('sigma_M_LRG', np.float64(0.25620583726924784))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.400572339310985)) ('M_1_LRG', np.float64(13.770258238972717)) ('alpha_LRG', np.float64(1.1789375999159906)) ('f_sigv_LRG', np.float64(0.8967378703569621)) ('log_Mcent_LRG', np.float64(12.666955512688299)) ('sigma_M_LRG', np.float64(0.12748043284766525))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.519883450359899)) ('M_1_LRG', np.float64(13.82747242580623)) ('alpha_LRG', np.float64(1.087192054896448)) ('f_sigv_LRG', np.float64(0.9202484088452012)) ('log_Mcent_LRG', np.float64(12.722191976587593)) ('sigma_M_LRG', np.float64(0.2240568278453539))
[Interation 13] chi2=693.085450357461
[Interation 13] chi2=599.032972215294
[Interation 13] chi2=536.8432138189609
[Interation 13] chi2=734.1271310094922
[Interation 13] chi2=646.1172146856468
[Interation 13] chi2=524.2341219525224
[Interation 13] chi2=595.538749060147
[Interation 13] chi2=665.9289971774043
[Interation 13] chi2=544.2209530065995
[Interation 13] chi2=598.3885556416682
[Interation 13] chi2=558.1284709282093
[Interation 13] chi2=479.6915256568667
[Interation 14] ('M_0_LRG', np.float64(12.645818317070457)) ('M_1_LRG', np.float64(13.804302971023944)) ('alpha_LRG', np.float64(1.071542951063419)) ('f_sigv_LRG', np.float64(0.9203312944095632)) ('log_Mcent_LRG', np.float64(12.714991392650882)) ('sigma_M_LRG', np.float64(0.17599192063306202))
[Interation 14] ('M_0_LRG', np.float64(12.50232314583575)) ('M_1_LRG', np.float64(13.840851878130854)) ('alpha_LRG', np.float64(1.0928874737911678)) ('f_sigv_LRG', np.float64(0.9417167226672649)) ('log_Mcent_LRG', np.float64(12.736787747014802)) ('sigma_M_LRG', np.float64(0.2211120595342536))
[Interation 14] ('M_0_LRG', np.float64(12.47874764757027)) ('M_1_LRG', np.float64(13.832119185439328)) ('alpha_LRG', np.float64(1.1042623771451414)) ('f_sigv_LRG', np.float64(0.9314886643354545)) ('log_Mcent_LRG', np.float64(12.727933776191833)) ('sigma_M_LRG', np.float64(0.19288467764984935))
[Interation 14] ('M_0_LRG', np.float64(12.48786553048419)) ('M_1_LRG', np.float64(13.827610822098702)) ('alpha_LRG', np.float64(1.1185675627206724)) ('f_sigv_LRG', np.float64(0.9219383663354831)) ('log_Mcent_LRG', np.float64(12.714617185248406)) ('sigma_M_LRG', np.float64(0.16647627765678752))
[Interation 14] chi2=525.3650851519701
[Interation 14] chi2=494.3355720545166
[Interation 14] chi2=520.204279924461
[Interation 14] chi2=515.3065274610676
[Interation 14] ('M_0_LRG', np.float64(12.583698908405328)) ('M_1_LRG', np.float64(13.820442110824276)) ('alpha_LRG', np.float64(1.0728690889514219)) ('f_sigv_LRG', np.float64(0.9269564580811219)) ('log_Mcent_LRG', np.float64(12.724011896086239)) ('sigma_M_LRG', np.float64(0.19747099296629472))
[Interation 14] ('M_0_LRG', np.float64(12.57072256763334)) ('M_1_LRG', np.float64(13.816454555289152)) ('alpha_LRG', np.float64(1.0898509314247655)) ('f_sigv_LRG', np.float64(0.9304226401473493)) ('log_Mcent_LRG', np.float64(12.714997703105542)) ('sigma_M_LRG', np.float64(0.1761948271297315))
[Interation 14] ('M_0_LRG', np.float64(12.490545196870597)) ('M_1_LRG', np.float64(13.837499088517697)) ('alpha_LRG', np.float64(1.1112108459203303)) ('f_sigv_LRG', np.float64(0.9366616183633601)) ('log_Mcent_LRG', np.float64(12.72297144880731)) ('sigma_M_LRG', np.float64(0.17822785493146387))
[Interation 14] ('M_0_LRG', np.float64(12.514078679288403)) ('M_1_LRG', np.float64(13.84203045729776)) ('alpha_LRG', np.float64(1.0849940954317363)) ('f_sigv_LRG', np.float64(0.9354128340024193)) ('log_Mcent_LRG', np.float64(12.723585468985274)) ('sigma_M_LRG', np.float64(0.18366772108257645))
[Interation 14] ('M_0_LRG', np.float64(12.524201787344278)) ('M_1_LRG', np.float64(13.839687420736913)) ('alpha_LRG', np.float64(1.0947457473576816)) ('f_sigv_LRG', np.float64(0.923002990100326)) ('log_Mcent_LRG', np.float64(12.728400615911779)) ('sigma_M_LRG', np.float64(0.19319423063557756))
[Interation 14] ('M_0_LRG', np.float64(12.634800312655944)) ('M_1_LRG', np.float64(13.826646843973066)) ('alpha_LRG', np.float64(1.0586909996312046)) ('f_sigv_LRG', np.float64(0.919971166091236)) ('log_Mcent_LRG', np.float64(12.72949681685594)) ('sigma_M_LRG', np.float64(0.2092682112536236))
[Interation 14] ('M_0_LRG', np.float64(12.548806282926636)) ('M_1_LRG', np.float64(13.816926952724968)) ('alpha_LRG', np.float64(1.0917308088084503)) ('f_sigv_LRG', np.float64(0.9350963513706957)) ('log_Mcent_LRG', np.float64(12.704515918670506)) ('sigma_M_LRG', np.float64(0.14023206944145672))
[Interation 14] ('M_0_LRG', np.float64(12.572872351502808)) ('M_1_LRG', np.float64(13.812197836212972)) ('alpha_LRG', np.float64(1.0913749579570016)) ('f_sigv_LRG', np.float64(0.9285644775972162)) ('log_Mcent_LRG', np.float64(12.712447403130238)) ('sigma_M_LRG', np.float64(0.16879837838150535))
[Interation 14] ('M_0_LRG', np.float64(12.527473231357664)) ('M_1_LRG', np.float64(13.81888129667069)) ('alpha_LRG', np.float64(1.101827613575426)) ('f_sigv_LRG', np.float64(0.9205831109784872)) ('log_Mcent_LRG', np.float64(12.715834599598345)) ('sigma_M_LRG', np.float64(0.1799378320468018))
[Interation 14] ('M_0_LRG', np.float64(12.4273276878199)) ('M_1_LRG', np.float64(13.877109137810251)) ('alpha_LRG', np.float64(1.1056289966294552)) ('f_sigv_LRG', np.float64(0.94611337744264)) ('log_Mcent_LRG', np.float64(12.75284712342197)) ('sigma_M_LRG', np.float64(0.22891768520224282))
[Interation 14] ('M_0_LRG', np.float64(12.602456933558353)) ('M_1_LRG', np.float64(13.817409350200187)) ('alpha_LRG', np.float64(1.060828649447471)) ('f_sigv_LRG', np.float64(0.930273146168505)) ('log_Mcent_LRG', np.float64(12.713074751921477)) ('sigma_M_LRG', np.float64(0.17136797866118708))
[Interation 14] ('M_0_LRG', np.float64(12.462953036466946)) ('M_1_LRG', np.float64(13.82822045342303)) ('alpha_LRG', np.float64(1.1164218498887)) ('f_sigv_LRG', np.float64(0.9354249862033658)) ('log_Mcent_LRG', np.float64(12.711048927209085)) ('sigma_M_LRG', np.float64(0.15631610623940922))
[Interation 14] chi2=472.6841033317371
[Interation 14] chi2=482.0564169856761
[Interation 14] chi2=467.04839948066575
[Interation 14] chi2=520.0797199201065
[Interation 14] chi2=460.37117988132275
[Interation 14] chi2=509.39480485970057
[Interation 14] chi2=475.1373315095166
[Interation 14] chi2=509.8017089860962
[Interation 14] chi2=488.5857679844693
[Interation 14] chi2=450.20610400531854
[Interation 14] chi2=544.7285697141366
[Interation 14] chi2=502.09572028593726
[Interation 15] ('M_0_LRG', np.float64(12.437683219019725)) ('M_1_LRG', np.float64(13.847293009050992)) ('alpha_LRG', np.float64(1.1310047902931137)) ('f_sigv_LRG', np.float64(0.9392260314933601)) ('log_Mcent_LRG', np.float64(12.727725043420545)) ('sigma_M_LRG', np.float64(0.18638768656256471))
[Interation 15] ('M_0_LRG', np.float64(12.573794373709761)) ('M_1_LRG', np.float64(13.817790281934215)) ('alpha_LRG', np.float64(1.068817054302943)) ('f_sigv_LRG', np.float64(0.9228037300367046)) ('log_Mcent_LRG', np.float64(12.708642006892141)) ('sigma_M_LRG', np.float64(0.15974769464792904))
[Interation 15] ('M_0_LRG', np.float64(12.441797656576545)) ('M_1_LRG', np.float64(13.839175392862973)) ('alpha_LRG', np.float64(1.1349205495828691)) ('f_sigv_LRG', np.float64(0.9361410485989528)) ('log_Mcent_LRG', np.float64(12.726356148365614)) ('sigma_M_LRG', np.float64(0.1937091148412559))
[Interation 15] ('M_0_LRG', np.float64(12.534953515089228)) ('M_1_LRG', np.float64(13.823317084619084)) ('alpha_LRG', np.float64(1.089647658926183)) ('f_sigv_LRG', np.float64(0.9298776141191049)) ('log_Mcent_LRG', np.float64(12.716067870309608)) ('sigma_M_LRG', np.float64(0.17566548976318636))
[Interation 15] chi2=558.4883149355381
[Interation 15] chi2=526.1897839024867
[Interation 15] chi2=492.0898913377616
[Interation 15] chi2=533.8622847483228
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_06.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.591988493785808)) ('M_1_LRG', np.float64(13.830679787375464)) ('alpha_LRG', np.float64(1.0587513282768115)) ('f_sigv_LRG', np.float64(0.9339907071924254)) ('log_Mcent_LRG', np.float64(12.724477086803661)) ('sigma_M_LRG', np.float64(0.18644683291534725))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3115558624267578
Start satellite assignement
Satellite assignement done 0.07662630081176758
LRG mock catalogue done 0.15230083465576172
609310 central galaxies, 90715 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6525838375091553
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_06.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:17
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:18
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:19
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:20
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:20
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:21
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:22
Load smu measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:23
Load correlation matrix for LRG at z0.725 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Load smu measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:19
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.49353959674652)) ('M_1_LRG', np.float64(13.515745899392273)) ('alpha_LRG', np.float64(0.9347444030203675)) ('f_sigv_LRG', np.float64(0.9329242527041586)) ('log_Mcent_LRG', np.float64(12.797200814966654)) ('sigma_M_LRG', np.float64(0.4443661269120969))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.356753959900377)) ('M_1_LRG', np.float64(13.529741641050837)) ('alpha_LRG', np.float64(0.9620492403003655)) ('f_sigv_LRG', np.float64(1.116676149109915)) ('log_Mcent_LRG', np.float64(12.776823651874937)) ('sigma_M_LRG', np.float64(0.41374159656587906))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.523520685357798)) ('M_1_LRG', np.float64(13.611492896214745)) ('alpha_LRG', np.float64(1.0783931288923978)) ('f_sigv_LRG', np.float64(1.0875500251184782)) ('log_Mcent_LRG', np.float64(12.815439965595587)) ('sigma_M_LRG', np.float64(0.5957679658460803))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.402906532951341)) ('M_1_LRG', np.float64(13.474618272672355)) ('alpha_LRG', np.float64(1.051410302762227)) ('f_sigv_LRG', np.float64(0.9378408870420769)) ('log_Mcent_LRG', np.float64(12.612161962081029)) ('sigma_M_LRG', np.float64(0.35720173021567936))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.51626633141907)) ('M_1_LRG', np.float64(13.510597201051409)) ('alpha_LRG', np.float64(0.961542357094088)) ('f_sigv_LRG', np.float64(1.0074186167899861)) ('log_Mcent_LRG', np.float64(12.83961922021304)) ('sigma_M_LRG', np.float64(0.5452173326350279))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.533516319797855)) ('M_1_LRG', np.float64(13.576097856414496)) ('alpha_LRG', np.float64(0.9560820053056405)) ('f_sigv_LRG', np.float64(1.0429838992074771)) ('log_Mcent_LRG', np.float64(12.80765843477403)) ('sigma_M_LRG', np.float64(0.49310252962557405))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.588094339372535)) ('M_1_LRG', np.float64(13.759919564317816)) ('alpha_LRG', np.float64(0.9670629275604877)) ('f_sigv_LRG', np.float64(1.0381910530819334)) ('log_Mcent_LRG', np.float64(12.681365707322225)) ('sigma_M_LRG', np.float64(0.3979291680446554))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.468116842791833)) ('M_1_LRG', np.float64(13.589481586708166)) ('alpha_LRG', np.float64(1.1061525323370571)) ('f_sigv_LRG', np.float64(0.9083097061561283)) ('log_Mcent_LRG', np.float64(12.814885792760332)) ('sigma_M_LRG', np.float64(0.4443901982486418))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.603999666235257)) ('M_1_LRG', np.float64(13.428372610038771)) ('alpha_LRG', np.float64(0.9637016999707045)) ('f_sigv_LRG', np.float64(1.0661921088696136)) ('log_Mcent_LRG', np.float64(12.724158938243631)) ('sigma_M_LRG', np.float64(0.4041205705586528))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.45795950568459)) ('M_1_LRG', np.float64(13.624601311578616)) ('alpha_LRG', np.float64(0.9326089591297813)) ('f_sigv_LRG', np.float64(1.0133910845572278)) ('log_Mcent_LRG', np.float64(12.759787981332092)) ('sigma_M_LRG', np.float64(0.4196246890565734))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.405796130156997)) ('M_1_LRG', np.float64(13.57593762036698)) ('alpha_LRG', np.float64(0.9443428340333468)) ('f_sigv_LRG', np.float64(0.9775769425653507)) ('log_Mcent_LRG', np.float64(12.718270219081514)) ('sigma_M_LRG', np.float64(0.45528369268313484))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.43355412339238)) ('M_1_LRG', np.float64(13.535340316664202)) ('alpha_LRG', np.float64(0.999676126844743)) ('f_sigv_LRG', np.float64(0.8904432704793855)) ('log_Mcent_LRG', np.float64(12.657085085809776)) ('sigma_M_LRG', np.float64(0.36692151600474043))
[Interation 15] chi2=8865.31015775415
[Interation 15] chi2=8062.419358678502
[Interation 15] chi2=5590.906019897786
[Interation 15] chi2=3532.5450107377587
[Interation 15] chi2=4562.031688393213
[Interation 15] chi2=6821.409151343203
[Interation 15] chi2=3939.1218671867355
[Interation 15] chi2=6771.012592210358
[Interation 15] chi2=7960.360477983881
[Interation 15] chi2=3406.0340146438393
[Interation 15] chi2=3409.0952967953704
[Interation 15] chi2=2724.6097012871614
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 16] ('M_0_LRG', np.float64(12.552346054579907)) ('M_1_LRG', np.float64(13.845351213472401)) ('alpha_LRG', np.float64(1.0372578904403513)) ('f_sigv_LRG', np.float64(0.9434410556519939)) ('log_Mcent_LRG', np.float64(12.725325978555773)) ('sigma_M_LRG', np.float64(0.16516346826108186))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 16] ('M_0_LRG', np.float64(12.521343836120016)) ('M_1_LRG', np.float64(13.837418596657919)) ('alpha_LRG', np.float64(1.0891776537533364)) ('f_sigv_LRG', np.float64(0.9004007694956808)) ('log_Mcent_LRG', np.float64(12.703874647667993)) ('sigma_M_LRG', np.float64(0.15163199236083968))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 16] ('M_0_LRG', np.float64(12.457795655893305)) ('M_1_LRG', np.float64(13.930917175169197)) ('alpha_LRG', np.float64(1.0910202516445027)) ('f_sigv_LRG', np.float64(0.9253635804410572)) ('log_Mcent_LRG', np.float64(12.795239769378691)) ('sigma_M_LRG', np.float64(0.29595751024400097))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 16] ('M_0_LRG', np.float64(12.640810261927452)) ('M_1_LRG', np.float64(13.835985694713093)) ('alpha_LRG', np.float64(1.0368578919749745)) ('f_sigv_LRG', np.float64(0.9426438547145884)) ('log_Mcent_LRG', np.float64(12.693804991826413)) ('sigma_M_LRG', np.float64(0.0912592032035317))
[Interation 16] chi2=489.5209315336554
[Interation 16] chi2=527.0065748800163
[Interation 16] chi2=595.718317564824
[Interation 16] chi2=570.3388087299076
[Interation 16] ('M_0_LRG', np.float64(12.481695235531237)) ('M_1_LRG', np.float64(13.823501847561198)) ('alpha_LRG', np.float64(1.1109478342491124)) ('f_sigv_LRG', np.float64(0.9467627492297028)) ('log_Mcent_LRG', np.float64(12.702656566274761)) ('sigma_M_LRG', np.float64(0.14140709256237616))
[Interation 16] ('M_0_LRG', np.float64(12.58772684782945)) ('M_1_LRG', np.float64(13.831721003602144)) ('alpha_LRG', np.float64(1.067560618168405)) ('f_sigv_LRG', np.float64(0.9234776594340564)) ('log_Mcent_LRG', np.float64(12.728667913592304)) ('sigma_M_LRG', np.float64(0.19653513403163686))
[Interation 16] ('M_0_LRG', np.float64(12.508703772002733)) ('M_1_LRG', np.float64(13.841914840393025)) ('alpha_LRG', np.float64(1.1065759238550332)) ('f_sigv_LRG', np.float64(0.9392396112179683)) ('log_Mcent_LRG', np.float64(12.727218786469136)) ('sigma_M_LRG', np.float64(0.17885419235265598))
[Interation 16] ('M_0_LRG', np.float64(12.462413395405353)) ('M_1_LRG', np.float64(13.813052937464631)) ('alpha_LRG', np.float64(1.1241282215724104)) ('f_sigv_LRG', np.float64(0.9355324011000267)) ('log_Mcent_LRG', np.float64(12.698222549598864)) ('sigma_M_LRG', np.float64(0.13267476642749537))
[Interation 16] ('M_0_LRG', np.float64(12.497188902840316)) ('M_1_LRG', np.float64(13.841978940686205)) ('alpha_LRG', np.float64(1.1106651194232426)) ('f_sigv_LRG', np.float64(0.9403246260943046)) ('log_Mcent_LRG', np.float64(12.724586061289157)) ('sigma_M_LRG', np.float64(0.16503556700181854))
[Interation 16] ('M_0_LRG', np.float64(12.547353301511)) ('M_1_LRG', np.float64(13.833038894705792)) ('alpha_LRG', np.float64(1.0798953048532023)) ('f_sigv_LRG', np.float64(0.9354127059848698)) ('log_Mcent_LRG', np.float64(12.728052594944328)) ('sigma_M_LRG', np.float64(0.19777846413816724))
[Interation 16] ('M_0_LRG', np.float64(12.55439827851336)) ('M_1_LRG', np.float64(13.821891723269749)) ('alpha_LRG', np.float64(1.0851214186951073)) ('f_sigv_LRG', np.float64(0.9383492062182561)) ('log_Mcent_LRG', np.float64(12.709892428978206)) ('sigma_M_LRG', np.float64(0.14863796341790275))
[Interation 16] ('M_0_LRG', np.float64(12.376050371115157)) ('M_1_LRG', np.float64(13.850075468496089)) ('alpha_LRG', np.float64(1.1619209902508778)) ('f_sigv_LRG', np.float64(0.9395106845854277)) ('log_Mcent_LRG', np.float64(12.72462329475283)) ('sigma_M_LRG', np.float64(0.16419958494260395))
[Interation 16] ('M_0_LRG', np.float64(12.581441568878265)) ('M_1_LRG', np.float64(13.813920079700999)) ('alpha_LRG', np.float64(1.0561084118496262)) ('f_sigv_LRG', np.float64(0.9304870584141006)) ('log_Mcent_LRG', np.float64(12.705091594628643)) ('sigma_M_LRG', np.float64(0.15554971191614192))
[Interation 16] ('M_0_LRG', np.float64(12.461427789635747)) ('M_1_LRG', np.float64(13.815776408719394)) ('alpha_LRG', np.float64(1.1391297941026763)) ('f_sigv_LRG', np.float64(0.9157421206070405)) ('log_Mcent_LRG', np.float64(12.715745999033231)) ('sigma_M_LRG', np.float64(0.18695973275711397))
[Interation 16] ('M_0_LRG', np.float64(12.505919350498472)) ('M_1_LRG', np.float64(13.828205742886045)) ('alpha_LRG', np.float64(1.0880079714216926)) ('f_sigv_LRG', np.float64(0.9348762515151816)) ('log_Mcent_LRG', np.float64(12.707981206972182)) ('sigma_M_LRG', np.float64(0.13913219037787178))
[Interation 16] ('M_0_LRG', np.float64(12.442024550536448)) ('M_1_LRG', np.float64(13.866499452628156)) ('alpha_LRG', np.float64(1.10158414704845)) ('f_sigv_LRG', np.float64(0.9488358137391345)) ('log_Mcent_LRG', np.float64(12.73204632861488)) ('sigma_M_LRG', np.float64(0.1873673005060712))
[Interation 16] chi2=481.06628930877696
[Interation 16] chi2=542.8938105310323
[Interation 16] chi2=465.67613805609864
[Interation 16] chi2=505.03761598502444
[Interation 16] chi2=515.834626036192
[Interation 16] chi2=495.451340174707
[Interation 16] chi2=508.79760255574513
[Interation 16] chi2=516.7179758345341
[Interation 16] chi2=467.5487852972345
[Interation 16] chi2=445.46314447386766
[Interation 16] chi2=525.807274270876
[Interation 16] chi2=503.94660303195207
[Interation 17] ('M_0_LRG', np.float64(12.481616691934228)) ('M_1_LRG', np.float64(13.833264712179867)) ('alpha_LRG', np.float64(1.1142946851553877)) ('f_sigv_LRG', np.float64(0.9358378042096467)) ('log_Mcent_LRG', np.float64(12.713903388689593)) ('sigma_M_LRG', np.float64(0.1530591768909766))
[Interation 17] ('M_0_LRG', np.float64(12.499416842793343)) ('M_1_LRG', np.float64(13.82981640583772)) ('alpha_LRG', np.float64(1.097167261950281)) ('f_sigv_LRG', np.float64(0.9513308545986554)) ('log_Mcent_LRG', np.float64(12.70888262991308)) ('sigma_M_LRG', np.float64(0.14295191950354097))
[Interation 17] ('M_0_LRG', np.float64(12.502187273454695)) ('M_1_LRG', np.float64(13.852590210648215)) ('alpha_LRG', np.float64(1.0963862122023778)) ('f_sigv_LRG', np.float64(0.9581754695881937)) ('log_Mcent_LRG', np.float64(12.734055503335835)) ('sigma_M_LRG', np.float64(0.1857767413303743))
[Interation 17] ('M_0_LRG', np.float64(12.570883530481312)) ('M_1_LRG', np.float64(13.820657766829857)) ('alpha_LRG', np.float64(1.0712275825351973)) ('f_sigv_LRG', np.float64(0.9324492560087605)) ('log_Mcent_LRG', np.float64(12.710805083620736)) ('sigma_M_LRG', np.float64(0.1544113901793176))
[Interation 17] chi2=489.51764416114327
[Interation 17] chi2=503.3475687810775
[Interation 17] chi2=489.29451498786904
[Interation 17] chi2=537.4003225820628
[Interation 17] ('M_0_LRG', np.float64(12.522528677177661)) ('M_1_LRG', np.float64(13.831500819593604)) ('alpha_LRG', np.float64(1.0860488600080507)) ('f_sigv_LRG', np.float64(0.9344945216642858)) ('log_Mcent_LRG', np.float64(12.710979933147662)) ('sigma_M_LRG', np.float64(0.1487106704419659))
[Interation 17] ('M_0_LRG', np.float64(12.503194613429795)) ('M_1_LRG', np.float64(13.832988226421392)) ('alpha_LRG', np.float64(1.0977780500795156)) ('f_sigv_LRG', np.float64(0.9345068302960639)) ('log_Mcent_LRG', np.float64(12.71899826175054)) ('sigma_M_LRG', np.float64(0.17109482604801035))
[Interation 17] ('M_0_LRG', np.float64(12.45210255787391)) ('M_1_LRG', np.float64(13.833970838683559)) ('alpha_LRG', np.float64(1.1281638328704928)) ('f_sigv_LRG', np.float64(0.9291907006334093)) ('log_Mcent_LRG', np.float64(12.709646768405864)) ('sigma_M_LRG', np.float64(0.1437037701997383))
[Interation 17] ('M_0_LRG', np.float64(12.563433802761748)) ('M_1_LRG', np.float64(13.833415162697053)) ('alpha_LRG', np.float64(1.0612584247129133)) ('f_sigv_LRG', np.float64(0.9438002172710798)) ('log_Mcent_LRG', np.float64(12.712538029975335)) ('sigma_M_LRG', np.float64(0.14781215826698513))
[Interation 17] ('M_0_LRG', np.float64(12.469296718144747)) ('M_1_LRG', np.float64(13.845693120321375)) ('alpha_LRG', np.float64(1.1089163623397658)) ('f_sigv_LRG', np.float64(0.938567973558388)) ('log_Mcent_LRG', np.float64(12.722579669887244)) ('sigma_M_LRG', np.float64(0.16741998355777843))
[Interation 17] ('M_0_LRG', np.float64(12.482837708537378)) ('M_1_LRG', np.float64(13.840765911565706)) ('alpha_LRG', np.float64(1.1082035565846429)) ('f_sigv_LRG', np.float64(0.9374014857167785)) ('log_Mcent_LRG', np.float64(12.720813218068436)) ('sigma_M_LRG', np.float64(0.1683637675047831))
[Interation 17] ('M_0_LRG', np.float64(12.485576886094925)) ('M_1_LRG', np.float64(13.834260409874835)) ('alpha_LRG', np.float64(1.1036831723760625)) ('f_sigv_LRG', np.float64(0.9417360391548003)) ('log_Mcent_LRG', np.float64(12.713172863345406)) ('sigma_M_LRG', np.float64(0.1544110351316208))
[Interation 17] ('M_0_LRG', np.float64(12.49790132987504)) ('M_1_LRG', np.float64(13.831706295995009)) ('alpha_LRG', np.float64(1.1037360753079406)) ('f_sigv_LRG', np.float64(0.9358658721762977)) ('log_Mcent_LRG', np.float64(12.71939740381705)) ('sigma_M_LRG', np.float64(0.1707583900288917))
[Interation 17] ('M_0_LRG', np.float64(12.499727670902015)) ('M_1_LRG', np.float64(13.82662730910653)) ('alpha_LRG', np.float64(1.0956748137810466)) ('f_sigv_LRG', np.float64(0.9408751692923913)) ('log_Mcent_LRG', np.float64(12.705396630798756)) ('sigma_M_LRG', np.float64(0.14453096696319523))
[Interation 17] ('M_0_LRG', np.float64(12.586090768008127)) ('M_1_LRG', np.float64(13.831991693197832)) ('alpha_LRG', np.float64(1.055270106014835)) ('f_sigv_LRG', np.float64(0.9550214681737715)) ('log_Mcent_LRG', np.float64(12.716477430263652)) ('sigma_M_LRG', np.float64(0.1548094261273335))
[Interation 17] ('M_0_LRG', np.float64(12.482277937038889)) ('M_1_LRG', np.float64(13.84451151995566)) ('alpha_LRG', np.float64(1.112811894160857)) ('f_sigv_LRG', np.float64(0.9308769320747972)) ('log_Mcent_LRG', np.float64(12.726199987085733)) ('sigma_M_LRG', np.float64(0.17581389824241128))
[Interation 17] ('M_0_LRG', np.float64(12.523882744646947)) ('M_1_LRG', np.float64(13.830424524256415)) ('alpha_LRG', np.float64(1.0879283460242448)) ('f_sigv_LRG', np.float64(0.9340214736959334)) ('log_Mcent_LRG', np.float64(12.715495872191646)) ('sigma_M_LRG', np.float64(0.164103809410315))
[Interation 17] chi2=476.3485370972131
[Interation 17] chi2=562.2860873178504
[Interation 17] chi2=568.2382505401296
[Interation 17] chi2=472.52844683669673
[Interation 17] chi2=494.18709128549847
[Interation 17] chi2=480.8439272028155
[Interation 17] chi2=512.9212421602325
[Interation 17] chi2=476.8285415913501
[Interation 17] chi2=484.891337986794
[Interation 17] chi2=493.7751291003355
[Interation 17] chi2=482.02046759722464
[Interation 17] chi2=480.76921147977816
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_07.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.483726824380456)) ('M_1_LRG', np.float64(13.840639657169055)) ('alpha_LRG', np.float64(1.1070816982322436)) ('f_sigv_LRG', np.float64(0.9469463602771082)) ('log_Mcent_LRG', np.float64(12.717048117805179)) ('sigma_M_LRG', np.float64(0.14981151850162389))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3109142780303955
Start satellite assignement
Satellite assignement done 0.077728271484375
LRG mock catalogue done 0.15400171279907227
606845 central galaxies, 92712 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6579225063323975
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_07.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:18
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:18
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:19
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:19
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:19
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:21
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:21
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:22
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Load smu measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:19
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.593787058469339)) ('M_1_LRG', np.float64(13.506367967911972)) ('alpha_LRG', np.float64(0.9850982204820131)) ('f_sigv_LRG', np.float64(0.8856388913510941)) ('log_Mcent_LRG', np.float64(12.779775158009015)) ('sigma_M_LRG', np.float64(0.45462533307109726))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.498478403642478)) ('M_1_LRG', np.float64(13.49438600519466)) ('alpha_LRG', np.float64(0.9576976144252408)) ('f_sigv_LRG', np.float64(1.0223451469022766)) ('log_Mcent_LRG', np.float64(12.808577672499752)) ('sigma_M_LRG', np.float64(0.5847736359875156))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.515642375196839)) ('M_1_LRG', np.float64(13.467432295188267)) ('alpha_LRG', np.float64(1.158554459942899)) ('f_sigv_LRG', np.float64(1.0385486404035786)) ('log_Mcent_LRG', np.float64(12.699414523523878)) ('sigma_M_LRG', np.float64(0.5184948202544053))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.410273330847136)) ('M_1_LRG', np.float64(13.609258607829794)) ('alpha_LRG', np.float64(1.0762770704764868)) ('f_sigv_LRG', np.float64(0.9802298670244751)) ('log_Mcent_LRG', np.float64(12.722466001131636)) ('sigma_M_LRG', np.float64(0.4465695952739661))
[Interation 18] chi2=5987.581344154445
[Interation 18] chi2=5619.428088959704
[Interation 18] chi2=6685.135328143881
[Interation 18] chi2=3071.6314364407917
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.348492379551592)) ('M_1_LRG', np.float64(13.880044613027856)) ('alpha_LRG', np.float64(1.148094183633967)) ('f_sigv_LRG', np.float64(0.9125083173962151)) ('log_Mcent_LRG', np.float64(12.746473606567553)) ('sigma_M_LRG', np.float64(0.2109629606002577))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.67148661269566)) ('M_1_LRG', np.float64(13.861570452113607)) ('alpha_LRG', np.float64(1.0229024087648757)) ('f_sigv_LRG', np.float64(0.9567726857797282)) ('log_Mcent_LRG', np.float64(12.770861115969632)) ('sigma_M_LRG', np.float64(0.24985057785159048))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.422084426011708)) ('M_1_LRG', np.float64(13.763366572236047)) ('alpha_LRG', np.float64(1.2022260998569596)) ('f_sigv_LRG', np.float64(0.8630077782175927)) ('log_Mcent_LRG', np.float64(12.666576383685975)) ('sigma_M_LRG', np.float64(0.11570195621422252))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.605245286872808)) ('M_1_LRG', np.float64(13.849085566771928)) ('alpha_LRG', np.float64(0.9970267674769628)) ('f_sigv_LRG', np.float64(0.9853356789254104)) ('log_Mcent_LRG', np.float64(12.728823768677213)) ('sigma_M_LRG', np.float64(0.17514632346141096))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.474054440913974)) ('M_1_LRG', np.float64(13.88743798940197)) ('alpha_LRG', np.float64(1.120683516654989)) ('f_sigv_LRG', np.float64(0.9278927505391878)) ('log_Mcent_LRG', np.float64(12.764210929483003)) ('sigma_M_LRG', np.float64(0.22250092735326188))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.457022842521388)) ('M_1_LRG', np.float64(13.889642011510952)) ('alpha_LRG', np.float64(1.1199068354588502)) ('f_sigv_LRG', np.float64(0.9046381820670055)) ('log_Mcent_LRG', np.float64(12.79986653497975)) ('sigma_M_LRG', np.float64(0.3080685101223527))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.47377091082654)) ('M_1_LRG', np.float64(13.82084005479059)) ('alpha_LRG', np.float64(1.1853958804600735)) ('f_sigv_LRG', np.float64(0.9372975658373409)) ('log_Mcent_LRG', np.float64(12.71182173156777)) ('sigma_M_LRG', np.float64(0.14342028585770866))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.446307650858714)) ('M_1_LRG', np.float64(13.770657724257257)) ('alpha_LRG', np.float64(1.2143497603991371)) ('f_sigv_LRG', np.float64(0.8627104020964624)) ('log_Mcent_LRG', np.float64(12.662958345193681)) ('sigma_M_LRG', np.float64(0.08770485928602145))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.66305103915812)) ('M_1_LRG', np.float64(13.848438072853538)) ('alpha_LRG', np.float64(1.0024636558805184)) ('f_sigv_LRG', np.float64(0.9483093180951151)) ('log_Mcent_LRG', np.float64(12.7732941137004)) ('sigma_M_LRG', np.float64(0.30199251260881893))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.642237770090418)) ('M_1_LRG', np.float64(13.861002470902886)) ('alpha_LRG', np.float64(1.0389242989321708)) ('f_sigv_LRG', np.float64(0.9574732272390111)) ('log_Mcent_LRG', np.float64(12.762823115195507)) ('sigma_M_LRG', np.float64(0.22636530866489257))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.460081781749976)) ('M_1_LRG', np.float64(13.802668995215468)) ('alpha_LRG', np.float64(1.2070504862667706)) ('f_sigv_LRG', np.float64(0.8716040892185476)) ('log_Mcent_LRG', np.float64(12.688952932227819)) ('sigma_M_LRG', np.float64(0.09759658033718943))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.51817468424414)) ('M_1_LRG', np.float64(13.870451369352818)) ('alpha_LRG', np.float64(1.0458086036663972)) ('f_sigv_LRG', np.float64(0.93665280535309)) ('log_Mcent_LRG', np.float64(12.768550491011199)) ('sigma_M_LRG', np.float64(0.2644560761432175))
[Interation 18] chi2=573.8595683185006
[Interation 18] chi2=542.6203887251995
[Interation 18] chi2=570.7717469887332
[Interation 18] chi2=512.6255051902072
[Interation 18] chi2=590.736308284187
[Interation 18] chi2=560.9959554154448
[Interation 18] chi2=651.4628854556723
[Interation 18] chi2=557.2672403729663
[Interation 18] chi2=608.2671185639067
[Interation 18] chi2=585.6145994258262
[Interation 18] chi2=554.2538208884829
[Interation 18] chi2=611.2389859878022
[Interation 19] ('M_0_LRG', np.float64(12.502698977804599)) ('M_1_LRG', np.float64(13.838845515420244)) ('alpha_LRG', np.float64(1.1118043728482327)) ('f_sigv_LRG', np.float64(0.9244566647752486)) ('log_Mcent_LRG', np.float64(12.725013833667056)) ('sigma_M_LRG', np.float64(0.17878869487181948))
[Interation 19] ('M_0_LRG', np.float64(12.597572984789096)) ('M_1_LRG', np.float64(13.823741013368215)) ('alpha_LRG', np.float64(1.0594296990602503)) ('f_sigv_LRG', np.float64(0.9333601231693527)) ('log_Mcent_LRG', np.float64(12.732028646609164)) ('sigma_M_LRG', np.float64(0.2089209312375082))
[Interation 19] ('M_0_LRG', np.float64(12.591200820247863)) ('M_1_LRG', np.float64(13.822176285191329)) ('alpha_LRG', np.float64(1.0794785417382575)) ('f_sigv_LRG', np.float64(0.9216356886600237)) ('log_Mcent_LRG', np.float64(12.704179367803532)) ('sigma_M_LRG', np.float64(0.14369912151599268))
[Interation 19] ('M_0_LRG', np.float64(12.50000579843755)) ('M_1_LRG', np.float64(13.829553155050219)) ('alpha_LRG', np.float64(1.104115837456555)) ('f_sigv_LRG', np.float64(0.9204863258020868)) ('log_Mcent_LRG', np.float64(12.7289184383468)) ('sigma_M_LRG', np.float64(0.20519369872868293))
[Interation 19] chi2=539.2680045692535
[Interation 19] chi2=560.7823827867167
[Interation 19] chi2=470.7455262412567
[Interation 19] chi2=524.1247712705069
[Interation 19] ('M_0_LRG', np.float64(12.569983772228854)) ('M_1_LRG', np.float64(13.81562897745196)) ('alpha_LRG', np.float64(1.078695915023099)) ('f_sigv_LRG', np.float64(0.9307200728012051)) ('log_Mcent_LRG', np.float64(12.705688213083636)) ('sigma_M_LRG', np.float64(0.143784563394382))
[Interation 19] ('M_0_LRG', np.float64(12.564161594219335)) ('M_1_LRG', np.float64(13.828645877963087)) ('alpha_LRG', np.float64(1.0767058499896813)) ('f_sigv_LRG', np.float64(0.9280553207863969)) ('log_Mcent_LRG', np.float64(12.714750792513136)) ('sigma_M_LRG', np.float64(0.16135965828878013))
[Interation 19] ('M_0_LRG', np.float64(12.576339699579508)) ('M_1_LRG', np.float64(13.83285884020994)) ('alpha_LRG', np.float64(1.0657868569304099)) ('f_sigv_LRG', np.float64(0.9414734159842402)) ('log_Mcent_LRG', np.float64(12.720944180220723)) ('sigma_M_LRG', np.float64(0.16494599535369103))
[Interation 19] ('M_0_LRG', np.float64(12.529726664268463)) ('M_1_LRG', np.float64(13.81665376149554)) ('alpha_LRG', np.float64(1.0881420411785743)) ('f_sigv_LRG', np.float64(0.9274967146525929)) ('log_Mcent_LRG', np.float64(12.701213307566942)) ('sigma_M_LRG', np.float64(0.13811792158118197))
[Interation 19] ('M_0_LRG', np.float64(12.556888428237539)) ('M_1_LRG', np.float64(13.823695856902436)) ('alpha_LRG', np.float64(1.0873712111080698)) ('f_sigv_LRG', np.float64(0.9276655919358228)) ('log_Mcent_LRG', np.float64(12.717383924353298)) ('sigma_M_LRG', np.float64(0.16458939720456417))
[Interation 19] ('M_0_LRG', np.float64(12.551161880224798)) ('M_1_LRG', np.float64(13.816649883378371)) ('alpha_LRG', np.float64(1.090215821483951)) ('f_sigv_LRG', np.float64(0.9313294686281817)) ('log_Mcent_LRG', np.float64(12.705677870299152)) ('sigma_M_LRG', np.float64(0.15408219052500027))
[Interation 19] ('M_0_LRG', np.float64(12.561403400286961)) ('M_1_LRG', np.float64(13.82310891614774)) ('alpha_LRG', np.float64(1.0956921112434295)) ('f_sigv_LRG', np.float64(0.9225861617550382)) ('log_Mcent_LRG', np.float64(12.711885480360417)) ('sigma_M_LRG', np.float64(0.1489850361566568))
[Interation 19] ('M_0_LRG', np.float64(12.536065458166707)) ('M_1_LRG', np.float64(13.815954584592717)) ('alpha_LRG', np.float64(1.095472839308275)) ('f_sigv_LRG', np.float64(0.9297812955725009)) ('log_Mcent_LRG', np.float64(12.701264830160795)) ('sigma_M_LRG', np.float64(0.14726659243214446))
[Interation 19] ('M_0_LRG', np.float64(12.46770787782701)) ('M_1_LRG', np.float64(13.8432762692925)) ('alpha_LRG', np.float64(1.1119211811209058)) ('f_sigv_LRG', np.float64(0.93624050026093)) ('log_Mcent_LRG', np.float64(12.714779477257592)) ('sigma_M_LRG', np.float64(0.16749461231677198))
[Interation 19] ('M_0_LRG', np.float64(12.545381008078808)) ('M_1_LRG', np.float64(13.798132047159179)) ('alpha_LRG', np.float64(1.1062899562832949)) ('f_sigv_LRG', np.float64(0.9172650887228229)) ('log_Mcent_LRG', np.float64(12.691310795932376)) ('sigma_M_LRG', np.float64(0.12556699621909778))
[Interation 19] ('M_0_LRG', np.float64(12.618938591350696)) ('M_1_LRG', np.float64(13.81162397488688)) ('alpha_LRG', np.float64(1.0688446501152742)) ('f_sigv_LRG', np.float64(0.9232238031602027)) ('log_Mcent_LRG', np.float64(12.705107754934739)) ('sigma_M_LRG', np.float64(0.13973680587113246))
[Interation 19] ('M_0_LRG', np.float64(12.530355904898165)) ('M_1_LRG', np.float64(13.828832642063508)) ('alpha_LRG', np.float64(1.095261994553932)) ('f_sigv_LRG', np.float64(0.9402395973686891)) ('log_Mcent_LRG', np.float64(12.70966713924226)) ('sigma_M_LRG', np.float64(0.1435225928718485))
[Interation 19] chi2=499.30223585670694
[Interation 19] chi2=497.34485572411006
[Interation 19] chi2=487.8167028641102
[Interation 19] chi2=546.2623261840012
[Interation 19] chi2=510.51333138939543
[Interation 19] chi2=465.2371154025944
[Interation 19] chi2=526.0909089286737
[Interation 19] chi2=456.3093507384317
[Interation 19] chi2=498.66368754875526
[Interation 19] chi2=494.7765740391712
[Interation 19] chi2=484.69938140514523
[Interation 19] chi2=563.2644839557167
[Interation 20] ('M_0_LRG', np.float64(12.559710573887864)) ('M_1_LRG', np.float64(13.805807180023894)) ('alpha_LRG', np.float64(1.1044854253481822)) ('f_sigv_LRG', np.float64(0.9150298213604194)) ('log_Mcent_LRG', np.float64(12.698352268871066)) ('sigma_M_LRG', np.float64(0.1322814622633895))
[Interation 20] ('M_0_LRG', np.float64(12.585005829391887)) ('M_1_LRG', np.float64(13.80055411618564)) ('alpha_LRG', np.float64(1.0832704507972502)) ('f_sigv_LRG', np.float64(0.9212362148410014)) ('log_Mcent_LRG', np.float64(12.698599469723911)) ('sigma_M_LRG', np.float64(0.13867579389845197))
[Interation 20] ('M_0_LRG', np.float64(12.54141948973184)) ('M_1_LRG', np.float64(13.830264903187835)) ('alpha_LRG', np.float64(1.091552259438826)) ('f_sigv_LRG', np.float64(0.9241898732961804)) ('log_Mcent_LRG', np.float64(12.72204510012495)) ('sigma_M_LRG', np.float64(0.18834145514974088))
[Interation 20] ('M_0_LRG', np.float64(12.578327201815926)) ('M_1_LRG', np.float64(13.819614339171604)) ('alpha_LRG', np.float64(1.067030114360126)) ('f_sigv_LRG', np.float64(0.9233134223640811)) ('log_Mcent_LRG', np.float64(12.714429204820203)) ('sigma_M_LRG', np.float64(0.18229846672081662))
[Interation 20] chi2=487.7996932536127
[Interation 20] chi2=529.6435351163731
[Interation 20] chi2=542.4219101641859
[Interation 20] chi2=469.60809167402
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_08.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.54353129273637)) ('M_1_LRG', np.float64(13.825268738771783)) ('alpha_LRG', np.float64(1.0876884145610386)) ('f_sigv_LRG', np.float64(0.930918008683114)) ('log_Mcent_LRG', np.float64(12.714009117771948)) ('sigma_M_LRG', np.float64(0.16079628869708956))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3381829261779785
Start satellite assignement
Satellite assignement done 0.08753538131713867
LRG mock catalogue done 0.16183924674987793
607830 central galaxies, 92033 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6891915798187256
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_08.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:21
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:21
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:21
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Load smu measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Load correlation matrix for LRG at z0.725 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:19
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:28
Load correlation matrix for LRG at z0.725 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.494635698193914)) ('M_1_LRG', np.float64(13.220719370293802)) ('alpha_LRG', np.float64(1.0667317484749843)) ('f_sigv_LRG', np.float64(1.0292312633607015)) ('log_Mcent_LRG', np.float64(12.695104335718371)) ('sigma_M_LRG', np.float64(0.5760244191940214))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.425503295705056)) ('M_1_LRG', np.float64(13.688722862842972)) ('alpha_LRG', np.float64(0.9914201852804888)) ('f_sigv_LRG', np.float64(1.1098150331878662)) ('log_Mcent_LRG', np.float64(12.692987801307742)) ('sigma_M_LRG', np.float64(0.3097374629772198))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.43954413831109)) ('M_1_LRG', np.float64(14.250056981184452)) ('alpha_LRG', np.float64(1.1184300414886421)) ('f_sigv_LRG', np.float64(0.7036293191429176)) ('log_Mcent_LRG', np.float64(12.930054868559875)) ('sigma_M_LRG', np.float64(0.34768166345593143))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.407950243902318)) ('M_1_LRG', np.float64(13.489940441171008)) ('alpha_LRG', np.float64(1.0241273400121087)) ('f_sigv_LRG', np.float64(0.82440588403847)) ('log_Mcent_LRG', np.float64(12.729993125681059)) ('sigma_M_LRG', np.float64(0.5764443703312858))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.24025915354076)) ('M_1_LRG', np.float64(13.567539288425634)) ('alpha_LRG', np.float64(0.8078609080756506)) ('f_sigv_LRG', np.float64(1.0267715992219983)) ('log_Mcent_LRG', np.float64(12.695236308999883)) ('sigma_M_LRG', np.float64(0.44547791750499344))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.49473116607515)) ('M_1_LRG', np.float64(13.985091670985465)) ('alpha_LRG', np.float64(1.0885345953583139)) ('f_sigv_LRG', np.float64(0.9669197049639785)) ('log_Mcent_LRG', np.float64(12.866067599367591)) ('sigma_M_LRG', np.float64(0.2542896922080524))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.413575363076369)) ('M_1_LRG', np.float64(13.692348222075303)) ('alpha_LRG', np.float64(1.1003991239905575)) ('f_sigv_LRG', np.float64(0.824520486553185)) ('log_Mcent_LRG', np.float64(12.74346079036945)) ('sigma_M_LRG', np.float64(0.3877858243853116))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.453099114802109)) ('M_1_LRG', np.float64(13.464655603816693)) ('alpha_LRG', np.float64(0.8661872075900803)) ('f_sigv_LRG', np.float64(0.9292993955667054)) ('log_Mcent_LRG', np.float64(12.68037753088006)) ('sigma_M_LRG', np.float64(0.34939420482765604))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.471867344707931)) ('M_1_LRG', np.float64(13.87517331696336)) ('alpha_LRG', np.float64(0.973297663791437)) ('f_sigv_LRG', np.float64(1.1202638189384582)) ('log_Mcent_LRG', np.float64(12.716272812145306)) ('sigma_M_LRG', np.float64(0.2508544110667896))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.399197140639275)) ('M_1_LRG', np.float64(13.582195930314812)) ('alpha_LRG', np.float64(0.9608479648202835)) ('f_sigv_LRG', np.float64(1.0530511546405215)) ('log_Mcent_LRG', np.float64(12.796830627949147)) ('sigma_M_LRG', np.float64(0.5616776753987445))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.470969879274028)) ('M_1_LRG', np.float64(13.467557889657286)) ('alpha_LRG', np.float64(1.1966491981419245)) ('f_sigv_LRG', np.float64(0.9379538449923821)) ('log_Mcent_LRG', np.float64(12.613847450594388)) ('sigma_M_LRG', np.float64(0.32287896732327126))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.502164473552495)) ('M_1_LRG', np.float64(13.564296676941677)) ('alpha_LRG', np.float64(1.0465398037123441)) ('f_sigv_LRG', np.float64(0.7536226067610623)) ('log_Mcent_LRG', np.float64(12.743599233549626)) ('sigma_M_LRG', np.float64(0.4694801143615507))
[Interation 20] chi2=3542.1046145116784
[Interation 20] chi2=2246.4564876634536
[Interation 20] chi2=14715.95267986605
[Interation 20] chi2=1915.4401378854175
[Interation 20] chi2=4600.357790353205
[Interation 20] chi2=5410.55170501909
[Interation 20] chi2=1623.0310411780908
[Interation 20] chi2=6792.707308543302
[Interation 20] chi2=1194.7091100690357
[Interation 20] chi2=4890.565389143495
[Interation 20] chi2=5094.600310566868
[Interation 20] chi2=3266.857866061181
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 21] ('M_0_LRG', np.float64(12.547951017425437)) ('M_1_LRG', np.float64(13.944498380516634)) ('alpha_LRG', np.float64(0.9663217262786055)) ('f_sigv_LRG', np.float64(0.9744443780781358)) ('log_Mcent_LRG', np.float64(12.801416769248805)) ('sigma_M_LRG', np.float64(0.31824135792077723))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 21] ('M_0_LRG', np.float64(12.53153327719699)) ('M_1_LRG', np.float64(13.803407067512792)) ('alpha_LRG', np.float64(1.1421328853246646)) ('f_sigv_LRG', np.float64(0.9758501475168031)) ('log_Mcent_LRG', np.float64(12.72164413785388)) ('sigma_M_LRG', np.float64(0.1473138468939595))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 21] ('M_0_LRG', np.float64(12.58303774112819)) ('M_1_LRG', np.float64(13.839553727183363)) ('alpha_LRG', np.float64(1.051041607544326)) ('f_sigv_LRG', np.float64(0.9753262710083357)) ('log_Mcent_LRG', np.float64(12.710996571470476)) ('sigma_M_LRG', np.float64(0.13412538255439488))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 21] ('M_0_LRG', np.float64(12.534838530913225)) ('M_1_LRG', np.float64(13.939771384336899)) ('alpha_LRG', np.float64(1.0033551039008375)) ('f_sigv_LRG', np.float64(1.0462925932353464)) ('log_Mcent_LRG', np.float64(12.795570927884514)) ('sigma_M_LRG', np.float64(0.29479626105970413))
[Interation 21] chi2=674.2097112097044
[Interation 21] chi2=611.5058261100426
[Interation 21] chi2=456.65625574409705
[Interation 21] chi2=621.4086161605981
[Interation 21] ('M_0_LRG', np.float64(12.545830308735388)) ('M_1_LRG', np.float64(13.846242689219732)) ('alpha_LRG', np.float64(1.0838226776138806)) ('f_sigv_LRG', np.float64(0.9494256576705443)) ('log_Mcent_LRG', np.float64(12.721344990245042)) ('sigma_M_LRG', np.float64(0.14779817637589282))
[Interation 21] ('M_0_LRG', np.float64(12.554480058331615)) ('M_1_LRG', np.float64(13.836437318992301)) ('alpha_LRG', np.float64(1.062806479791078)) ('f_sigv_LRG', np.float64(0.9655102357386736)) ('log_Mcent_LRG', np.float64(12.704805008239612)) ('sigma_M_LRG', np.float64(0.11368313350581322))
[Interation 21] ('M_0_LRG', np.float64(12.546640775796444)) ('M_1_LRG', np.float64(13.807590482705017)) ('alpha_LRG', np.float64(1.1137719518091558)) ('f_sigv_LRG', np.float64(0.9203660499489966)) ('log_Mcent_LRG', np.float64(12.6914692178326)) ('sigma_M_LRG', np.float64(0.10414078987123587))
[Interation 21] ('M_0_LRG', np.float64(12.554676940629799)) ('M_1_LRG', np.float64(13.835622016637979)) ('alpha_LRG', np.float64(1.1066842282432665)) ('f_sigv_LRG', np.float64(0.9419808233627777)) ('log_Mcent_LRG', np.float64(12.727433650653893)) ('sigma_M_LRG', np.float64(0.1684165532692667))
[Interation 21] ('M_0_LRG', np.float64(12.550631149103)) ('M_1_LRG', np.float64(13.834412584101504)) ('alpha_LRG', np.float64(1.0810380761879868)) ('f_sigv_LRG', np.float64(0.9593903191345492)) ('log_Mcent_LRG', np.float64(12.71698284367275)) ('sigma_M_LRG', np.float64(0.14827662438420253))
[Interation 21] ('M_0_LRG', np.float64(12.575873406584288)) ('M_1_LRG', np.float64(13.831771172369123)) ('alpha_LRG', np.float64(1.0713199521863432)) ('f_sigv_LRG', np.float64(0.9433117479074845)) ('log_Mcent_LRG', np.float64(12.713449057111664)) ('sigma_M_LRG', np.float64(0.14873785059680922))
[Interation 21] ('M_0_LRG', np.float64(12.619422022302706)) ('M_1_LRG', np.float64(13.78844857080381)) ('alpha_LRG', np.float64(1.0531939637299448)) ('f_sigv_LRG', np.float64(0.9439012773979909)) ('log_Mcent_LRG', np.float64(12.674659586087968)) ('sigma_M_LRG', np.float64(0.07433438623949956))
[Interation 21] ('M_0_LRG', np.float64(12.604925347740462)) ('M_1_LRG', np.float64(13.816897680680768)) ('alpha_LRG', np.float64(1.0513855280021251)) ('f_sigv_LRG', np.float64(0.9464559908091638)) ('log_Mcent_LRG', np.float64(12.694782532321732)) ('sigma_M_LRG', np.float64(0.09988986549488105))
[Interation 21] ('M_0_LRG', np.float64(12.433919701545497)) ('M_1_LRG', np.float64(13.841050830784463)) ('alpha_LRG', np.float64(1.1324659538831883)) ('f_sigv_LRG', np.float64(0.951355070549261)) ('log_Mcent_LRG', np.float64(12.725733865559219)) ('sigma_M_LRG', np.float64(0.1858241969930272))
[Interation 21] ('M_0_LRG', np.float64(12.522613974912598)) ('M_1_LRG', np.float64(13.838815095667966)) ('alpha_LRG', np.float64(1.079954134837496)) ('f_sigv_LRG', np.float64(0.9493385852052842)) ('log_Mcent_LRG', np.float64(12.715401503360967)) ('sigma_M_LRG', np.float64(0.15282921212118022))
[Interation 21] ('M_0_LRG', np.float64(12.475914241933793)) ('M_1_LRG', np.float64(13.825498771720516)) ('alpha_LRG', np.float64(1.125245585731651)) ('f_sigv_LRG', np.float64(0.9465991142266557)) ('log_Mcent_LRG', np.float64(12.69896619331504)) ('sigma_M_LRG', np.float64(0.11889958844328058))
[Interation 21] ('M_0_LRG', np.float64(12.580194523836045)) ('M_1_LRG', np.float64(13.83823349596926)) ('alpha_LRG', np.float64(1.0593003928625682)) ('f_sigv_LRG', np.float64(0.9406337653950186)) ('log_Mcent_LRG', np.float64(12.728415681004158)) ('sigma_M_LRG', np.float64(0.17687151479540592))
[Interation 21] chi2=483.02421025109646
[Interation 21] chi2=479.17707423844394
[Interation 21] chi2=520.8314835580911
[Interation 21] chi2=460.20377709911463
[Interation 21] chi2=597.170218216099
[Interation 21] chi2=497.24148611100355
[Interation 21] chi2=532.8326552676676
[Interation 21] chi2=505.784669201549
[Interation 21] chi2=499.03802459295616
[Interation 21] chi2=458.50024713928667
[Interation 21] chi2=542.581396849556
[Interation 21] chi2=521.7911241103916
[Interation 22] ('M_0_LRG', np.float64(12.543829114770102)) ('M_1_LRG', np.float64(13.827411167259148)) ('alpha_LRG', np.float64(1.0938879472341778)) ('f_sigv_LRG', np.float64(0.9298080192068383)) ('log_Mcent_LRG', np.float64(12.720877029526754)) ('sigma_M_LRG', np.float64(0.1868942680367069))
[Interation 22] ('M_0_LRG', np.float64(12.488158480831084)) ('M_1_LRG', np.float64(13.83433441665524)) ('alpha_LRG', np.float64(1.1070652500373577)) ('f_sigv_LRG', np.float64(0.9287449356031234)) ('log_Mcent_LRG', np.float64(12.711525515946276)) ('sigma_M_LRG', np.float64(0.1625621203291543))
[Interation 22] ('M_0_LRG', np.float64(12.52811455543177)) ('M_1_LRG', np.float64(13.839170805288166)) ('alpha_LRG', np.float64(1.0987012551985986)) ('f_sigv_LRG', np.float64(0.9317612474984933)) ('log_Mcent_LRG', np.float64(12.717636309608201)) ('sigma_M_LRG', np.float64(0.16493792037106003))
[Interation 22] ('M_0_LRG', np.float64(12.548695248998609)) ('M_1_LRG', np.float64(13.838902455996214)) ('alpha_LRG', np.float64(1.0775106480262138)) ('f_sigv_LRG', np.float64(0.9434049277716086)) ('log_Mcent_LRG', np.float64(12.716553587928255)) ('sigma_M_LRG', np.float64(0.15477059887811379))
[Interation 22] chi2=468.634547201792
[Interation 22] chi2=508.28585963147344
[Interation 22] chi2=489.8100388764357
[Interation 22] chi2=485.0407392031269
[Interation 22] ('M_0_LRG', np.float64(12.610061739589472)) ('M_1_LRG', np.float64(13.825413906369555)) ('alpha_LRG', np.float64(1.0585613665707692)) ('f_sigv_LRG', np.float64(0.94781659126063)) ('log_Mcent_LRG', np.float64(12.70909255245517)) ('sigma_M_LRG', np.float64(0.13262582915132043))
[Interation 22] ('M_0_LRG', np.float64(12.533718479555857)) ('M_1_LRG', np.float64(13.83815144535609)) ('alpha_LRG', np.float64(1.0847130789710049)) ('f_sigv_LRG', np.float64(0.9597702708745302)) ('log_Mcent_LRG', np.float64(12.718667848617104)) ('sigma_M_LRG', np.float64(0.15918104480402612))
[Interation 22] ('M_0_LRG', np.float64(12.551780184233836)) ('M_1_LRG', np.float64(13.83032477747593)) ('alpha_LRG', np.float64(1.0924004110487)) ('f_sigv_LRG', np.float64(0.9405524538647757)) ('log_Mcent_LRG', np.float64(12.71435388121618)) ('sigma_M_LRG', np.float64(0.15002424211068793))
[Interation 22] ('M_0_LRG', np.float64(12.500149053760568)) ('M_1_LRG', np.float64(13.831138754782717)) ('alpha_LRG', np.float64(1.1017664381350964)) ('f_sigv_LRG', np.float64(0.9412572084702255)) ('log_Mcent_LRG', np.float64(12.710251381971561)) ('sigma_M_LRG', np.float64(0.14535961702492245))
[Interation 22] ('M_0_LRG', np.float64(12.571344457839825)) ('M_1_LRG', np.float64(13.824711923959972)) ('alpha_LRG', np.float64(1.086756259367027)) ('f_sigv_LRG', np.float64(0.9448179014535583)) ('log_Mcent_LRG', np.float64(12.715072489764454)) ('sigma_M_LRG', np.float64(0.1573493344217366))
[Interation 22] ('M_0_LRG', np.float64(12.532471433854035)) ('M_1_LRG', np.float64(13.83098190540245)) ('alpha_LRG', np.float64(1.1035654316446095)) ('f_sigv_LRG', np.float64(0.93865493957958)) ('log_Mcent_LRG', np.float64(12.719567008088458)) ('sigma_M_LRG', np.float64(0.16666546204091937))
[Interation 22] ('M_0_LRG', np.float64(12.556460926033564)) ('M_1_LRG', np.float64(13.82620207092486)) ('alpha_LRG', np.float64(1.0832575597525798)) ('f_sigv_LRG', np.float64(0.9359522708399847)) ('log_Mcent_LRG', np.float64(12.709331990631215)) ('sigma_M_LRG', np.float64(0.14520916565915798))
[Interation 22] ('M_0_LRG', np.float64(12.515635165223053)) ('M_1_LRG', np.float64(13.838591298910123)) ('alpha_LRG', np.float64(1.0937900806581364)) ('f_sigv_LRG', np.float64(0.9481094625497077)) ('log_Mcent_LRG', np.float64(12.717920663546987)) ('sigma_M_LRG', np.float64(0.16331939442838928))
[Interation 22] ('M_0_LRG', np.float64(12.543381678764314)) ('M_1_LRG', np.float64(13.832553365527303)) ('alpha_LRG', np.float64(1.0804204830572353)) ('f_sigv_LRG', np.float64(0.9513800383409095)) ('log_Mcent_LRG', np.float64(12.709667508000642)) ('sigma_M_LRG', np.float64(0.13889235819949391))
[Interation 22] ('M_0_LRG', np.float64(12.571967718038742)) ('M_1_LRG', np.float64(13.830688709795908)) ('alpha_LRG', np.float64(1.078412967961067)) ('f_sigv_LRG', np.float64(0.9439587304938855)) ('log_Mcent_LRG', np.float64(12.708333766598185)) ('sigma_M_LRG', np.float64(0.1255754005594682))
[Interation 22] ('M_0_LRG', np.float64(12.535776324062267)) ('M_1_LRG', np.float64(13.829243526303904)) ('alpha_LRG', np.float64(1.077725118136322)) ('f_sigv_LRG', np.float64(0.9417030931633318)) ('log_Mcent_LRG', np.float64(12.708441410804353)) ('sigma_M_LRG', np.float64(0.1397156766953483))
[Interation 22] ('M_0_LRG', np.float64(12.565250548967569)) ('M_1_LRG', np.float64(13.83900543626842)) ('alpha_LRG', np.float64(1.0567249646291084)) ('f_sigv_LRG', np.float64(0.9647937874736435)) ('log_Mcent_LRG', np.float64(12.710649191708479)) ('sigma_M_LRG', np.float64(0.1368574497812578))
[Interation 22] chi2=465.0152610572309
[Interation 22] chi2=508.10436230229607
[Interation 22] chi2=536.4721049771642
[Interation 22] chi2=505.43996780953904
[Interation 22] chi2=511.6119646159063
[Interation 22] chi2=466.3139549970741
[Interation 22] chi2=479.03322286214154
[Interation 22] chi2=527.1151949859636
[Interation 22] chi2=536.168852084507
[Interation 22] chi2=491.9202401331393
[Interation 22] chi2=538.1414672058813
[Interation 22] chi2=504.3927429910648
[Interation 23] ('M_0_LRG', np.float64(12.540030915083571)) ('M_1_LRG', np.float64(13.831989716683335)) ('alpha_LRG', np.float64(1.092707212149427)) ('f_sigv_LRG', np.float64(0.9436679571636034)) ('log_Mcent_LRG', np.float64(12.715367903509266)) ('sigma_M_LRG', np.float64(0.15661977763465412))
[Interation 23] ('M_0_LRG', np.float64(12.523985357617931)) ('M_1_LRG', np.float64(13.837049505915024)) ('alpha_LRG', np.float64(1.0868648292211909)) ('f_sigv_LRG', np.float64(0.9385453660633601)) ('log_Mcent_LRG', np.float64(12.717026551450257)) ('sigma_M_LRG', np.float64(0.16950266176775747))
[Interation 23] ('M_0_LRG', np.float64(12.560881887139189)) ('M_1_LRG', np.float64(13.825254921696915)) ('alpha_LRG', np.float64(1.0954213249242388)) ('f_sigv_LRG', np.float64(0.9413593462742492)) ('log_Mcent_LRG', np.float64(12.715525208923157)) ('sigma_M_LRG', np.float64(0.16194917729297298))
[Interation 23] ('M_0_LRG', np.float64(12.533601896181766)) ('M_1_LRG', np.float64(13.826537990957082)) ('alpha_LRG', np.float64(1.092553067124508)) ('f_sigv_LRG', np.float64(0.9337017571924711)) ('log_Mcent_LRG', np.float64(12.704499243882509)) ('sigma_M_LRG', np.float64(0.1274400747203091))
[Interation 23] chi2=508.6712768487687
[Interation 23] chi2=505.4511232400921
[Interation 23] chi2=476.2704270423823
[Interation 23] chi2=470.1242542852488
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_09.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.55375284976434)) ('M_1_LRG', np.float64(13.819072229129842)) ('alpha_LRG', np.float64(1.0995819792888863)) ('f_sigv_LRG', np.float64(0.9303889303347721)) ('log_Mcent_LRG', np.float64(12.706215098591613)) ('sigma_M_LRG', np.float64(0.13838703485741038))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.30332016944885254
Start satellite assignement
Satellite assignement done 0.0884556770324707
LRG mock catalogue done 0.16468262672424316
609011 central galaxies, 90596 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6578309535980225
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_09.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:25
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:28
Load correlation matrix for LRG at z0.725 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:28
Load correlation matrix for LRG at z0.725 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.557168327437019)) ('M_1_LRG', np.float64(13.798671233483773)) ('alpha_LRG', np.float64(1.096739826386332)) ('f_sigv_LRG', np.float64(0.938669736176363)) ('log_Mcent_LRG', np.float64(12.703898341831257)) ('sigma_M_LRG', np.float64(0.15714637042341778))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.52511430827128)) ('M_1_LRG', np.float64(13.880250317753939)) ('alpha_LRG', np.float64(1.0675171875230214)) ('f_sigv_LRG', np.float64(0.9387377742597693)) ('log_Mcent_LRG', np.float64(12.783222298645986)) ('sigma_M_LRG', np.float64(0.28194173132439193))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.477108591499194)) ('M_1_LRG', np.float64(13.91329017769206)) ('alpha_LRG', np.float64(1.0702363164501159)) ('f_sigv_LRG', np.float64(0.9363034548254767)) ('log_Mcent_LRG', np.float64(12.803651428389614)) ('sigma_M_LRG', np.float64(0.30566496223261597))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.546309931838616)) ('M_1_LRG', np.float64(13.919210591977652)) ('alpha_LRG', np.float64(1.0337435102880819)) ('f_sigv_LRG', np.float64(0.9458192437860568)) ('log_Mcent_LRG', np.float64(12.817762177175089)) ('sigma_M_LRG', np.float64(0.35650356358488056))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.708155930364505)) ('M_1_LRG', np.float64(13.821339922397748)) ('alpha_LRG', np.float64(0.9964655555358506)) ('f_sigv_LRG', np.float64(0.9664805909287963)) ('log_Mcent_LRG', np.float64(12.750494013843511)) ('sigma_M_LRG', np.float64(0.24887714094932784))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.689651722134089)) ('M_1_LRG', np.float64(13.859421195241652)) ('alpha_LRG', np.float64(0.9806537196670884)) ('f_sigv_LRG', np.float64(0.9634039231378987)) ('log_Mcent_LRG', np.float64(12.75079040370195)) ('sigma_M_LRG', np.float64(0.228775160576343))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.54523861514057)) ('M_1_LRG', np.float64(13.859504829136185)) ('alpha_LRG', np.float64(1.085118134812784)) ('f_sigv_LRG', np.float64(0.9380095242703405)) ('log_Mcent_LRG', np.float64(12.77622473729127)) ('sigma_M_LRG', np.float64(0.25351598465242264))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.700044108597117)) ('M_1_LRG', np.float64(13.797306342687014)) ('alpha_LRG', np.float64(1.0026690619072922)) ('f_sigv_LRG', np.float64(0.898810490734902)) ('log_Mcent_LRG', np.float64(12.699564455545346)) ('sigma_M_LRG', np.float64(0.18475741047285188))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.424004162799918)) ('M_1_LRG', np.float64(13.81763931905469)) ('alpha_LRG', np.float64(1.1413493456166002)) ('f_sigv_LRG', np.float64(0.9307795545723646)) ('log_Mcent_LRG', np.float64(12.700059214780605)) ('sigma_M_LRG', np.float64(0.15660479226155888))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.446804728109457)) ('M_1_LRG', np.float64(13.825627773638807)) ('alpha_LRG', np.float64(1.0913282995722304)) ('f_sigv_LRG', np.float64(0.9838310077767864)) ('log_Mcent_LRG', np.float64(12.68582666743888)) ('sigma_M_LRG', np.float64(0.12706501787690122))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.632203638852348)) ('M_1_LRG', np.float64(13.899794388666486)) ('alpha_LRG', np.float64(1.0605928713634225)) ('f_sigv_LRG', np.float64(0.8839630159861291)) ('log_Mcent_LRG', np.float64(12.832961900934126)) ('sigma_M_LRG', np.float64(0.36558116365937304))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.649236563708254)) ('M_1_LRG', np.float64(13.856498125759892)) ('alpha_LRG', np.float64(0.9844130070007415)) ('f_sigv_LRG', np.float64(1.004445808487942)) ('log_Mcent_LRG', np.float64(12.744908592789754)) ('sigma_M_LRG', np.float64(0.23628267922043922))
[Interation 23] chi2=579.9402515502215
[Interation 23] chi2=585.5076352748331
[Interation 23] chi2=600.1692021915671
[Interation 23] chi2=580.6228319964005
[Interation 23] chi2=628.4208779628178
[Interation 23] chi2=551.5036876921712
[Interation 23] chi2=473.7726578366852
[Interation 23] chi2=495.46843936076544
[Interation 23] chi2=500.55474712553325
[Interation 23] chi2=576.2987363418732
[Interation 23] chi2=548.7956727826801
[Interation 23] chi2=525.6082412028792
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 24] ('M_0_LRG', np.float64(12.547349038582713)) ('M_1_LRG', np.float64(13.790279371072454)) ('alpha_LRG', np.float64(1.113718640248016)) ('f_sigv_LRG', np.float64(0.91275363663916)) ('log_Mcent_LRG', np.float64(12.686034266558591)) ('sigma_M_LRG', np.float64(0.1354373587717052))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 24] ('M_0_LRG', np.float64(12.50353776782671)) ('M_1_LRG', np.float64(13.820026778853734)) ('alpha_LRG', np.float64(1.106938848435801)) ('f_sigv_LRG', np.float64(0.9335493791179273)) ('log_Mcent_LRG', np.float64(12.706133925769912)) ('sigma_M_LRG', np.float64(0.16612891363458326))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 24] ('M_0_LRG', np.float64(12.535427258133508)) ('M_1_LRG', np.float64(13.840490621070176)) ('alpha_LRG', np.float64(1.077503020327823)) ('f_sigv_LRG', np.float64(0.9521968299988954)) ('log_Mcent_LRG', np.float64(12.72709829406233)) ('sigma_M_LRG', np.float64(0.1763821594618244))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 24] ('M_0_LRG', np.float64(12.53230252596923)) ('M_1_LRG', np.float64(13.842327461582663)) ('alpha_LRG', np.float64(1.0777499679547193)) ('f_sigv_LRG', np.float64(0.9352754615931255)) ('log_Mcent_LRG', np.float64(12.716701798629678)) ('sigma_M_LRG', np.float64(0.15212089210112945))
[Interation 24] chi2=488.9989214577683
[Interation 24] chi2=479.4945487092741
[Interation 24] chi2=463.7237790717466
[Interation 24] chi2=518.0214370957383
[Interation 24] ('M_0_LRG', np.float64(12.50966574010411)) ('M_1_LRG', np.float64(13.84129740990011)) ('alpha_LRG', np.float64(1.0985690840049003)) ('f_sigv_LRG', np.float64(0.9458727526248989)) ('log_Mcent_LRG', np.float64(12.719653295754515)) ('sigma_M_LRG', np.float64(0.16182128818661357))
[Interation 24] ('M_0_LRG', np.float64(12.500652016130255)) ('M_1_LRG', np.float64(13.829400842671308)) ('alpha_LRG', np.float64(1.1051691526930758)) ('f_sigv_LRG', np.float64(0.9404129083273342)) ('log_Mcent_LRG', np.float64(12.714040157741268)) ('sigma_M_LRG', np.float64(0.16034162456308132))
[Interation 24] ('M_0_LRG', np.float64(12.499090752850886)) ('M_1_LRG', np.float64(13.842464764682424)) ('alpha_LRG', np.float64(1.0843485809348203)) ('f_sigv_LRG', np.float64(0.9522589294070007)) ('log_Mcent_LRG', np.float64(12.723720756482514)) ('sigma_M_LRG', np.float64(0.17765203049918))
[Interation 24] ('M_0_LRG', np.float64(12.506494121656369)) ('M_1_LRG', np.float64(13.8265301367703)) ('alpha_LRG', np.float64(1.0999087948140525)) ('f_sigv_LRG', np.float64(0.9316667433016019)) ('log_Mcent_LRG', np.float64(12.71082793505201)) ('sigma_M_LRG', np.float64(0.1631159357994365))
[Interation 24] ('M_0_LRG', np.float64(12.505381568048026)) ('M_1_LRG', np.float64(13.817198374477588)) ('alpha_LRG', np.float64(1.1109711830571025)) ('f_sigv_LRG', np.float64(0.9348075481518042)) ('log_Mcent_LRG', np.float64(12.705726168846715)) ('sigma_M_LRG', np.float64(0.15012095179662077))
[Interation 24] ('M_0_LRG', np.float64(12.626225218841146)) ('M_1_LRG', np.float64(13.825906972385772)) ('alpha_LRG', np.float64(1.0458609258429428)) ('f_sigv_LRG', np.float64(0.9206735853385292)) ('log_Mcent_LRG', np.float64(12.725075178666101)) ('sigma_M_LRG', np.float64(0.1958998597646851))
[Interation 24] ('M_0_LRG', np.float64(12.558702921724706)) ('M_1_LRG', np.float64(13.830914934695452)) ('alpha_LRG', np.float64(1.0700156083505699)) ('f_sigv_LRG', np.float64(0.9430266489330208)) ('log_Mcent_LRG', np.float64(12.71923577998657)) ('sigma_M_LRG', np.float64(0.17008664894495035))
[Interation 24] ('M_0_LRG', np.float64(12.487806307304313)) ('M_1_LRG', np.float64(13.845055065570623)) ('alpha_LRG', np.float64(1.1002869140300084)) ('f_sigv_LRG', np.float64(0.9495980977934048)) ('log_Mcent_LRG', np.float64(12.72813886560642)) ('sigma_M_LRG', np.float64(0.18456456338565752))
[Interation 24] ('M_0_LRG', np.float64(12.455974393810116)) ('M_1_LRG', np.float64(13.84961784169898)) ('alpha_LRG', np.float64(1.1127652904257426)) ('f_sigv_LRG', np.float64(0.9308756843585702)) ('log_Mcent_LRG', np.float64(12.730135814107072)) ('sigma_M_LRG', np.float64(0.19814335590472254))
[Interation 24] ('M_0_LRG', np.float64(12.506943935637583)) ('M_1_LRG', np.float64(13.842065632306676)) ('alpha_LRG', np.float64(1.0994960934555493)) ('f_sigv_LRG', np.float64(0.9274994737111556)) ('log_Mcent_LRG', np.float64(12.734470983957713)) ('sigma_M_LRG', np.float64(0.21309244500989394))
[Interation 24] ('M_0_LRG', np.float64(12.58805547742593)) ('M_1_LRG', np.float64(13.826680177628509)) ('alpha_LRG', np.float64(1.0607741533801265)) ('f_sigv_LRG', np.float64(0.9372125379736165)) ('log_Mcent_LRG', np.float64(12.719594454463385)) ('sigma_M_LRG', np.float64(0.1810908585796302))
[Interation 24] ('M_0_LRG', np.float64(12.569784640225247)) ('M_1_LRG', np.float64(13.804016301322763)) ('alpha_LRG', np.float64(1.0784680298801133)) ('f_sigv_LRG', np.float64(0.9303846888578066)) ('log_Mcent_LRG', np.float64(12.697319769517618)) ('sigma_M_LRG', np.float64(0.13532650367790727))
[Interation 24] chi2=504.3325123051328
[Interation 24] chi2=539.1866808566642
[Interation 24] chi2=534.3380183648744
[Interation 24] chi2=438.715306246197
[Interation 24] chi2=488.03475087150855
[Interation 24] chi2=508.1949951932033
[Interation 24] chi2=546.2253629503073
[Interation 24] chi2=614.2620148399764
[Interation 24] chi2=498.53029278007836
[Interation 24] chi2=494.6754320633128
[Interation 24] chi2=526.1967176750136
[Interation 24] chi2=512.568143384522
[Interation 25] ('M_0_LRG', np.float64(12.518985610845904)) ('M_1_LRG', np.float64(13.831886342631027)) ('alpha_LRG', np.float64(1.0972357500031102)) ('f_sigv_LRG', np.float64(0.9284631132791878)) ('log_Mcent_LRG', np.float64(12.71650239772991)) ('sigma_M_LRG', np.float64(0.17054823452903511))
[Interation 25] ('M_0_LRG', np.float64(12.563917178923925)) ('M_1_LRG', np.float64(13.845799882671004)) ('alpha_LRG', np.float64(1.0754237665015065)) ('f_sigv_LRG', np.float64(0.9255996360514607)) ('log_Mcent_LRG', np.float64(12.732984379320149)) ('sigma_M_LRG', np.float64(0.2084846548106823))
[Interation 25] ('M_0_LRG', np.float64(12.48629239515326)) ('M_1_LRG', np.float64(13.837474917682652)) ('alpha_LRG', np.float64(1.1084748024884719)) ('f_sigv_LRG', np.float64(0.9377684997557837)) ('log_Mcent_LRG', np.float64(12.72240028501098)) ('sigma_M_LRG', np.float64(0.1801371516392966))
[Interation 25] ('M_0_LRG', np.float64(12.504805341492002)) ('M_1_LRG', np.float64(13.819612322600314)) ('alpha_LRG', np.float64(1.1134319952892613)) ('f_sigv_LRG', np.float64(0.9316299114475836)) ('log_Mcent_LRG', np.float64(12.707663539152263)) ('sigma_M_LRG', np.float64(0.1588514807986826))
[Interation 25] chi2=473.4155166722069
[Interation 25] chi2=588.9169361146153
[Interation 25] chi2=487.57802507478027
[Interation 25] chi2=489.22362519974706
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_10.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.550658903956483)) ('M_1_LRG', np.float64(13.828625004069014)) ('alpha_LRG', np.float64(1.0758134840321325)) ('f_sigv_LRG', np.float64(0.9334269585951995)) ('log_Mcent_LRG', np.float64(12.70829957221748)) ('sigma_M_LRG', np.float64(0.150455800585933))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.32715654373168945
Start satellite assignement
Satellite assignement done 0.07386112213134766
LRG mock catalogue done 0.14732098579406738
608616 central galaxies, 90720 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6552867889404297
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_10.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.531868231286348)) ('M_1_LRG', np.float64(13.508593634284603)) ('alpha_LRG', np.float64(1.131449652536066)) ('f_sigv_LRG', np.float64(1.0146904097030576)) ('log_Mcent_LRG', np.float64(12.642323066964748)) ('sigma_M_LRG', np.float64(0.4076819693292355))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.28723427249118)) ('M_1_LRG', np.float64(14.360131945236882)) ('alpha_LRG', np.float64(1.0736966832540022)) ('f_sigv_LRG', np.float64(1.194710392056748)) ('log_Mcent_LRG', np.float64(12.8251609978641)) ('sigma_M_LRG', np.float64(0.1928296590821209))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.57843413792806)) ('M_1_LRG', np.float64(13.541737821806276)) ('alpha_LRG', np.float64(0.9040453840707044)) ('f_sigv_LRG', np.float64(1.1198275839777778)) ('log_Mcent_LRG', np.float64(12.651898120849534)) ('sigma_M_LRG', np.float64(0.385029837798195))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.563883117302243)) ('M_1_LRG', np.float64(14.248398496995334)) ('alpha_LRG', np.float64(0.9693181317711195)) ('f_sigv_LRG', np.float64(0.8531234702108514)) ('log_Mcent_LRG', np.float64(13.049394669730233)) ('sigma_M_LRG', np.float64(0.4284254351335959))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.318587508468612)) ('M_1_LRG', np.float64(13.975036675226379)) ('alpha_LRG', np.float64(1.0655262450173335)) ('f_sigv_LRG', np.float64(0.8672396676551106)) ('log_Mcent_LRG', np.float64(12.865288632644631)) ('sigma_M_LRG', np.float64(0.48987848729262445))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.370563323020171)) ('M_1_LRG', np.float64(13.928236342104931)) ('alpha_LRG', np.float64(1.0190774361967005)) ('f_sigv_LRG', np.float64(0.8536526069797484)) ('log_Mcent_LRG', np.float64(12.718491099932233)) ('sigma_M_LRG', np.float64(0.32145502419722655))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.549445104546347)) ('M_1_LRG', np.float64(13.821223446883245)) ('alpha_LRG', np.float64(0.7767558589874447)) ('f_sigv_LRG', np.float64(1.1776077367841324)) ('log_Mcent_LRG', np.float64(12.761899076959608)) ('sigma_M_LRG', np.float64(0.3254065720780863))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.702210859183326)) ('M_1_LRG', np.float64(14.449184835413694)) ('alpha_LRG', np.float64(1.2913510355029691)) ('f_sigv_LRG', np.float64(0.5702055422297214)) ('log_Mcent_LRG', np.float64(13.146435684602993)) ('sigma_M_LRG', np.float64(0.4774861832415661))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.518569087170299)) ('M_1_LRG', np.float64(13.924301100977955)) ('alpha_LRG', np.float64(1.10476069288145)) ('f_sigv_LRG', np.float64(0.9476993094248558)) ('log_Mcent_LRG', np.float64(12.887743630858113)) ('sigma_M_LRG', np.float64(0.4332327388271208))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.684832839667992)) ('M_1_LRG', np.float64(13.469890958981214)) ('alpha_LRG', np.float64(1.0280281712734183)) ('f_sigv_LRG', np.float64(0.8880337716123547)) ('log_Mcent_LRG', np.float64(12.616894345550385)) ('sigma_M_LRG', np.float64(0.374597089403472))
[Interation 25] chi2=4570.077435485939
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.850649041114025)) ('M_1_LRG', np.float64(13.348377474168597)) ('alpha_LRG', np.float64(0.854003426967539)) ('f_sigv_LRG', np.float64(0.8841965821514384)) ('log_Mcent_LRG', np.float64(12.783313995354288)) ('sigma_M_LRG', np.float64(0.7214422889721863))
[Interation 25] chi2=3092.426965937148
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.589297621255533)) ('M_1_LRG', np.float64(13.83750148114754)) ('alpha_LRG', np.float64(0.9309480783302508)) ('f_sigv_LRG', np.float64(0.9044063273845847)) ('log_Mcent_LRG', np.float64(12.764309252321782)) ('sigma_M_LRG', np.float64(0.3374888400339179))
[Interation 25] chi2=6033.1321267646845
[Interation 25] chi2=9679.656837019478
[Interation 25] chi2=1844.6000026471934
[Interation 25] chi2=4132.079803772857
[Interation 25] chi2=1936.0905070607266
[Interation 25] chi2=668.7487039736064
[Interation 25] chi2=2551.1111975891445
[Interation 25] chi2=2951.7581406377963
[Interation 25] chi2=8897.632308444076
[Interation 25] chi2=920.952983686031
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 26] ('M_0_LRG', np.float64(12.777232383881096)) ('M_1_LRG', np.float64(13.850765491421857)) ('alpha_LRG', np.float64(1.0847189594358326)) ('f_sigv_LRG', np.float64(0.7398027719265926)) ('log_Mcent_LRG', np.float64(12.782354041192628)) ('sigma_M_LRG', np.float64(0.2594777657334865))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 26] ('M_0_LRG', np.float64(12.799125084656247)) ('M_1_LRG', np.float64(13.761966259921916)) ('alpha_LRG', np.float64(0.9087211788147874)) ('f_sigv_LRG', np.float64(0.8604178704331678)) ('log_Mcent_LRG', np.float64(12.662728751462769)) ('sigma_M_LRG', np.float64(0.16836072289028053))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 26] ('M_0_LRG', np.float64(12.1184039825344)) ('M_1_LRG', np.float64(13.91914244309849)) ('alpha_LRG', np.float64(1.1894204656842278)) ('f_sigv_LRG', np.float64(0.8429366168396953)) ('log_Mcent_LRG', np.float64(12.71465255487423)) ('sigma_M_LRG', np.float64(0.20554429815888364))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 26] ('M_0_LRG', np.float64(12.602514368675271)) ('M_1_LRG', np.float64(13.976718044624944)) ('alpha_LRG', np.float64(0.9647367122590426)) ('f_sigv_LRG', np.float64(0.9934531544857594)) ('log_Mcent_LRG', np.float64(12.80434620636569)) ('sigma_M_LRG', np.float64(0.271776743799756))
[Interation 26] chi2=1214.8796446734787
[Interation 26] chi2=671.658674139335
[Interation 26] chi2=963.0015702606364
[Interation 26] chi2=1163.749119951116
[Interation 26] ('M_0_LRG', np.float64(12.519876611521552)) ('M_1_LRG', np.float64(13.858119817922057)) ('alpha_LRG', np.float64(1.0795515916170835)) ('f_sigv_LRG', np.float64(0.9638855117444752)) ('log_Mcent_LRG', np.float64(12.753428266132973)) ('sigma_M_LRG', np.float64(0.23957940150913176))
[Interation 26] ('M_0_LRG', np.float64(12.403798069500223)) ('M_1_LRG', np.float64(13.840950350606075)) ('alpha_LRG', np.float64(1.143800256690709)) ('f_sigv_LRG', np.float64(0.9352559504985752)) ('log_Mcent_LRG', np.float64(12.721722842032456)) ('sigma_M_LRG', np.float64(0.18138295932123627))
[Interation 26] ('M_0_LRG', np.float64(12.455773764496712)) ('M_1_LRG', np.float64(13.853934482100206)) ('alpha_LRG', np.float64(1.1156865581317048)) ('f_sigv_LRG', np.float64(0.9483191488433614)) ('log_Mcent_LRG', np.float64(12.720012071009855)) ('sigma_M_LRG', np.float64(0.1608737446773575))
[Interation 26] ('M_0_LRG', np.float64(12.462401408235312)) ('M_1_LRG', np.float64(13.848066823728285)) ('alpha_LRG', np.float64(1.0931062054217948)) ('f_sigv_LRG', np.float64(0.972739854537882)) ('log_Mcent_LRG', np.float64(12.729062232311946)) ('sigma_M_LRG', np.float64(0.18693002192622254))
[Interation 26] ('M_0_LRG', np.float64(12.513028488145142)) ('M_1_LRG', np.float64(13.804467614650857)) ('alpha_LRG', np.float64(1.1120049920876336)) ('f_sigv_LRG', np.float64(0.924919931048188)) ('log_Mcent_LRG', np.float64(12.700435126300695)) ('sigma_M_LRG', np.float64(0.1520540637141352))
[Interation 26] ('M_0_LRG', np.float64(12.415994268615341)) ('M_1_LRG', np.float64(13.810988384043265)) ('alpha_LRG', np.float64(1.1528967662849687)) ('f_sigv_LRG', np.float64(0.9225612745075059)) ('log_Mcent_LRG', np.float64(12.693080216901894)) ('sigma_M_LRG', np.float64(0.1340394617852556))
[Interation 26] ('M_0_LRG', np.float64(12.46982057197717)) ('M_1_LRG', np.float64(13.829647095432746)) ('alpha_LRG', np.float64(1.1135826369517139)) ('f_sigv_LRG', np.float64(0.9474844083842637)) ('log_Mcent_LRG', np.float64(12.710583234925677)) ('sigma_M_LRG', np.float64(0.16075070571457928))
[Interation 26] ('M_0_LRG', np.float64(12.394262073756016)) ('M_1_LRG', np.float64(13.84633420489129)) ('alpha_LRG', np.float64(1.1623089939246338)) ('f_sigv_LRG', np.float64(0.9220854007643083)) ('log_Mcent_LRG', np.float64(12.732294618023559)) ('sigma_M_LRG', np.float64(0.20331102681766988))
[Interation 26] ('M_0_LRG', np.float64(12.455326465756931)) ('M_1_LRG', np.float64(13.843206737819594)) ('alpha_LRG', np.float64(1.1232546609215805)) ('f_sigv_LRG', np.float64(0.9342026884916294)) ('log_Mcent_LRG', np.float64(12.732540869392396)) ('sigma_M_LRG', np.float64(0.20359326072141848))
[Interation 26] ('M_0_LRG', np.float64(12.501443480066394)) ('M_1_LRG', np.float64(13.860398510608954)) ('alpha_LRG', np.float64(1.0928067744420316)) ('f_sigv_LRG', np.float64(0.9345938857667373)) ('log_Mcent_LRG', np.float64(12.741407725785688)) ('sigma_M_LRG', np.float64(0.21098199502006282))
[Interation 26] ('M_0_LRG', np.float64(12.481236707353123)) ('M_1_LRG', np.float64(13.805754759632032)) ('alpha_LRG', np.float64(1.1209180052299985)) ('f_sigv_LRG', np.float64(0.9370109971889171)) ('log_Mcent_LRG', np.float64(12.691110457174753)) ('sigma_M_LRG', np.float64(0.12236831335512294))
[Interation 26] ('M_0_LRG', np.float64(12.539059727523608)) ('M_1_LRG', np.float64(13.8119690641448)) ('alpha_LRG', np.float64(1.0967045766775707)) ('f_sigv_LRG', np.float64(0.9494274265826057)) ('log_Mcent_LRG', np.float64(12.709189594943494)) ('sigma_M_LRG', np.float64(0.1604713488432848))
[Interation 26] chi2=534.6603313742224
[Interation 26] chi2=542.7234015870953
[Interation 26] chi2=504.6865912110496
[Interation 26] chi2=537.9555858729321
[Interation 26] chi2=588.9215032924194
[Interation 26] chi2=533.1407051012834
[Interation 26] chi2=498.4640141405411
[Interation 26] chi2=472.20986310821274
[Interation 26] chi2=565.5673841943604
[Interation 26] chi2=542.3960830826898
[Interation 26] chi2=561.0415276238562
[Interation 26] chi2=499.32044722788163
[Interation 27] ('M_0_LRG', np.float64(12.510251136036985)) ('M_1_LRG', np.float64(13.855494917621973)) ('alpha_LRG', np.float64(1.0963686304801203)) ('f_sigv_LRG', np.float64(0.9276408012573698)) ('log_Mcent_LRG', np.float64(12.732479579890777)) ('sigma_M_LRG', np.float64(0.19350232718079247))
[Interation 27] ('M_0_LRG', np.float64(12.541793317620673)) ('M_1_LRG', np.float64(13.845380426137147)) ('alpha_LRG', np.float64(1.0727306981741436)) ('f_sigv_LRG', np.float64(0.9532429558316182)) ('log_Mcent_LRG', np.float64(12.734447814009096)) ('sigma_M_LRG', np.float64(0.19753412097778078))
[Interation 27] ('M_0_LRG', np.float64(12.402342245000813)) ('M_1_LRG', np.float64(13.846720956230962)) ('alpha_LRG', np.float64(1.1545351859889839)) ('f_sigv_LRG', np.float64(0.9352290840183825)) ('log_Mcent_LRG', np.float64(12.715517159948174)) ('sigma_M_LRG', np.float64(0.15321188039048983))
[Interation 27] ('M_0_LRG', np.float64(12.43933206739191)) ('M_1_LRG', np.float64(13.867888749149603)) ('alpha_LRG', np.float64(1.110966682279107)) ('f_sigv_LRG', np.float64(0.9614564291031518)) ('log_Mcent_LRG', np.float64(12.746125987574032)) ('sigma_M_LRG', np.float64(0.21288879765993668))
[Interation 27] chi2=495.6796989477721
[Interation 27] chi2=554.2118540515615
[Interation 27] chi2=546.3023597738082
[Interation 27] chi2=508.49318447926885
[Interation 27] ('M_0_LRG', np.float64(12.550197253088964)) ('M_1_LRG', np.float64(13.829820434103153)) ('alpha_LRG', np.float64(1.082695057347773)) ('f_sigv_LRG', np.float64(0.9383236127000099)) ('log_Mcent_LRG', np.float64(12.719040797732742)) ('sigma_M_LRG', np.float64(0.17402768290214943))
[Interation 27] ('M_0_LRG', np.float64(12.400566402423554)) ('M_1_LRG', np.float64(13.8439203163014)) ('alpha_LRG', np.float64(1.1435273222619469)) ('f_sigv_LRG', np.float64(0.9381576834294886)) ('log_Mcent_LRG', np.float64(12.716871250805154)) ('sigma_M_LRG', np.float64(0.1667465534134444))
[Interation 27] ('M_0_LRG', np.float64(12.5400442099643)) ('M_1_LRG', np.float64(13.825589270730507)) ('alpha_LRG', np.float64(1.0997781710862904)) ('f_sigv_LRG', np.float64(0.9284104036498767)) ('log_Mcent_LRG', np.float64(12.717779507378829)) ('sigma_M_LRG', np.float64(0.17342117261853984))
[Interation 27] ('M_0_LRG', np.float64(12.461580031245068)) ('M_1_LRG', np.float64(13.83892944268355)) ('alpha_LRG', np.float64(1.1202523415474166)) ('f_sigv_LRG', np.float64(0.9373436103473445)) ('log_Mcent_LRG', np.float64(12.72622384483617)) ('sigma_M_LRG', np.float64(0.19344263842762394))
[Interation 27] ('M_0_LRG', np.float64(12.511361036218299)) ('M_1_LRG', np.float64(13.836284663628584)) ('alpha_LRG', np.float64(1.100966771068487)) ('f_sigv_LRG', np.float64(0.9313357624765806)) ('log_Mcent_LRG', np.float64(12.723666025735296)) ('sigma_M_LRG', np.float64(0.1849085314960418))
[Interation 27] ('M_0_LRG', np.float64(12.417573790786854)) ('M_1_LRG', np.float64(13.840226545856021)) ('alpha_LRG', np.float64(1.1356096130177202)) ('f_sigv_LRG', np.float64(0.9300701198182902)) ('log_Mcent_LRG', np.float64(12.723693527622604)) ('sigma_M_LRG', np.float64(0.19308823734405367))
[Interation 27] ('M_0_LRG', np.float64(12.50205048071509)) ('M_1_LRG', np.float64(13.83678113624267)) ('alpha_LRG', np.float64(1.1093701685336763)) ('f_sigv_LRG', np.float64(0.9295829844076895)) ('log_Mcent_LRG', np.float64(12.72655691714806)) ('sigma_M_LRG', np.float64(0.19177536592193645))
[Interation 27] ('M_0_LRG', np.float64(12.530715110290753)) ('M_1_LRG', np.float64(13.835815333519081)) ('alpha_LRG', np.float64(1.085032723333308)) ('f_sigv_LRG', np.float64(0.9380777313183647)) ('log_Mcent_LRG', np.float64(12.722166578631713)) ('sigma_M_LRG', np.float64(0.17981551912627824))
[Interation 27] ('M_0_LRG', np.float64(12.592228985643928)) ('M_1_LRG', np.float64(13.829579821167497)) ('alpha_LRG', np.float64(1.069993496497957)) ('f_sigv_LRG', np.float64(0.9325044841370688)) ('log_Mcent_LRG', np.float64(12.721023888996399)) ('sigma_M_LRG', np.float64(0.17708834516415506))
[Interation 27] ('M_0_LRG', np.float64(12.482574542339016)) ('M_1_LRG', np.float64(13.833271921943732)) ('alpha_LRG', np.float64(1.11535759435707)) ('f_sigv_LRG', np.float64(0.9452598463966432)) ('log_Mcent_LRG', np.float64(12.716295157626357)) ('sigma_M_LRG', np.float64(0.16245701148150737))
[Interation 27] ('M_0_LRG', np.float64(12.533408366528752)) ('M_1_LRG', np.float64(13.829544546541328)) ('alpha_LRG', np.float64(1.098546706612171)) ('f_sigv_LRG', np.float64(0.9259071097235629)) ('log_Mcent_LRG', np.float64(12.721896436655687)) ('sigma_M_LRG', np.float64(0.18541768750670007))
[Interation 27] ('M_0_LRG', np.float64(12.455632017011087)) ('M_1_LRG', np.float64(13.831408728770954)) ('alpha_LRG', np.float64(1.1260672756463972)) ('f_sigv_LRG', np.float64(0.9391778637980555)) ('log_Mcent_LRG', np.float64(12.704883841622772)) ('sigma_M_LRG', np.float64(0.14298526665353528))
[Interation 27] chi2=469.64676485256865
[Interation 27] chi2=490.4341369010754
[Interation 27] chi2=491.36912694334166
[Interation 27] chi2=546.7364130194939
[Interation 27] chi2=508.17286210379586
[Interation 27] chi2=503.8287990285791
[Interation 27] chi2=525.7284201786532
[Interation 27] chi2=525.5030002089184
[Interation 27] chi2=534.2972879343363
[Interation 27] chi2=489.90403087317935
[Interation 27] chi2=511.4707579733413
[Interation 27] chi2=569.915985045091
[Interation 28] ('M_0_LRG', np.float64(12.455631802191439)) ('M_1_LRG', np.float64(13.837319747679798)) ('alpha_LRG', np.float64(1.1417230289345666)) ('f_sigv_LRG', np.float64(0.9271661329573314)) ('log_Mcent_LRG', np.float64(12.728557265669018)) ('sigma_M_LRG', np.float64(0.18799575997534446))
[Interation 28] ('M_0_LRG', np.float64(12.595553370641186)) ('M_1_LRG', np.float64(13.8324229166267)) ('alpha_LRG', np.float64(1.0629583213142564)) ('f_sigv_LRG', np.float64(0.9371571178911617)) ('log_Mcent_LRG', np.float64(12.725363516345418)) ('sigma_M_LRG', np.float64(0.186088448347829))
[Interation 28] ('M_0_LRG', np.float64(12.586904282340331)) ('M_1_LRG', np.float64(13.83022129648325)) ('alpha_LRG', np.float64(1.0577609536055652)) ('f_sigv_LRG', np.float64(0.9355356159890842)) ('log_Mcent_LRG', np.float64(12.721870910778428)) ('sigma_M_LRG', np.float64(0.1864679326862077))
[Interation 28] ('M_0_LRG', np.float64(12.539820281282205)) ('M_1_LRG', np.float64(13.839850400717204)) ('alpha_LRG', np.float64(1.0975741344866694)) ('f_sigv_LRG', np.float64(0.9344233464161855)) ('log_Mcent_LRG', np.float64(12.73045815077322)) ('sigma_M_LRG', np.float64(0.18554420436434327))
[Interation 28] chi2=527.1572054859623
[Interation 28] chi2=547.5881780475315
[Interation 28] chi2=515.1470098256342
[Interation 28] chi2=499.06156801026765
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_11.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.56046433778037)) ('M_1_LRG', np.float64(13.825008109720798)) ('alpha_LRG', np.float64(1.07828699714931)) ('f_sigv_LRG', np.float64(0.9328433669508158)) ('log_Mcent_LRG', np.float64(12.709583871344114)) ('sigma_M_LRG', np.float64(0.15526168086704611))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3119521141052246
Start satellite assignement
Satellite assignement done 0.07613372802734375
LRG mock catalogue done 0.15168404579162598
608832 central galaxies, 91189 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6589829921722412
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_11.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:31
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.473072295819978)) ('M_1_LRG', np.float64(13.836005491451548)) ('alpha_LRG', np.float64(1.0949966492627914)) ('f_sigv_LRG', np.float64(0.9231673636637127)) ('log_Mcent_LRG', np.float64(12.748938054807153)) ('sigma_M_LRG', np.float64(0.27534208959417694))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.453989934149932)) ('M_1_LRG', np.float64(13.861782775346194)) ('alpha_LRG', np.float64(1.0953536006010747)) ('f_sigv_LRG', np.float64(1.0058233369680092)) ('log_Mcent_LRG', np.float64(12.728624280696707)) ('sigma_M_LRG', np.float64(0.1621245665565625))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.524029823978738)) ('M_1_LRG', np.float64(13.828426289299374)) ('alpha_LRG', np.float64(1.0853179505887383)) ('f_sigv_LRG', np.float64(0.9095044465800987)) ('log_Mcent_LRG', np.float64(12.719901960582389)) ('sigma_M_LRG', np.float64(0.1852298159383165))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.535914633249345)) ('M_1_LRG', np.float64(13.839023260975372)) ('alpha_LRG', np.float64(1.0399897200724704)) ('f_sigv_LRG', np.float64(0.9708207890654922)) ('log_Mcent_LRG', np.float64(12.707391949631806)) ('sigma_M_LRG', np.float64(0.15097745698432247))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.659214998526075)) ('M_1_LRG', np.float64(13.826900620622144)) ('alpha_LRG', np.float64(1.0138248180755882)) ('f_sigv_LRG', np.float64(0.9507581721680964)) ('log_Mcent_LRG', np.float64(12.73026171426809)) ('sigma_M_LRG', np.float64(0.2145216323048043))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.407166189525896)) ('M_1_LRG', np.float64(13.833785909658161)) ('alpha_LRG', np.float64(1.1752639370134916)) ('f_sigv_LRG', np.float64(0.975972257665807)) ('log_Mcent_LRG', np.float64(12.724739170734646)) ('sigma_M_LRG', np.float64(0.17385704635650762))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.727640863606926)) ('M_1_LRG', np.float64(13.842454198489019)) ('alpha_LRG', np.float64(0.9496348174807033)) ('f_sigv_LRG', np.float64(0.9299510369601311)) ('log_Mcent_LRG', np.float64(12.751912893975414)) ('sigma_M_LRG', np.float64(0.24697967420722472))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.613972974046762)) ('M_1_LRG', np.float64(13.833010580077753)) ('alpha_LRG', np.float64(1.0137871955528834)) ('f_sigv_LRG', np.float64(0.934109126511785)) ('log_Mcent_LRG', np.float64(12.730195999502927)) ('sigma_M_LRG', np.float64(0.2059111287848509))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.876880500929646)) ('M_1_LRG', np.float64(13.79694853017444)) ('alpha_LRG', np.float64(0.918806957964779)) ('f_sigv_LRG', np.float64(0.9603784794129685)) ('log_Mcent_LRG', np.float64(12.749488812660521)) ('sigma_M_LRG', np.float64(0.25268843704819743))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.41128423161525)) ('M_1_LRG', np.float64(13.874791772924873)) ('alpha_LRG', np.float64(1.116978063388685)) ('f_sigv_LRG', np.float64(0.9652444302486878)) ('log_Mcent_LRG', np.float64(12.76577399851816)) ('sigma_M_LRG', np.float64(0.2615691734289586))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.397698544412076)) ('M_1_LRG', np.float64(13.882819404942868)) ('alpha_LRG', np.float64(1.103048103202091)) ('f_sigv_LRG', np.float64(0.9721302658312634)) ('log_Mcent_LRG', np.float64(12.743489009435002)) ('sigma_M_LRG', np.float64(0.19788431757750274))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.586807748589923)) ('M_1_LRG', np.float64(13.78146733202355)) ('alpha_LRG', np.float64(1.063008587863549)) ('f_sigv_LRG', np.float64(0.9229083044945032)) ('log_Mcent_LRG', np.float64(12.705107796617249)) ('sigma_M_LRG', np.float64(0.19785753141264495))
[Interation 28] chi2=533.8193503339407
[Interation 28] chi2=509.1750420229671
[Interation 28] chi2=607.3376319240845
[Interation 28] chi2=531.5883943131922
[Interation 28] chi2=577.2577759931859
[Interation 28] chi2=520.7771358720361
[Interation 28] chi2=513.5654871351994
[Interation 28] chi2=557.312850733716
[Interation 28] chi2=746.9380713996406
[Interation 28] chi2=507.05771033444427
[Interation 28] chi2=541.8244076294479
[Interation 28] chi2=510.90093640781714
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 29] ('M_0_LRG', np.float64(12.595134124046531)) ('M_1_LRG', np.float64(13.820096717791596)) ('alpha_LRG', np.float64(1.0610696075132027)) ('f_sigv_LRG', np.float64(0.9456456475618913)) ('log_Mcent_LRG', np.float64(12.70758084859212)) ('sigma_M_LRG', np.float64(0.148707303790721))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 29] ('M_0_LRG', np.float64(12.428092123288137)) ('M_1_LRG', np.float64(13.838033238420044)) ('alpha_LRG', np.float64(1.119295986957684)) ('f_sigv_LRG', np.float64(0.9171895375259773)) ('log_Mcent_LRG', np.float64(12.72210406259746)) ('sigma_M_LRG', np.float64(0.20605277226562352))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 29] ('M_0_LRG', np.float64(12.463714889535032)) ('M_1_LRG', np.float64(13.813023341657807)) ('alpha_LRG', np.float64(1.1268937275587758)) ('f_sigv_LRG', np.float64(0.9360480511662774)) ('log_Mcent_LRG', np.float64(12.701006036551833)) ('sigma_M_LRG', np.float64(0.13507031964743482))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 29] ('M_0_LRG', np.float64(12.578724307236426)) ('M_1_LRG', np.float64(13.833193044061606)) ('alpha_LRG', np.float64(1.0891980180960663)) ('f_sigv_LRG', np.float64(0.9211391255127591)) ('log_Mcent_LRG', np.float64(12.736289159818675)) ('sigma_M_LRG', np.float64(0.21205019941091735))
[Interation 29] chi2=474.99991679806163
[Interation 29] chi2=548.7399780037347
[Interation 29] chi2=549.8191772325622
[Interation 29] chi2=511.3708044673124
[Interation 29] ('M_0_LRG', np.float64(12.52643915610932)) ('M_1_LRG', np.float64(13.817791950790545)) ('alpha_LRG', np.float64(1.0925564139579642)) ('f_sigv_LRG', np.float64(0.9510432609443946)) ('log_Mcent_LRG', np.float64(12.704912504353041)) ('sigma_M_LRG', np.float64(0.14013064437692085))
[Interation 29] ('M_0_LRG', np.float64(12.572191474516886)) ('M_1_LRG', np.float64(13.803453535103765)) ('alpha_LRG', np.float64(1.0857240685611702)) ('f_sigv_LRG', np.float64(0.9172036158035052)) ('log_Mcent_LRG', np.float64(12.698951712914315)) ('sigma_M_LRG', np.float64(0.139748513861092))
[Interation 29] ('M_0_LRG', np.float64(12.54276531277504)) ('M_1_LRG', np.float64(13.827163816056913)) ('alpha_LRG', np.float64(1.0854921008535192)) ('f_sigv_LRG', np.float64(0.9413531087151731)) ('log_Mcent_LRG', np.float64(12.714253037353608)) ('sigma_M_LRG', np.float64(0.15797610907170223))
[Interation 29] ('M_0_LRG', np.float64(12.548948391361499)) ('M_1_LRG', np.float64(13.82473469708541)) ('alpha_LRG', np.float64(1.0894094260616816)) ('f_sigv_LRG', np.float64(0.9426506334201524)) ('log_Mcent_LRG', np.float64(12.713005078962901)) ('sigma_M_LRG', np.float64(0.15757813738666843))
[Interation 29] ('M_0_LRG', np.float64(12.629487366107314)) ('M_1_LRG', np.float64(13.800359205915454)) ('alpha_LRG', np.float64(1.05614529999506)) ('f_sigv_LRG', np.float64(0.934924415395017)) ('log_Mcent_LRG', np.float64(12.700733889251543)) ('sigma_M_LRG', np.float64(0.1376316901786933))
[Interation 29] ('M_0_LRG', np.float64(12.554155469943675)) ('M_1_LRG', np.float64(13.823980540590012)) ('alpha_LRG', np.float64(1.0804745925166215)) ('f_sigv_LRG', np.float64(0.9375850653798954)) ('log_Mcent_LRG', np.float64(12.718421729322177)) ('sigma_M_LRG', np.float64(0.1830017670981252))
[Interation 29] ('M_0_LRG', np.float64(12.48476856777205)) ('M_1_LRG', np.float64(13.846840577802631)) ('alpha_LRG', np.float64(1.108546893358912)) ('f_sigv_LRG', np.float64(0.9510213928847392)) ('log_Mcent_LRG', np.float64(12.733447716078292)) ('sigma_M_LRG', np.float64(0.20012453551577009))
[Interation 29] ('M_0_LRG', np.float64(12.586420265040854)) ('M_1_LRG', np.float64(13.831297783937691)) ('alpha_LRG', np.float64(1.0540754631809104)) ('f_sigv_LRG', np.float64(0.9410988174229803)) ('log_Mcent_LRG', np.float64(12.729211835742152)) ('sigma_M_LRG', np.float64(0.20088554944277542))
[Interation 29] ('M_0_LRG', np.float64(12.642806660981957)) ('M_1_LRG', np.float64(13.808516718054424)) ('alpha_LRG', np.float64(1.0402933805634245)) ('f_sigv_LRG', np.float64(0.9424070521055541)) ('log_Mcent_LRG', np.float64(12.708664524021485)) ('sigma_M_LRG', np.float64(0.1522058428576638))
[Interation 29] ('M_0_LRG', np.float64(12.484086935713522)) ('M_1_LRG', np.float64(13.829741477026829)) ('alpha_LRG', np.float64(1.122277425898441)) ('f_sigv_LRG', np.float64(0.9424872137884398)) ('log_Mcent_LRG', np.float64(12.714566978363987)) ('sigma_M_LRG', np.float64(0.165592598494596))
[Interation 29] ('M_0_LRG', np.float64(12.582658490573898)) ('M_1_LRG', np.float64(13.81896672176291)) ('alpha_LRG', np.float64(1.067825839388512)) ('f_sigv_LRG', np.float64(0.9356211833048284)) ('log_Mcent_LRG', np.float64(12.718228308641773)) ('sigma_M_LRG', np.float64(0.1803061651467996))
[Interation 29] ('M_0_LRG', np.float64(12.594086403505784)) ('M_1_LRG', np.float64(13.828594184597184)) ('alpha_LRG', np.float64(1.0481934454641377)) ('f_sigv_LRG', np.float64(0.9341146093641629)) ('log_Mcent_LRG', np.float64(12.720926539430884)) ('sigma_M_LRG', np.float64(0.1798953466143144))
[Interation 29] chi2=495.9027665602633
[Interation 29] chi2=543.3185649330192
[Interation 29] chi2=481.9018756911287
[Interation 29] chi2=541.9411128835385
[Interation 29] chi2=481.9826942479058
[Interation 29] chi2=468.94227945973086
[Interation 29] chi2=492.4450390536091
[Interation 29] chi2=470.2160878018481
[Interation 29] chi2=521.9098070329953
[Interation 29] chi2=453.05561720765064
[Interation 29] chi2=466.8757777315488
[Interation 29] chi2=460.9552917993026
[Interation 30] ('M_0_LRG', np.float64(12.551026216939322)) ('M_1_LRG', np.float64(13.806384809649318)) ('alpha_LRG', np.float64(1.102419668262342)) ('f_sigv_LRG', np.float64(0.9378850767060609)) ('log_Mcent_LRG', np.float64(12.698321449361442)) ('sigma_M_LRG', np.float64(0.1315327961724424))
[Interation 30] ('M_0_LRG', np.float64(12.5672745959148)) ('M_1_LRG', np.float64(13.807903443334942)) ('alpha_LRG', np.float64(1.0964509849844768)) ('f_sigv_LRG', np.float64(0.9307436083647779)) ('log_Mcent_LRG', np.float64(12.704164558931309)) ('sigma_M_LRG', np.float64(0.14428595993721466))
[Interation 30] ('M_0_LRG', np.float64(12.673492782199622)) ('M_1_LRG', np.float64(13.775938614334768)) ('alpha_LRG', np.float64(1.0537722225491275)) ('f_sigv_LRG', np.float64(0.9321812030376384)) ('log_Mcent_LRG', np.float64(12.686653042581346)) ('sigma_M_LRG', np.float64(0.10965060860656634))
[Interation 30] ('M_0_LRG', np.float64(12.578541519557078)) ('M_1_LRG', np.float64(13.812901487888881)) ('alpha_LRG', np.float64(1.0836157802564572)) ('f_sigv_LRG', np.float64(0.9268587819126995)) ('log_Mcent_LRG', np.float64(12.708533541295274)) ('sigma_M_LRG', np.float64(0.15196118010573845))
[Interation 30] chi2=499.37718910825765
[Interation 30] chi2=420.07349866606046
[Interation 30] chi2=565.9961099014411
[Interation 30] chi2=535.6429278467701
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_12.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.614095622775253)) ('M_1_LRG', np.float64(13.800592497680812)) ('alpha_LRG', np.float64(1.0526334034084757)) ('f_sigv_LRG', np.float64(0.9279722539365804)) ('log_Mcent_LRG', np.float64(12.699723450415954)) ('sigma_M_LRG', np.float64(0.13597837293609516))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.31619858741760254
Start satellite assignement
Satellite assignement done 0.0747830867767334
LRG mock catalogue done 0.1469097137451172
608665 central galaxies, 91881 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6338691711425781
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_12.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:34
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:34
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:34
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:36
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:36
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:36
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:36
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:36
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:36
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:37
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:37
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:37
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:37
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:37
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:37
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:38
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:38
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:38
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:38
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:38
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:38
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:32
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:32
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:39
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:40
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:40
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:40
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:40
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:40
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:40
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:40
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.391605050591519)) ('M_1_LRG', np.float64(13.239101356229678)) ('alpha_LRG', np.float64(1.0369889085902773)) ('f_sigv_LRG', np.float64(1.0716952615965958)) ('log_Mcent_LRG', np.float64(12.602441273220608)) ('sigma_M_LRG', np.float64(0.45164146795515164))
[Interation 30] chi2=10456.26256098952
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.663867298709704)) ('M_1_LRG', np.float64(13.850331726734398)) ('alpha_LRG', np.float64(1.1278064989140706)) ('f_sigv_LRG', np.float64(0.7243352030583168)) ('log_Mcent_LRG', np.float64(12.837171773262451)) ('sigma_M_LRG', np.float64(0.3899452856776885))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(13.051321099558997)) ('M_1_LRG', np.float64(13.333658477344354)) ('alpha_LRG', np.float64(1.0715047779561844)) ('f_sigv_LRG', np.float64(0.89120310661496)) ('log_Mcent_LRG', np.float64(12.775230592303693)) ('sigma_M_LRG', np.float64(0.4730949948309229))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.77435800475866)) ('M_1_LRG', np.float64(13.806167600306793)) ('alpha_LRG', np.float64(1.2081596953920029)) ('f_sigv_LRG', np.float64(0.6224903738283132)) ('log_Mcent_LRG', np.float64(12.7910872109795)) ('sigma_M_LRG', np.float64(0.4129281267001884))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.628396589557394)) ('M_1_LRG', np.float64(13.717844580425965)) ('alpha_LRG', np.float64(1.0810135372778356)) ('f_sigv_LRG', np.float64(0.9027594183525927)) ('log_Mcent_LRG', np.float64(12.727331001015596)) ('sigma_M_LRG', np.float64(0.29059231051042433))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.518202851456799)) ('M_1_LRG', np.float64(13.909293561946496)) ('alpha_LRG', np.float64(0.9090351643943761)) ('f_sigv_LRG', np.float64(1.0237219939192366)) ('log_Mcent_LRG', np.float64(12.729593546069662)) ('sigma_M_LRG', np.float64(0.20574046344478508))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.512712421314463)) ('M_1_LRG', np.float64(13.77565124731317)) ('alpha_LRG', np.float64(1.1688304261576759)) ('f_sigv_LRG', np.float64(0.8539643792949317)) ('log_Mcent_LRG', np.float64(12.765773206570856)) ('sigma_M_LRG', np.float64(0.3708977717609535))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.73788264019227)) ('M_1_LRG', np.float64(13.60102157668122)) ('alpha_LRG', np.float64(1.0081790201368976)) ('f_sigv_LRG', np.float64(0.7831798971743205)) ('log_Mcent_LRG', np.float64(12.48154654344306)) ('sigma_M_LRG', np.float64(0.21399896582562106))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.79038190256046)) ('M_1_LRG', np.float64(13.785380319784498)) ('alpha_LRG', np.float64(0.994062323650235)) ('f_sigv_LRG', np.float64(1.0083765924805028)) ('log_Mcent_LRG', np.float64(12.774251523956504)) ('sigma_M_LRG', np.float64(0.31259013463352253))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.4595490994987)) ('M_1_LRG', np.float64(13.587008616567477)) ('alpha_LRG', np.float64(1.016902028814191)) ('f_sigv_LRG', np.float64(0.9429431816544774)) ('log_Mcent_LRG', np.float64(12.816384073507965)) ('sigma_M_LRG', np.float64(0.6462995280084749))
[Interation 30] chi2=1086.347836498889
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.757908216076084)) ('M_1_LRG', np.float64(13.874801917103525)) ('alpha_LRG', np.float64(1.2154511506231733)) ('f_sigv_LRG', np.float64(1.1316660180425968)) ('log_Mcent_LRG', np.float64(12.89539290271663)) ('sigma_M_LRG', np.float64(0.33574071211463485))
[Interation 30] chi2=17696.472977633966
[Interation 30] chi2=1814.1269521078793
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.205738285109112)) ('M_1_LRG', np.float64(13.248781303337834)) ('alpha_LRG', np.float64(0.5999138700920403)) ('f_sigv_LRG', np.float64(0.9407549391151335)) ('log_Mcent_LRG', np.float64(12.372003369870832)) ('sigma_M_LRG', np.float64(0.3751042390259995))
[Interation 30] chi2=877.1179780255333
[Interation 30] chi2=832.2845044410819
[Interation 30] chi2=772.1614288883583
[Interation 30] chi2=889.9071447967369
[Interation 30] chi2=6343.957806345737
[Interation 30] chi2=5584.659705126207
[Interation 30] chi2=3390.3249116125617
[Interation 30] chi2=11141.805603832825
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 31] ('M_0_LRG', np.float64(12.271564852139825)) ('M_1_LRG', np.float64(13.828899390617144)) ('alpha_LRG', np.float64(1.2240560217641505)) ('f_sigv_LRG', np.float64(0.559724096788292)) ('log_Mcent_LRG', np.float64(12.686246708953783)) ('sigma_M_LRG', np.float64(0.3619768322572505))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 31] ('M_0_LRG', np.float64(12.664177632277646)) ('M_1_LRG', np.float64(13.681271921580931)) ('alpha_LRG', np.float64(1.1200868771979835)) ('f_sigv_LRG', np.float64(0.8855391456503292)) ('log_Mcent_LRG', np.float64(12.751459441396364)) ('sigma_M_LRG', np.float64(0.32847829398300354))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 31] ('M_0_LRG', np.float64(12.4375120101432)) ('M_1_LRG', np.float64(14.137401620359574)) ('alpha_LRG', np.float64(0.9379594138095028)) ('f_sigv_LRG', np.float64(1.149730887317481)) ('log_Mcent_LRG', np.float64(12.843554280683131)) ('sigma_M_LRG', np.float64(0.17228174054107676))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 31] ('M_0_LRG', np.float64(12.382068703026087)) ('M_1_LRG', np.float64(13.845720336021245)) ('alpha_LRG', np.float64(1.0583503976866877)) ('f_sigv_LRG', np.float64(1.0426604588803456)) ('log_Mcent_LRG', np.float64(12.794403749330938)) ('sigma_M_LRG', np.float64(0.47382260703125667))
[Interation 31] chi2=3023.0258774639133
[Interation 31] chi2=1498.293815808663
[Interation 31] chi2=1641.5669118138387
[Interation 31] chi2=2910.2365916597114
[Interation 31] ('M_0_LRG', np.float64(12.491456192239713)) ('M_1_LRG', np.float64(13.847554295623254)) ('alpha_LRG', np.float64(1.0989761279826742)) ('f_sigv_LRG', np.float64(0.9542848167738799)) ('log_Mcent_LRG', np.float64(12.72539861302315)) ('sigma_M_LRG', np.float64(0.1756013512386942))
[Interation 31] ('M_0_LRG', np.float64(12.440308084301689)) ('M_1_LRG', np.float64(13.853148000708881)) ('alpha_LRG', np.float64(1.131691983980346)) ('f_sigv_LRG', np.float64(0.967785555801562)) ('log_Mcent_LRG', np.float64(12.742676406127929)) ('sigma_M_LRG', np.float64(0.20721859041425789))
[Interation 31] ('M_0_LRG', np.float64(12.494511665092418)) ('M_1_LRG', np.float64(13.799384090578853)) ('alpha_LRG', np.float64(1.1276554528987135)) ('f_sigv_LRG', np.float64(0.9508391134668304)) ('log_Mcent_LRG', np.float64(12.689332013050368)) ('sigma_M_LRG', np.float64(0.11904787838035347))
[Interation 31] ('M_0_LRG', np.float64(12.54412683408884)) ('M_1_LRG', np.float64(13.824660535757376)) ('alpha_LRG', np.float64(1.1110467946001736)) ('f_sigv_LRG', np.float64(0.9459411639150611)) ('log_Mcent_LRG', np.float64(12.715994767298492)) ('sigma_M_LRG', np.float64(0.15663009586948234))
[Interation 31] ('M_0_LRG', np.float64(12.491081823269905)) ('M_1_LRG', np.float64(13.815855843466535)) ('alpha_LRG', np.float64(1.1009044617282797)) ('f_sigv_LRG', np.float64(0.9233332218417388)) ('log_Mcent_LRG', np.float64(12.703827183770121)) ('sigma_M_LRG', np.float64(0.16694499745337227))
[Interation 31] ('M_0_LRG', np.float64(12.488136869909187)) ('M_1_LRG', np.float64(13.808106346272284)) ('alpha_LRG', np.float64(1.1230246748471413)) ('f_sigv_LRG', np.float64(0.9207946631720499)) ('log_Mcent_LRG', np.float64(12.709781633200999)) ('sigma_M_LRG', np.float64(0.17271517907211542))
[Interation 31] ('M_0_LRG', np.float64(12.513925010143343)) ('M_1_LRG', np.float64(13.821632280696175)) ('alpha_LRG', np.float64(1.099191098921169)) ('f_sigv_LRG', np.float64(0.9429459787845831)) ('log_Mcent_LRG', np.float64(12.712218229519994)) ('sigma_M_LRG', np.float64(0.17083063484575767))
[Interation 31] ('M_0_LRG', np.float64(12.48467484147181)) ('M_1_LRG', np.float64(13.868284199065306)) ('alpha_LRG', np.float64(1.0908234892750779)) ('f_sigv_LRG', np.float64(0.9418948315274129)) ('log_Mcent_LRG', np.float64(12.755833883101205)) ('sigma_M_LRG', np.float64(0.2515308304745473))
[Interation 31] ('M_0_LRG', np.float64(12.429608119751045)) ('M_1_LRG', np.float64(13.85425273949088)) ('alpha_LRG', np.float64(1.1215289978621557)) ('f_sigv_LRG', np.float64(0.9562041497455975)) ('log_Mcent_LRG', np.float64(12.73408327973818)) ('sigma_M_LRG', np.float64(0.19738989077797742))
[Interation 31] ('M_0_LRG', np.float64(12.468526212690591)) ('M_1_LRG', np.float64(13.849151925653663)) ('alpha_LRG', np.float64(1.1036523467070578)) ('f_sigv_LRG', np.float64(0.9401555416042248)) ('log_Mcent_LRG', np.float64(12.720648878958194)) ('sigma_M_LRG', np.float64(0.16725680509144786))
[Interation 31] ('M_0_LRG', np.float64(12.458132765022016)) ('M_1_LRG', np.float64(13.873432234345803)) ('alpha_LRG', np.float64(1.1190909648529952)) ('f_sigv_LRG', np.float64(0.9532132759982441)) ('log_Mcent_LRG', np.float64(12.750725979435312)) ('sigma_M_LRG', np.float64(0.22359100663793102))
[Interation 31] ('M_0_LRG', np.float64(12.567142518533657)) ('M_1_LRG', np.float64(13.85130517772241)) ('alpha_LRG', np.float64(1.0781703489298577)) ('f_sigv_LRG', np.float64(0.9280919013658911)) ('log_Mcent_LRG', np.float64(12.749358282425037)) ('sigma_M_LRG', np.float64(0.23757377657524176))
[Interation 31] chi2=515.9707945293137
[Interation 32] ('M_0_LRG', np.float64(12.471101109258278)) ('M_1_LRG', np.float64(13.819722343448985)) ('alpha_LRG', np.float64(1.1353269345966108)) ('f_sigv_LRG', np.float64(0.9079150651656632)) ('log_Mcent_LRG', np.float64(12.722431870736758)) ('sigma_M_LRG', np.float64(0.20797282208830875))
[Interation 32] ('M_0_LRG', np.float64(12.452084754084119)) ('M_1_LRG', np.float64(13.84867145572093)) ('alpha_LRG', np.float64(1.095981808959386)) ('f_sigv_LRG', np.float64(0.9420243524263876)) ('log_Mcent_LRG', np.float64(12.725154270129774)) ('sigma_M_LRG', np.float64(0.16799998512973913))
[Interation 31] chi2=506.360213510206
[Interation 31] chi2=618.8975208533936
[Interation 31] chi2=484.3446934942656
[Interation 31] chi2=599.3051785021919
[Interation 32] ('M_0_LRG', np.float64(12.495104683627678)) ('M_1_LRG', np.float64(13.816057031743894)) ('alpha_LRG', np.float64(1.106588341825638)) ('f_sigv_LRG', np.float64(0.9284102015641957)) ('log_Mcent_LRG', np.float64(12.704454101335728)) ('sigma_M_LRG', np.float64(0.15498587229511823))
[Interation 31] chi2=512.4548876032547
[Interation 31] chi2=553.5677612490376
[Interation 31] chi2=510.3497714857672
[Interation 31] chi2=498.9579037195205
[Interation 32] ('M_0_LRG', np.float64(12.603484285610579)) ('M_1_LRG', np.float64(13.81763624276241)) ('alpha_LRG', np.float64(1.0758863984133054)) ('f_sigv_LRG', np.float64(0.9475068014826175)) ('log_Mcent_LRG', np.float64(12.714092653491782)) ('sigma_M_LRG', np.float64(0.1619999980362956))
[Interation 31] chi2=469.6496313227434
[Interation 31] chi2=508.01531532963344
[Interation 31] chi2=449.4199431873807
[Interation 32] chi2=480.8323897846143
[Interation 32] chi2=517.7779645340912
[Interation 32] chi2=479.10841794969843
[Interation 32] chi2=404.44912647241955
[Interation 33] ('M_0_LRG', np.float64(12.554310524708281)) ('M_1_LRG', np.float64(13.830772592738818)) ('alpha_LRG', np.float64(1.0843923686660737)) ('f_sigv_LRG', np.float64(0.939772449577883)) ('log_Mcent_LRG', np.float64(12.717767119092485)) ('sigma_M_LRG', np.float64(0.17152005551978372))
[Interation 33] ('M_0_LRG', np.float64(12.57592025954204)) ('M_1_LRG', np.float64(13.822034301655405)) ('alpha_LRG', np.float64(1.0889940937374774)) ('f_sigv_LRG', np.float64(0.9369468686931386)) ('log_Mcent_LRG', np.float64(12.721033856098078)) ('sigma_M_LRG', np.float64(0.18225723137848443))
[Interation 33] ('M_0_LRG', np.float64(12.572832279302268)) ('M_1_LRG', np.float64(13.816040755905254)) ('alpha_LRG', np.float64(1.0717487015707936)) ('f_sigv_LRG', np.float64(0.9341859739911057)) ('log_Mcent_LRG', np.float64(12.70715365330567)) ('sigma_M_LRG', np.float64(0.15512924894258134))
[Interation 33] ('M_0_LRG', np.float64(12.557127551718862)) ('M_1_LRG', np.float64(13.837750782888707)) ('alpha_LRG', np.float64(1.0877577805452636)) ('f_sigv_LRG', np.float64(0.9378246347420798)) ('log_Mcent_LRG', np.float64(12.73371795513483)) ('sigma_M_LRG', np.float64(0.20812096891558785))
[Interation 33] chi2=462.53154187255666
[Interation 33] chi2=505.7553972551513
[Interation 33] chi2=496.23301396283006
[Interation 33] chi2=531.2174333228962
[Interation 32] ('M_0_LRG', np.float64(12.533539361952721)) ('M_1_LRG', np.float64(13.824603470121676)) ('alpha_LRG', np.float64(1.0905373130729545)) ('f_sigv_LRG', np.float64(0.9391045627261501)) ('log_Mcent_LRG', np.float64(12.713862136995308)) ('sigma_M_LRG', np.float64(0.16419452688938369))
[Interation 32] ('M_0_LRG', np.float64(12.559078356059365)) ('M_1_LRG', np.float64(13.823754640455828)) ('alpha_LRG', np.float64(1.0801584280097871)) ('f_sigv_LRG', np.float64(0.9352235066588139)) ('log_Mcent_LRG', np.float64(12.708238759286765)) ('sigma_M_LRG', np.float64(0.15206268649063653))
[Interation 32] ('M_0_LRG', np.float64(12.533473753442616)) ('M_1_LRG', np.float64(13.822606097860595)) ('alpha_LRG', np.float64(1.0969161964727838)) ('f_sigv_LRG', np.float64(0.9387715964439611)) ('log_Mcent_LRG', np.float64(12.70845190092905)) ('sigma_M_LRG', np.float64(0.15038120987787518))
[Interation 32] ('M_0_LRG', np.float64(12.54450648143284)) ('M_1_LRG', np.float64(13.835540723913251)) ('alpha_LRG', np.float64(1.0884372536789153)) ('f_sigv_LRG', np.float64(0.9349280724177229)) ('log_Mcent_LRG', np.float64(12.72325042460752)) ('sigma_M_LRG', np.float64(0.18367206626292237))
[Interation 32] ('M_0_LRG', np.float64(12.548506745201657)) ('M_1_LRG', np.float64(13.830461749853109)) ('alpha_LRG', np.float64(1.0884328656987545)) ('f_sigv_LRG', np.float64(0.9362487428249382)) ('log_Mcent_LRG', np.float64(12.718889819615484)) ('sigma_M_LRG', np.float64(0.1741197343830661))
[Interation 32] ('M_0_LRG', np.float64(12.546694147392856)) ('M_1_LRG', np.float64(13.81761352854444)) ('alpha_LRG', np.float64(1.0910208231101266)) ('f_sigv_LRG', np.float64(0.9292976479776522)) ('log_Mcent_LRG', np.float64(12.70727641919487)) ('sigma_M_LRG', np.float64(0.15525216346215898))
[Interation 32] ('M_0_LRG', np.float64(12.549822853041206)) ('M_1_LRG', np.float64(13.834357964204827)) ('alpha_LRG', np.float64(1.084912652696127)) ('f_sigv_LRG', np.float64(0.9362903491908305)) ('log_Mcent_LRG', np.float64(12.720369360109858)) ('sigma_M_LRG', np.float64(0.16942012957950658))
[Interation 32] ('M_0_LRG', np.float64(12.550472725094771)) ('M_1_LRG', np.float64(13.816753284970748)) ('alpha_LRG', np.float64(1.0891268772408662)) ('f_sigv_LRG', np.float64(0.9294464753893895)) ('log_Mcent_LRG', np.float64(12.710191833734067)) ('sigma_M_LRG', np.float64(0.1641186295332583))
[Interation 32] ('M_0_LRG', np.float64(12.544185331340033)) ('M_1_LRG', np.float64(13.821966611687753)) ('alpha_LRG', np.float64(1.0815455476947333)) ('f_sigv_LRG', np.float64(0.9270974744557055)) ('log_Mcent_LRG', np.float64(12.714416819625582)) ('sigma_M_LRG', np.float64(0.17750381159932144))
[Interation 32] ('M_0_LRG', np.float64(12.53039824390113)) ('M_1_LRG', np.float64(13.822291443470114)) ('alpha_LRG', np.float64(1.1005797408313212)) ('f_sigv_LRG', np.float64(0.9274794624163833)) ('log_Mcent_LRG', np.float64(12.708175321154162)) ('sigma_M_LRG', np.float64(0.1513310932922573))
[Interation 32] ('M_0_LRG', np.float64(12.530373224565128)) ('M_1_LRG', np.float64(13.821651454831134)) ('alpha_LRG', np.float64(1.0924803440105986)) ('f_sigv_LRG', np.float64(0.9368478204750664)) ('log_Mcent_LRG', np.float64(12.706821091777094)) ('sigma_M_LRG', np.float64(0.14875318747300387))
[Interation 32] ('M_0_LRG', np.float64(12.555801413622124)) ('M_1_LRG', np.float64(13.827851905339594)) ('alpha_LRG', np.float64(1.0841356098663295)) ('f_sigv_LRG', np.float64(0.9376524702967771)) ('log_Mcent_LRG', np.float64(12.721299716360667)) ('sigma_M_LRG', np.float64(0.17796343734530828))
[Interation 32] chi2=466.7398310363292
[Interation 32] chi2=495.02040114280175
[Interation 32] chi2=532.3796451595114
[Interation 32] chi2=486.4195515770125
[Interation 32] chi2=481.60309354663553
[Interation 32] chi2=483.75863384471194
[Interation 32] chi2=523.1839561333984
[Interation 32] chi2=498.3844659713669
[Interation 32] chi2=546.8046862067142
[Interation 32] chi2=513.072078240389
[Interation 32] chi2=464.08922890055936
[Interation 32] chi2=530.3672551089883
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_13.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.546972235214486)) ('M_1_LRG', np.float64(13.813510902700147)) ('alpha_LRG', np.float64(1.0957737352901578)) ('f_sigv_LRG', np.float64(0.9286040635330355)) ('log_Mcent_LRG', np.float64(12.708092382977696)) ('sigma_M_LRG', np.float64(0.16145334780600173))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.31304144859313965
Start satellite assignement
Satellite assignement done 0.0840752124786377
LRG mock catalogue done 0.16103696823120117
607093 central galaxies, 91419 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6607620716094971
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_13.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:28
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:28
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 34] ('M_0_LRG', np.float64(12.493109473170701)) ('M_1_LRG', np.float64(13.888776688451623)) ('alpha_LRG', np.float64(1.0366468897780232)) ('f_sigv_LRG', np.float64(0.9887221375513152)) ('log_Mcent_LRG', np.float64(12.774535661182197)) ('sigma_M_LRG', np.float64(0.26321229201872837))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 34] ('M_0_LRG', np.float64(12.486266463295333)) ('M_1_LRG', np.float64(13.82585556781128)) ('alpha_LRG', np.float64(1.144881229491104)) ('f_sigv_LRG', np.float64(0.9141808917337795)) ('log_Mcent_LRG', np.float64(12.719878027351875)) ('sigma_M_LRG', np.float64(0.17819325639779415))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 34] ('M_0_LRG', np.float64(12.552413447113375)) ('M_1_LRG', np.float64(13.837036251582074)) ('alpha_LRG', np.float64(1.0690724688292257)) ('f_sigv_LRG', np.float64(0.9050230126848634)) ('log_Mcent_LRG', np.float64(12.73975751108403)) ('sigma_M_LRG', np.float64(0.22943689959174973))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 34] ('M_0_LRG', np.float64(12.450399860433805)) ('M_1_LRG', np.float64(13.873978758275593)) ('alpha_LRG', np.float64(1.1209473877845457)) ('f_sigv_LRG', np.float64(0.9310955331888271)) ('log_Mcent_LRG', np.float64(12.768752970668274)) ('sigma_M_LRG', np.float64(0.25696242186987983))
[Interation 34] chi2=567.3049098566167
[Interation 34] chi2=500.0108977451375
[Interation 34] chi2=557.9266332830979
[Interation 34] chi2=507.35186970366755
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.30336625230507)) ('M_1_LRG', np.float64(13.835276398157811)) ('alpha_LRG', np.float64(1.1922095991322936)) ('f_sigv_LRG', np.float64(0.9616015453734231)) ('log_Mcent_LRG', np.float64(12.702160637685191)) ('sigma_M_LRG', np.float64(0.14867600046706697))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.675289296485587)) ('M_1_LRG', np.float64(13.796062438200249)) ('alpha_LRG', np.float64(1.0425097513271577)) ('f_sigv_LRG', np.float64(0.9604926977130218)) ('log_Mcent_LRG', np.float64(12.686323370392907)) ('sigma_M_LRG', np.float64(0.11270102818176453))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.591890137800968)) ('M_1_LRG', np.float64(13.865043133149005)) ('alpha_LRG', np.float64(1.0509404262526136)) ('f_sigv_LRG', np.float64(0.9593613387018386)) ('log_Mcent_LRG', np.float64(12.76510909537381)) ('sigma_M_LRG', np.float64(0.2602580952028481))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.436325117434485)) ('M_1_LRG', np.float64(13.855513815554364)) ('alpha_LRG', np.float64(1.1581688171043671)) ('f_sigv_LRG', np.float64(0.9379572230753914)) ('log_Mcent_LRG', np.float64(12.725368512388822)) ('sigma_M_LRG', np.float64(0.14938432686235686))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.659583520254083)) ('M_1_LRG', np.float64(13.846351589916813)) ('alpha_LRG', np.float64(1.008762671793325)) ('f_sigv_LRG', np.float64(0.9201281670652215)) ('log_Mcent_LRG', np.float64(12.745615544080225)) ('sigma_M_LRG', np.float64(0.22806548146617833))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.470068970902098)) ('M_1_LRG', np.float64(13.829946224202468)) ('alpha_LRG', np.float64(1.1366509332125097)) ('f_sigv_LRG', np.float64(0.9233136013238866)) ('log_Mcent_LRG', np.float64(12.739475308054397)) ('sigma_M_LRG', np.float64(0.2252283065931711))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.701140915341233)) ('M_1_LRG', np.float64(13.832136336274326)) ('alpha_LRG', np.float64(0.9963936756163873)) ('f_sigv_LRG', np.float64(0.9267237991252983)) ('log_Mcent_LRG', np.float64(12.74816470513387)) ('sigma_M_LRG', np.float64(0.25125149725790424))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.62600308953368)) ('M_1_LRG', np.float64(13.819925860056816)) ('alpha_LRG', np.float64(1.0526733020064594)) ('f_sigv_LRG', np.float64(0.9365709336417315)) ('log_Mcent_LRG', np.float64(12.736087707827794)) ('sigma_M_LRG', np.float64(0.22457799907708564))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.60866309707509)) ('M_1_LRG', np.float64(13.84399233102631)) ('alpha_LRG', np.float64(1.0419649690740602)) ('f_sigv_LRG', np.float64(0.8881637556621242)) ('log_Mcent_LRG', np.float64(12.764242577228138)) ('sigma_M_LRG', np.float64(0.29416875764253925))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.579314664514367)) ('M_1_LRG', np.float64(13.81536031816376)) ('alpha_LRG', np.float64(1.0712641617424004)) ('f_sigv_LRG', np.float64(0.907153831345509)) ('log_Mcent_LRG', np.float64(12.723134234923354)) ('sigma_M_LRG', np.float64(0.22718135985572574))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.420444047369358)) ('M_1_LRG', np.float64(13.85188127718031)) ('alpha_LRG', np.float64(1.1140265262595244)) ('f_sigv_LRG', np.float64(0.9094553254059292)) ('log_Mcent_LRG', np.float64(12.72695126725505)) ('sigma_M_LRG', np.float64(0.2015694550334876))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.458335117738958)) ('M_1_LRG', np.float64(13.858972250073238)) ('alpha_LRG', np.float64(1.1349144767103636)) ('f_sigv_LRG', np.float64(0.9083468273227061)) ('log_Mcent_LRG', np.float64(12.746326447139515)) ('sigma_M_LRG', np.float64(0.21276320492646156))
[Interation 33] chi2=523.9289706962138
[Interation 33] chi2=615.0881088317551
[Interation 33] chi2=682.0844750706923
[Interation 33] chi2=520.16171984308
[Interation 33] chi2=473.49507510461893
[Interation 33] chi2=497.6548548731272
[Interation 33] chi2=503.4681813659164
[Interation 33] chi2=525.7010986259509
[Interation 33] chi2=541.004583105351
[Interation 33] chi2=572.6546678189159
[Interation 33] chi2=535.5603322202707
[Interation 33] chi2=463.2044516322188
[Interation 35] ('M_0_LRG', np.float64(12.570357962872794)) ('M_1_LRG', np.float64(13.82242788006566)) ('alpha_LRG', np.float64(1.0840552095632943)) ('f_sigv_LRG', np.float64(0.9227535112699196)) ('log_Mcent_LRG', np.float64(12.722703755888162)) ('sigma_M_LRG', np.float64(0.19366723103049238))
[Interation 35] ('M_0_LRG', np.float64(12.543863830283732)) ('M_1_LRG', np.float64(13.83193853133482)) ('alpha_LRG', np.float64(1.087711815515409)) ('f_sigv_LRG', np.float64(0.9375149978609754)) ('log_Mcent_LRG', np.float64(12.730095256019888)) ('sigma_M_LRG', np.float64(0.2005690981771952))
[Interation 35] ('M_0_LRG', np.float64(12.532349257995971)) ('M_1_LRG', np.float64(13.824989331462447)) ('alpha_LRG', np.float64(1.0902285358738453)) ('f_sigv_LRG', np.float64(0.9244889320365492)) ('log_Mcent_LRG', np.float64(12.71497574569995)) ('sigma_M_LRG', np.float64(0.16926026958532586))
[Interation 35] ('M_0_LRG', np.float64(12.553718759538283)) ('M_1_LRG', np.float64(13.822558896600274)) ('alpha_LRG', np.float64(1.0731368378967474)) ('f_sigv_LRG', np.float64(0.9488682361446176)) ('log_Mcent_LRG', np.float64(12.709274589727436)) ('sigma_M_LRG', np.float64(0.1509570582251915))
[Interation 35] chi2=506.83860283948724
[Interation 35] chi2=497.593304286174
[Interation 35] chi2=491.6247046907784
[Interation 35] chi2=440.63819969872344
[Interation 34] ('M_0_LRG', np.float64(12.371147290777586)) ('M_1_LRG', np.float64(13.849660046643848)) ('alpha_LRG', np.float64(1.14812637225435)) ('f_sigv_LRG', np.float64(0.9270344363979769)) ('log_Mcent_LRG', np.float64(12.720198050563745)) ('sigma_M_LRG', np.float64(0.16921361646504446))
[Interation 34] ('M_0_LRG', np.float64(12.43786200900956)) ('M_1_LRG', np.float64(13.847268860466372)) ('alpha_LRG', np.float64(1.1167393531391814)) ('f_sigv_LRG', np.float64(0.9342041966417292)) ('log_Mcent_LRG', np.float64(12.73099456634173)) ('sigma_M_LRG', np.float64(0.1981974402880668))
[Interation 34] ('M_0_LRG', np.float64(12.38635411871157)) ('M_1_LRG', np.float64(13.856789237651535)) ('alpha_LRG', np.float64(1.1438331738211633)) ('f_sigv_LRG', np.float64(0.9367085591967172)) ('log_Mcent_LRG', np.float64(12.733984893845863)) ('sigma_M_LRG', np.float64(0.20006840923162644))
[Interation 34] ('M_0_LRG', np.float64(12.496347524863294)) ('M_1_LRG', np.float64(13.840929437890097)) ('alpha_LRG', np.float64(1.0976108079554798)) ('f_sigv_LRG', np.float64(0.9345295885124645)) ('log_Mcent_LRG', np.float64(12.728408569239738)) ('sigma_M_LRG', np.float64(0.19412182551675372))
[Interation 34] ('M_0_LRG', np.float64(12.573978741898808)) ('M_1_LRG', np.float64(13.804820675483663)) ('alpha_LRG', np.float64(1.0863139380915992)) ('f_sigv_LRG', np.float64(0.9239170289137271)) ('log_Mcent_LRG', np.float64(12.699948244490141)) ('sigma_M_LRG', np.float64(0.1429242533547827))
[Interation 34] ('M_0_LRG', np.float64(12.559781703784266)) ('M_1_LRG', np.float64(13.806592724122632)) ('alpha_LRG', np.float64(1.1048864628264614)) ('f_sigv_LRG', np.float64(0.9248928283237284)) ('log_Mcent_LRG', np.float64(12.700483970896096)) ('sigma_M_LRG', np.float64(0.14309858420883448))
[Interation 34] ('M_0_LRG', np.float64(12.444150893511825)) ('M_1_LRG', np.float64(13.837786128636242)) ('alpha_LRG', np.float64(1.1263601692754956)) ('f_sigv_LRG', np.float64(0.9269996076046273)) ('log_Mcent_LRG', np.float64(12.716270569963287)) ('sigma_M_LRG', np.float64(0.16622941596266633))
[Interation 34] ('M_0_LRG', np.float64(12.44739323680251)) ('M_1_LRG', np.float64(13.843964629563276)) ('alpha_LRG', np.float64(1.1259945645861145)) ('f_sigv_LRG', np.float64(0.9292975216428159)) ('log_Mcent_LRG', np.float64(12.725543120490462)) ('sigma_M_LRG', np.float64(0.18548836372823568))
[Interation 34] ('M_0_LRG', np.float64(12.447018889488373)) ('M_1_LRG', np.float64(13.847956045519672)) ('alpha_LRG', np.float64(1.1246867611900695)) ('f_sigv_LRG', np.float64(0.9372895608370598)) ('log_Mcent_LRG', np.float64(12.733100920824304)) ('sigma_M_LRG', np.float64(0.20035826130119921))
[Interation 34] ('M_0_LRG', np.float64(12.390655620918704)) ('M_1_LRG', np.float64(13.865615111883201)) ('alpha_LRG', np.float64(1.1304745198018644)) ('f_sigv_LRG', np.float64(0.9476281256390227)) ('log_Mcent_LRG', np.float64(12.738231915229939)) ('sigma_M_LRG', np.float64(0.19827383000420729))
[Interation 34] ('M_0_LRG', np.float64(12.499311498489217)) ('M_1_LRG', np.float64(13.824660407463396)) ('alpha_LRG', np.float64(1.1034488252429202)) ('f_sigv_LRG', np.float64(0.9301006221193259)) ('log_Mcent_LRG', np.float64(12.7151259245665)) ('sigma_M_LRG', np.float64(0.17540023397397875))
[Interation 34] ('M_0_LRG', np.float64(12.455245598663758)) ('M_1_LRG', np.float64(13.857954267142391)) ('alpha_LRG', np.float64(1.1134386375146235)) ('f_sigv_LRG', np.float64(0.9373627580261155)) ('log_Mcent_LRG', np.float64(12.741286249654298)) ('sigma_M_LRG', np.float64(0.21334154423822155))
[Interation 34] chi2=481.33262132862626
[Interation 34] chi2=394.2495853796273
[Interation 34] chi2=499.19195982407695
[Interation 34] chi2=599.2893538547638
[Interation 34] chi2=546.9202079930086
[Interation 34] chi2=504.40387203166506
[Interation 34] chi2=516.3664182683289
[Interation 34] chi2=482.4113159428776
[Interation 34] chi2=531.2144452329121
[Interation 34] chi2=526.1278114035157
[Interation 34] chi2=540.7162316465717
[Interation 34] chi2=506.2699383463666
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_14.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.552507744000918)) ('M_1_LRG', np.float64(13.824195367557717)) ('alpha_LRG', np.float64(1.0840190352406862)) ('f_sigv_LRG', np.float64(0.933275247267293)) ('log_Mcent_LRG', np.float64(12.718290672219787)) ('sigma_M_LRG', np.float64(0.18056479067104214))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3241868019104004
Start satellite assignement
Satellite assignement done 0.07639265060424805
LRG mock catalogue done 0.15201330184936523
608232 central galaxies, 91324 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6796932220458984
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_14.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:34
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:34
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:34
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:34
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:34
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:34
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:34
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:34
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:34
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:34
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:34
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:34
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:34
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:34
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:34
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:34
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:34
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:34
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:34
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:34
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:34
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:34
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:34
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:28
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:29
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 36] ('M_0_LRG', np.float64(12.39464140408117)) ('M_1_LRG', np.float64(13.713604136095977)) ('alpha_LRG', np.float64(0.9564672413650337)) ('f_sigv_LRG', np.float64(0.9548313501008341)) ('log_Mcent_LRG', np.float64(12.683165033429619)) ('sigma_M_LRG', np.float64(0.4894219636823185))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 36] ('M_0_LRG', np.float64(12.684479225289735)) ('M_1_LRG', np.float64(14.114007520557882)) ('alpha_LRG', np.float64(0.8943369435770906)) ('f_sigv_LRG', np.float64(0.9594946714728152)) ('log_Mcent_LRG', np.float64(13.004911759038524)) ('sigma_M_LRG', np.float64(0.4647953720634478))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 36] ('M_0_LRG', np.float64(12.381047175127643)) ('M_1_LRG', np.float64(13.577704936349244)) ('alpha_LRG', np.float64(1.076199433732215)) ('f_sigv_LRG', np.float64(0.8465839631959795)) ('log_Mcent_LRG', np.float64(12.749935848949454)) ('sigma_M_LRG', np.float64(0.4905719599299417))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 36] ('M_0_LRG', np.float64(12.207855753611227)) ('M_1_LRG', np.float64(13.321072905610839)) ('alpha_LRG', np.float64(0.9294798632013281)) ('f_sigv_LRG', np.float64(1.0132682027174784)) ('log_Mcent_LRG', np.float64(12.553175183603193)) ('sigma_M_LRG', np.float64(0.4733393862065195))
[Interation 36] chi2=1226.1582635794537
[Interation 36] chi2=5402.374027507312
[Interation 36] chi2=3149.1193481026703
[Interation 36] chi2=7703.730838263742
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.22441581632171)) ('M_1_LRG', np.float64(13.94170503170253)) ('alpha_LRG', np.float64(1.0644672043558672)) ('f_sigv_LRG', np.float64(0.8378739237665109)) ('log_Mcent_LRG', np.float64(12.733393666166144)) ('sigma_M_LRG', np.float64(0.36038729065871444))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.586745240986543)) ('M_1_LRG', np.float64(14.072442379512987)) ('alpha_LRG', np.float64(0.8637485018166922)) ('f_sigv_LRG', np.float64(0.9340763820991507)) ('log_Mcent_LRG', np.float64(12.964347132615751)) ('sigma_M_LRG', np.float64(0.49204687404282116))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.607920364057177)) ('M_1_LRG', np.float64(13.812091662354323)) ('alpha_LRG', np.float64(1.1114553955509852)) ('f_sigv_LRG', np.float64(0.9172904217488598)) ('log_Mcent_LRG', np.float64(13.012073210055828)) ('sigma_M_LRG', np.float64(0.6598820044167569))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.554597875315674)) ('M_1_LRG', np.float64(13.825992468607623)) ('alpha_LRG', np.float64(1.1725448555363844)) ('f_sigv_LRG', np.float64(1.1325083413820531)) ('log_Mcent_LRG', np.float64(12.816974301710474)) ('sigma_M_LRG', np.float64(0.39184327993171825))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.620828788601383)) ('M_1_LRG', np.float64(13.883209396325414)) ('alpha_LRG', np.float64(0.9231517226827701)) ('f_sigv_LRG', np.float64(1.0203662632308637)) ('log_Mcent_LRG', np.float64(12.698484269349494)) ('sigma_M_LRG', np.float64(0.2100712145883153))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.747731957951881)) ('M_1_LRG', np.float64(13.841293162068254)) ('alpha_LRG', np.float64(1.1927700093365745)) ('f_sigv_LRG', np.float64(0.9421254573721303)) ('log_Mcent_LRG', np.float64(12.814018938957732)) ('sigma_M_LRG', np.float64(0.43804129969813504))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.373978442118105)) ('M_1_LRG', np.float64(13.949214974600409)) ('alpha_LRG', np.float64(1.1424005765470595)) ('f_sigv_LRG', np.float64(1.0016813150270634)) ('log_Mcent_LRG', np.float64(12.816698889813464)) ('sigma_M_LRG', np.float64(0.3452367825792544))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.540245554878467)) ('M_1_LRG', np.float64(13.9470549544219)) ('alpha_LRG', np.float64(1.0309472050199566)) ('f_sigv_LRG', np.float64(0.8940241425267642)) ('log_Mcent_LRG', np.float64(12.936095815407501)) ('sigma_M_LRG', np.float64(0.55892877980456))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.878572100317482)) ('M_1_LRG', np.float64(13.737012722296491)) ('alpha_LRG', np.float64(1.1216132102941396)) ('f_sigv_LRG', np.float64(0.7552027594147732)) ('log_Mcent_LRG', np.float64(12.868742707860122)) ('sigma_M_LRG', np.float64(0.40988682171475876))
[Interation 35] chi2=2345.966974583869
[Interation 35] chi2=956.192268046909
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.73167511119634)) ('M_1_LRG', np.float64(13.863775205914209)) ('alpha_LRG', np.float64(1.0723132342778918)) ('f_sigv_LRG', np.float64(1.0136856209925496)) ('log_Mcent_LRG', np.float64(12.73670973411939)) ('sigma_M_LRG', np.float64(0.31292871109503734))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.956719770113068)) ('M_1_LRG', np.float64(14.18372757775683)) ('alpha_LRG', np.float64(1.0494380906613126)) ('f_sigv_LRG', np.float64(1.0148519893761059)) ('log_Mcent_LRG', np.float64(13.061870866305254)) ('sigma_M_LRG', np.float64(0.39104330920001723))
[Interation 35] chi2=2492.8776063937894
[Interation 35] chi2=1957.7080236123102
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.467021982208125)) ('M_1_LRG', np.float64(13.63253808007824)) ('alpha_LRG', np.float64(0.856249834552436)) ('f_sigv_LRG', np.float64(0.8523324263328507)) ('log_Mcent_LRG', np.float64(12.600773515010962)) ('sigma_M_LRG', np.float64(0.2465919572197729))
[Interation 35] chi2=1028.917732867952
[Interation 35] chi2=4903.877387059014
[Interation 35] chi2=2848.692317845082
[Interation 35] chi2=943.0596110090244
[Interation 35] chi2=2907.2062206153983
[Interation 35] chi2=1672.4659461883707
[Interation 35] chi2=2457.6653628863787
[Interation 35] chi2=2630.5868217705242
[Interation 37] ('M_0_LRG', np.float64(12.642039817153512)) ('M_1_LRG', np.float64(13.803960429871625)) ('alpha_LRG', np.float64(1.029709963970364)) ('f_sigv_LRG', np.float64(0.9427967037783261)) ('log_Mcent_LRG', np.float64(12.707838210457224)) ('sigma_M_LRG', np.float64(0.17236476261542683))
[Interation 37] ('M_0_LRG', np.float64(12.641293984788046)) ('M_1_LRG', np.float64(13.822637160436573)) ('alpha_LRG', np.float64(1.0278486561776368)) ('f_sigv_LRG', np.float64(0.9336406720633601)) ('log_Mcent_LRG', np.float64(12.731444845129856)) ('sigma_M_LRG', np.float64(0.20600510525681626))
[Interation 37] ('M_0_LRG', np.float64(12.62585726622956)) ('M_1_LRG', np.float64(13.818344872978953)) ('alpha_LRG', np.float64(1.0411145413923708)) ('f_sigv_LRG', np.float64(0.9259520120039407)) ('log_Mcent_LRG', np.float64(12.715582426356386)) ('sigma_M_LRG', np.float64(0.17691861367154255))
[Interation 37] ('M_0_LRG', np.float64(12.578829306085023)) ('M_1_LRG', np.float64(13.842294690364737)) ('alpha_LRG', np.float64(1.0759648440816545)) ('f_sigv_LRG', np.float64(0.9212933648505967)) ('log_Mcent_LRG', np.float64(12.747839302115587)) ('sigma_M_LRG', np.float64(0.237365675891052))
[Interation 37] chi2=495.3149456591133
[Interation 37] chi2=515.9091577382499
[Interation 37] chi2=541.4807615400858
[Interation 37] chi2=517.3287270230028
[Interation 36] ('M_0_LRG', np.float64(12.523050976547236)) ('M_1_LRG', np.float64(13.822852747350188)) ('alpha_LRG', np.float64(1.0901246353581273)) ('f_sigv_LRG', np.float64(0.9419203518019615)) ('log_Mcent_LRG', np.float64(12.71399172874024)) ('sigma_M_LRG', np.float64(0.16575809548933362))
[Interation 36] ('M_0_LRG', np.float64(12.5983962989812)) ('M_1_LRG', np.float64(13.846955845310648)) ('alpha_LRG', np.float64(1.043126772036343)) ('f_sigv_LRG', np.float64(0.9475257063675432)) ('log_Mcent_LRG', np.float64(12.747687411790384)) ('sigma_M_LRG', np.float64(0.22509069911419233))
[Interation 36] ('M_0_LRG', np.float64(12.606672299506888)) ('M_1_LRG', np.float64(13.81786421989537)) ('alpha_LRG', np.float64(1.0504193643038737)) ('f_sigv_LRG', np.float64(0.9285399296212722)) ('log_Mcent_LRG', np.float64(12.714562570681897)) ('sigma_M_LRG', np.float64(0.17714131541360978))
[Interation 36] ('M_0_LRG', np.float64(12.52493946736695)) ('M_1_LRG', np.float64(13.838352767290385)) ('alpha_LRG', np.float64(1.0787739645768144)) ('f_sigv_LRG', np.float64(0.9520321809684781)) ('log_Mcent_LRG', np.float64(12.717250765032027)) ('sigma_M_LRG', np.float64(0.16473262823616935))
[Interation 36] ('M_0_LRG', np.float64(12.603074982622056)) ('M_1_LRG', np.float64(13.825405857476685)) ('alpha_LRG', np.float64(1.064595896930563)) ('f_sigv_LRG', np.float64(0.9126476036337098)) ('log_Mcent_LRG', np.float64(12.727185398034324)) ('sigma_M_LRG', np.float64(0.19532517781511433))
[Interation 36] ('M_0_LRG', np.float64(12.528809032451791)) ('M_1_LRG', np.float64(13.830991810448062)) ('alpha_LRG', np.float64(1.0875734246435962)) ('f_sigv_LRG', np.float64(0.9341241540471126)) ('log_Mcent_LRG', np.float64(12.708213718569892)) ('sigma_M_LRG', np.float64(0.1359383544264237))
[Interation 36] ('M_0_LRG', np.float64(12.503616068575953)) ('M_1_LRG', np.float64(13.827266290373789)) ('alpha_LRG', np.float64(1.1007776756878567)) ('f_sigv_LRG', np.float64(0.9416946847289737)) ('log_Mcent_LRG', np.float64(12.711229645202549)) ('sigma_M_LRG', np.float64(0.16228493709122183))
[Interation 36] ('M_0_LRG', np.float64(12.547071321487435)) ('M_1_LRG', np.float64(13.815651706842917)) ('alpha_LRG', np.float64(1.0719367648743505)) ('f_sigv_LRG', np.float64(0.939336975541471)) ('log_Mcent_LRG', np.float64(12.696350749108806)) ('sigma_M_LRG', np.float64(0.12970106931283276))
[Interation 36] ('M_0_LRG', np.float64(12.530334125770933)) ('M_1_LRG', np.float64(13.840568194543081)) ('alpha_LRG', np.float64(1.0745727831817482)) ('f_sigv_LRG', np.float64(0.9455029465864904)) ('log_Mcent_LRG', np.float64(12.718444651074705)) ('sigma_M_LRG', np.float64(0.15746066908783918))
[Interation 36] ('M_0_LRG', np.float64(12.474268040044535)) ('M_1_LRG', np.float64(13.842306259538184)) ('alpha_LRG', np.float64(1.1047291219032322)) ('f_sigv_LRG', np.float64(0.9479460990631188)) ('log_Mcent_LRG', np.float64(12.718286342469817)) ('sigma_M_LRG', np.float64(0.15775641524253775))
[Interation 36] ('M_0_LRG', np.float64(12.534821415908384)) ('M_1_LRG', np.float64(13.83588131593397)) ('alpha_LRG', np.float64(1.070035585209269)) ('f_sigv_LRG', np.float64(0.9464263590973664)) ('log_Mcent_LRG', np.float64(12.716808715908341)) ('sigma_M_LRG', np.float64(0.16628084811524318))
[Interation 36] ('M_0_LRG', np.float64(12.51846565244555)) ('M_1_LRG', np.float64(13.822124997755749)) ('alpha_LRG', np.float64(1.0949989277301992)) ('f_sigv_LRG', np.float64(0.9448657729402574)) ('log_Mcent_LRG', np.float64(12.713601676523897)) ('sigma_M_LRG', np.float64(0.1659847986325954))
[Interation 36] chi2=557.4870297168773
[Interation 36] chi2=489.5183753593122
[Interation 36] chi2=554.7271140935692
[Interation 36] chi2=542.5310140928841
[Interation 36] chi2=510.9390706431782
[Interation 36] chi2=480.1635713351201
[Interation 36] chi2=467.54724870050035
[Interation 36] chi2=544.4858336517367
[Interation 36] chi2=458.92422305557903
[Interation 36] chi2=558.6840553081895
[Interation 36] chi2=458.1526276902973
[Interation 36] chi2=516.2236209488876
[Interation 38] ('M_0_LRG', np.float64(12.553856869552543)) ('M_1_LRG', np.float64(13.81454767145342)) ('alpha_LRG', np.float64(1.083280077179405)) ('f_sigv_LRG', np.float64(0.9286622052809146)) ('log_Mcent_LRG', np.float64(12.702956859724601)) ('sigma_M_LRG', np.float64(0.13621658491463867))
[Interation 38] ('M_0_LRG', np.float64(12.550503362952586)) ('M_1_LRG', np.float64(13.815432329967605)) ('alpha_LRG', np.float64(1.0873154239267255)) ('f_sigv_LRG', np.float64(0.9291382507088719)) ('log_Mcent_LRG', np.float64(12.70844785800859)) ('sigma_M_LRG', np.float64(0.15202168745858785))
[Interation 38] ('M_0_LRG', np.float64(12.5536041505827)) ('M_1_LRG', np.float64(13.82457817765351)) ('alpha_LRG', np.float64(1.0763020420145217)) ('f_sigv_LRG', np.float64(0.9374846775930198)) ('log_Mcent_LRG', np.float64(12.718905498546494)) ('sigma_M_LRG', np.float64(0.17690525733822532))
[Interation 38] ('M_0_LRG', np.float64(12.57087431794209)) ('M_1_LRG', np.float64(13.822531225035666)) ('alpha_LRG', np.float64(1.0650127993674776)) ('f_sigv_LRG', np.float64(0.9386781966288806)) ('log_Mcent_LRG', np.float64(12.716757333712795)) ('sigma_M_LRG', np.float64(0.16958599322760814))
[Interation 38] chi2=503.00623338446695
[Interation 38] chi2=557.0893669904166
[Interation 38] chi2=486.32429564203073
[Interation 38] chi2=482.15440498402256
[Interation 37] ('M_0_LRG', np.float64(12.557048610715587)) ('M_1_LRG', np.float64(13.823011543691694)) ('alpha_LRG', np.float64(1.0802397332182194)) ('f_sigv_LRG', np.float64(0.9348678551584723)) ('log_Mcent_LRG', np.float64(12.710333110947433)) ('sigma_M_LRG', np.float64(0.14530045880375025))
[Interation 37] ('M_0_LRG', np.float64(12.544739521361725)) ('M_1_LRG', np.float64(13.817561801788809)) ('alpha_LRG', np.float64(1.0794336310024562)) ('f_sigv_LRG', np.float64(0.9346564336706011)) ('log_Mcent_LRG', np.float64(12.703598130330688)) ('sigma_M_LRG', np.float64(0.13628774797655863))
[Interation 37] ('M_0_LRG', np.float64(12.547281620643348)) ('M_1_LRG', np.float64(13.811659242421559)) ('alpha_LRG', np.float64(1.0858699393106204)) ('f_sigv_LRG', np.float64(0.9271766480272511)) ('log_Mcent_LRG', np.float64(12.703679039820845)) ('sigma_M_LRG', np.float64(0.14675464712882913))
[Interation 37] ('M_0_LRG', np.float64(12.565764671065994)) ('M_1_LRG', np.float64(13.835930537782831)) ('alpha_LRG', np.float64(1.062157773214626)) ('f_sigv_LRG', np.float64(0.9427923150468626)) ('log_Mcent_LRG', np.float64(12.728977952922003)) ('sigma_M_LRG', np.float64(0.19568853455233226))
[Interation 37] ('M_0_LRG', np.float64(12.546878243234332)) ('M_1_LRG', np.float64(13.834907348701622)) ('alpha_LRG', np.float64(1.0812627757831812)) ('f_sigv_LRG', np.float64(0.9337824856136318)) ('log_Mcent_LRG', np.float64(12.720187167180855)) ('sigma_M_LRG', np.float64(0.16595537505638236))
[Interation 37] ('M_0_LRG', np.float64(12.536772996017724)) ('M_1_LRG', np.float64(13.823596556978677)) ('alpha_LRG', np.float64(1.0883989840815274)) ('f_sigv_LRG', np.float64(0.9314090235903832)) ('log_Mcent_LRG', np.float64(12.712308451100943)) ('sigma_M_LRG', np.float64(0.1575508480352279))
[Interation 37] ('M_0_LRG', np.float64(12.545133641431624)) ('M_1_LRG', np.float64(13.8225125997191)) ('alpha_LRG', np.float64(1.0775142627989567)) ('f_sigv_LRG', np.float64(0.9343156275357337)) ('log_Mcent_LRG', np.float64(12.707311989760415)) ('sigma_M_LRG', np.float64(0.14549181461703903))
[Interation 37] ('M_0_LRG', np.float64(12.533882778666728)) ('M_1_LRG', np.float64(13.826856634688621)) ('alpha_LRG', np.float64(1.0850820547470934)) ('f_sigv_LRG', np.float64(0.9335578010549772)) ('log_Mcent_LRG', np.float64(12.71396566784921)) ('sigma_M_LRG', np.float64(0.16549827726253868))
[Interation 37] ('M_0_LRG', np.float64(12.534293280032179)) ('M_1_LRG', np.float64(13.820676267047721)) ('alpha_LRG', np.float64(1.0921781729351223)) ('f_sigv_LRG', np.float64(0.9280110260721781)) ('log_Mcent_LRG', np.float64(12.707252339654708)) ('sigma_M_LRG', np.float64(0.14670669107102152))
[Interation 37] ('M_0_LRG', np.float64(12.55215590779519)) ('M_1_LRG', np.float64(13.816487878942068)) ('alpha_LRG', np.float64(1.0774081848003572)) ('f_sigv_LRG', np.float64(0.9327651878694276)) ('log_Mcent_LRG', np.float64(12.71008250229209)) ('sigma_M_LRG', np.float64(0.16340548134855282))
[Interation 37] ('M_0_LRG', np.float64(12.533273523666939)) ('M_1_LRG', np.float64(13.817768728534459)) ('alpha_LRG', np.float64(1.0956803023554815)) ('f_sigv_LRG', np.float64(0.9302856878511119)) ('log_Mcent_LRG', np.float64(12.708099769975123)) ('sigma_M_LRG', np.float64(0.15103520478871607))
[Interation 37] ('M_0_LRG', np.float64(12.549357038195705)) ('M_1_LRG', np.float64(13.821881789730284)) ('alpha_LRG', np.float64(1.0799021254062122)) ('f_sigv_LRG', np.float64(0.9322123946417789)) ('log_Mcent_LRG', np.float64(12.709335501574449)) ('sigma_M_LRG', np.float64(0.14904164392563363))
[Interation 37] chi2=454.836535560154
[Interation 37] chi2=518.3332850575224
[Interation 37] chi2=497.819701524408
[Interation 37] chi2=553.2497119499409
[Interation 37] chi2=548.2927667863335
[Interation 37] chi2=498.84203748882476
[Interation 37] chi2=440.7161927933961
[Interation 37] chi2=522.1542104399309
[Interation 37] chi2=477.10990114186956
[Interation 37] chi2=466.2325919524351
[Interation 37] chi2=440.75286675422825
[Interation 37] chi2=488.5879973092466
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_15.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.542387825503168)) ('M_1_LRG', np.float64(13.832427098635248)) ('alpha_LRG', np.float64(1.0797082744933608)) ('f_sigv_LRG', np.float64(0.9379784916919163)) ('log_Mcent_LRG', np.float64(12.721203513370735)) ('sigma_M_LRG', np.float64(0.17936677031781684))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.31093358993530273
Start satellite assignement
Satellite assignement done 0.0768287181854248
LRG mock catalogue done 0.155120849609375
607592 central galaxies, 92454 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6472909450531006
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_15.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:24
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 39] ('M_0_LRG', np.float64(12.54565260402551)) ('M_1_LRG', np.float64(13.745074054969214)) ('alpha_LRG', np.float64(1.1325815291739545)) ('f_sigv_LRG', np.float64(0.9186846293201404)) ('log_Mcent_LRG', np.float64(12.659562584685618)) ('sigma_M_LRG', np.float64(0.12398681069499029))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 39] ('M_0_LRG', np.float64(12.496828268388075)) ('M_1_LRG', np.float64(13.930756019079475)) ('alpha_LRG', np.float64(1.0875689013951895)) ('f_sigv_LRG', np.float64(0.8722007331731638)) ('log_Mcent_LRG', np.float64(12.821438789227711)) ('sigma_M_LRG', np.float64(0.32602855481481763))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 39] ('M_0_LRG', np.float64(12.701812370298029)) ('M_1_LRG', np.float64(13.965760292020784)) ('alpha_LRG', np.float64(0.9236411428848943)) ('f_sigv_LRG', np.float64(0.9148795070542542)) ('log_Mcent_LRG', np.float64(12.845456070904374)) ('sigma_M_LRG', np.float64(0.36218357330705525))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 39] ('M_0_LRG', np.float64(12.666465440158326)) ('M_1_LRG', np.float64(13.763138634423274)) ('alpha_LRG', np.float64(1.030415146727386)) ('f_sigv_LRG', np.float64(0.8974669861097898)) ('log_Mcent_LRG', np.float64(12.67464639866524)) ('sigma_M_LRG', np.float64(0.1513059300456268))
[Interation 39] chi2=600.4916199811391
[Interation 39] chi2=649.5835293822375
[Interation 39] chi2=667.8982762976075
[Interation 39] chi2=593.2438723999651
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.56826695279719)) ('M_1_LRG', np.float64(13.797404297197032)) ('alpha_LRG', np.float64(1.0869524932383345)) ('f_sigv_LRG', np.float64(0.9366199803485828)) ('log_Mcent_LRG', np.float64(12.706708515968964)) ('sigma_M_LRG', np.float64(0.1830295527603723))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.472698407839715)) ('M_1_LRG', np.float64(13.870003986877844)) ('alpha_LRG', np.float64(1.0916652154452842)) ('f_sigv_LRG', np.float64(0.9471177657546612)) ('log_Mcent_LRG', np.float64(12.752010014814013)) ('sigma_M_LRG', np.float64(0.2385911312296557))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.46938528905611)) ('M_1_LRG', np.float64(13.822131765374172)) ('alpha_LRG', np.float64(1.158070998682912)) ('f_sigv_LRG', np.float64(0.9183443423972828)) ('log_Mcent_LRG', np.float64(12.710623411014453)) ('sigma_M_LRG', np.float64(0.1672876818233373))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.531862087955242)) ('M_1_LRG', np.float64(13.806058745914159)) ('alpha_LRG', np.float64(1.1407228665463944)) ('f_sigv_LRG', np.float64(0.900898204496961)) ('log_Mcent_LRG', np.float64(12.738568969995246)) ('sigma_M_LRG', np.float64(0.245348311880758))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.571681725741191)) ('M_1_LRG', np.float64(13.909976023386271)) ('alpha_LRG', np.float64(1.0290046917663536)) ('f_sigv_LRG', np.float64(0.9484202029705868)) ('log_Mcent_LRG', np.float64(12.798449067161153)) ('sigma_M_LRG', np.float64(0.30392273269294523))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.496988311841584)) ('M_1_LRG', np.float64(13.819252710831568)) ('alpha_LRG', np.float64(1.1356662994845101)) ('f_sigv_LRG', np.float64(0.958674659182292)) ('log_Mcent_LRG', np.float64(12.737225431012568)) ('sigma_M_LRG', np.float64(0.22422518626776483))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.503666873260668)) ('M_1_LRG', np.float64(13.857043192579205)) ('alpha_LRG', np.float64(1.0985750331975366)) ('f_sigv_LRG', np.float64(0.9487088385849995)) ('log_Mcent_LRG', np.float64(12.742075337938564)) ('sigma_M_LRG', np.float64(0.207493331826206))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.513968503743081)) ('M_1_LRG', np.float64(13.815370473228363)) ('alpha_LRG', np.float64(1.0940104135154558)) ('f_sigv_LRG', np.float64(0.9569009591708505)) ('log_Mcent_LRG', np.float64(12.711741614582674)) ('sigma_M_LRG', np.float64(0.16619006044455492))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.513777439318865)) ('M_1_LRG', np.float64(13.76025115914302)) ('alpha_LRG', np.float64(1.152486222868814)) ('f_sigv_LRG', np.float64(0.9223484384314597)) ('log_Mcent_LRG', np.float64(12.672247495313602)) ('sigma_M_LRG', np.float64(0.1185951283374918))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.50061420542816)) ('M_1_LRG', np.float64(13.840867245369903)) ('alpha_LRG', np.float64(1.127143617847651)) ('f_sigv_LRG', np.float64(0.9503465460508873)) ('log_Mcent_LRG', np.float64(12.736753875977165)) ('sigma_M_LRG', np.float64(0.2021380546166544))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.50962070748459)) ('M_1_LRG', np.float64(13.793190259029647)) ('alpha_LRG', np.float64(1.1511083360595704)) ('f_sigv_LRG', np.float64(0.9050920786439103)) ('log_Mcent_LRG', np.float64(12.713760586998331)) ('sigma_M_LRG', np.float64(0.19384107132788164))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.43689725121782)) ('M_1_LRG', np.float64(13.865505660245322)) ('alpha_LRG', np.float64(1.1354211794808204)) ('f_sigv_LRG', np.float64(0.9338183792037892)) ('log_Mcent_LRG', np.float64(12.756859073461888)) ('sigma_M_LRG', np.float64(0.22973932100897282))
[Interation 38] chi2=534.3263582240291
[Interation 38] chi2=529.0205695222605
[Interation 38] chi2=497.6492109596358
[Interation 38] chi2=581.3070988570049
[Interation 38] chi2=588.7436334453583
[Interation 38] chi2=552.596385014362
[Interation 38] chi2=499.8019109848908
[Interation 38] chi2=519.1116555140467
[Interation 38] chi2=606.248029734738
[Interation 38] chi2=558.5045336481145
[Interation 38] chi2=494.3851197301366
[Interation 38] chi2=508.04329112775616
[Interation 40] ('M_0_LRG', np.float64(12.494851532216646)) ('M_1_LRG', np.float64(13.822382862695976)) ('alpha_LRG', np.float64(1.1239761751442603)) ('f_sigv_LRG', np.float64(0.9194212294039416)) ('log_Mcent_LRG', np.float64(12.713284413096881)) ('sigma_M_LRG', np.float64(0.16900977132845824))
[Interation 40] ('M_0_LRG', np.float64(12.4768882430668)) ('M_1_LRG', np.float64(13.829117447774523)) ('alpha_LRG', np.float64(1.1285124614001387)) ('f_sigv_LRG', np.float64(0.9251599256523309)) ('log_Mcent_LRG', np.float64(12.717541335437602)) ('sigma_M_LRG', np.float64(0.17096932115318736))
[Interation 40] ('M_0_LRG', np.float64(12.460385054244906)) ('M_1_LRG', np.float64(13.818911949892021)) ('alpha_LRG', np.float64(1.1707345010951276)) ('f_sigv_LRG', np.float64(0.9168292023009212)) ('log_Mcent_LRG', np.float64(12.720930903302525)) ('sigma_M_LRG', np.float64(0.18128737154794994))
[Interation 40] ('M_0_LRG', np.float64(12.421640273149459)) ('M_1_LRG', np.float64(13.838594245609007)) ('alpha_LRG', np.float64(1.1515759284863325)) ('f_sigv_LRG', np.float64(0.9252315945132764)) ('log_Mcent_LRG', np.float64(12.72294915170759)) ('sigma_M_LRG', np.float64(0.17817597870693413))
[Interation 40] chi2=541.724965830234
[Interation 40] chi2=469.21317765638315
[Interation 40] chi2=514.8624416621516
[Interation 40] chi2=490.3534153875697
[Interation 39] ('M_0_LRG', np.float64(12.523043077878965)) ('M_1_LRG', np.float64(13.827884949969082)) ('alpha_LRG', np.float64(1.079913983916205)) ('f_sigv_LRG', np.float64(0.9384674129075204)) ('log_Mcent_LRG', np.float64(12.71160173529004)) ('sigma_M_LRG', np.float64(0.15968332093765192))
[Interation 39] ('M_0_LRG', np.float64(12.580072861917142)) ('M_1_LRG', np.float64(13.826831067119372)) ('alpha_LRG', np.float64(1.0776555631544293)) ('f_sigv_LRG', np.float64(0.9309829212569404)) ('log_Mcent_LRG', np.float64(12.726784285945069)) ('sigma_M_LRG', np.float64(0.19631614977219397))
[Interation 39] ('M_0_LRG', np.float64(12.475606276158421)) ('M_1_LRG', np.float64(13.824630146060354)) ('alpha_LRG', np.float64(1.14390924899305)) ('f_sigv_LRG', np.float64(0.9177489511914956)) ('log_Mcent_LRG', np.float64(12.717708022536009)) ('sigma_M_LRG', np.float64(0.18620922691496417))
[Interation 39] ('M_0_LRG', np.float64(12.551477489130361)) ('M_1_LRG', np.float64(13.822808236760974)) ('alpha_LRG', np.float64(1.0796047537313278)) ('f_sigv_LRG', np.float64(0.9252769293876818)) ('log_Mcent_LRG', np.float64(12.709191580948811)) ('sigma_M_LRG', np.float64(0.1508028665044009))
[Interation 39] ('M_0_LRG', np.float64(12.568410291398148)) ('M_1_LRG', np.float64(13.824169229239468)) ('alpha_LRG', np.float64(1.0914453178838524)) ('f_sigv_LRG', np.float64(0.9324024884628962)) ('log_Mcent_LRG', np.float64(12.718745395257965)) ('sigma_M_LRG', np.float64(0.1714738228901438))
[Interation 39] ('M_0_LRG', np.float64(12.613010890521307)) ('M_1_LRG', np.float64(13.805096460427787)) ('alpha_LRG', np.float64(1.0852257487364207)) ('f_sigv_LRG', np.float64(0.9107771867371801)) ('log_Mcent_LRG', np.float64(12.706752057791853)) ('sigma_M_LRG', np.float64(0.15650966050826637))
[Interation 39] ('M_0_LRG', np.float64(12.523816200622068)) ('M_1_LRG', np.float64(13.829641975034715)) ('alpha_LRG', np.float64(1.0944776126751086)) ('f_sigv_LRG', np.float64(0.9304212533647179)) ('log_Mcent_LRG', np.float64(12.718156795103049)) ('sigma_M_LRG', np.float64(0.17958062086283644))
[Interation 39] ('M_0_LRG', np.float64(12.522084339052258)) ('M_1_LRG', np.float64(13.83143121401354)) ('alpha_LRG', np.float64(1.126104022028332)) ('f_sigv_LRG', np.float64(0.9226628396382072)) ('log_Mcent_LRG', np.float64(12.723158028599393)) ('sigma_M_LRG', np.float64(0.17610304374785857))
[Interation 39] ('M_0_LRG', np.float64(12.446952277385467)) ('M_1_LRG', np.float64(13.830606719204594)) ('alpha_LRG', np.float64(1.1293868636106958)) ('f_sigv_LRG', np.float64(0.9457970465773677)) ('log_Mcent_LRG', np.float64(12.715654434562715)) ('sigma_M_LRG', np.float64(0.16412481045049787))
[Interation 39] ('M_0_LRG', np.float64(12.516787608605796)) ('M_1_LRG', np.float64(13.840715909788983)) ('alpha_LRG', np.float64(1.1146691665638992)) ('f_sigv_LRG', np.float64(0.9360604725331781)) ('log_Mcent_LRG', np.float64(12.733511278992047)) ('sigma_M_LRG', np.float64(0.2004828474378978))
[Interation 39] ('M_0_LRG', np.float64(12.537853652535198)) ('M_1_LRG', np.float64(13.821910393716644)) ('alpha_LRG', np.float64(1.1126291403345254)) ('f_sigv_LRG', np.float64(0.9199388367413007)) ('log_Mcent_LRG', np.float64(12.71563757481286)) ('sigma_M_LRG', np.float64(0.1727336486298986))
[Interation 39] ('M_0_LRG', np.float64(12.547010499971957)) ('M_1_LRG', np.float64(13.830287440945279)) ('alpha_LRG', np.float64(1.087874502127871)) ('f_sigv_LRG', np.float64(0.9183407546248682)) ('log_Mcent_LRG', np.float64(12.725949010901717)) ('sigma_M_LRG', np.float64(0.19904493864190587))
[Interation 39] chi2=553.1127862388954
[Interation 39] chi2=522.0860146257235
[Interation 39] chi2=495.12799826828723
[Interation 39] chi2=476.0594479154108
[Interation 39] chi2=502.72917605701366
[Interation 39] chi2=479.95326023839806
[Interation 39] chi2=508.775494279298
[Interation 39] chi2=519.0297637752016
[Interation 39] chi2=548.2045014730894
[Interation 39] chi2=480.5301525976606
[Interation 39] chi2=479.07514804111514
[Interation 39] chi2=526.4312793170367
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_16.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.577981324325044)) ('M_1_LRG', np.float64(13.818890416116908)) ('alpha_LRG', np.float64(1.0898914619695692)) ('f_sigv_LRG', np.float64(0.9169445567226455)) ('log_Mcent_LRG', np.float64(12.717375433740262)) ('sigma_M_LRG', np.float64(0.18028036054122581))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3203458786010742
Start satellite assignement
Satellite assignement done 0.08164119720458984
LRG mock catalogue done 0.1590125560760498
609715 central galaxies, 90290 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6676473617553711
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_16.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:42
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:42
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:42
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:42
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:42
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:42
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:42
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:43
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:43
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:43
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:43
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:37
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:37
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 41] ('M_0_LRG', np.float64(12.46462731230913)) ('M_1_LRG', np.float64(13.53688995160469)) ('alpha_LRG', np.float64(1.0418822508498464)) ('f_sigv_LRG', np.float64(1.0136111467580304)) ('log_Mcent_LRG', np.float64(12.719358242845773)) ('sigma_M_LRG', np.float64(0.5603911623344677))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 41] ('M_0_LRG', np.float64(12.472960845118779)) ('M_1_LRG', np.float64(13.530974700528734)) ('alpha_LRG', np.float64(1.0288758219204606)) ('f_sigv_LRG', np.float64(0.9837378838952965)) ('log_Mcent_LRG', np.float64(12.783490078662396)) ('sigma_M_LRG', np.float64(0.5296384434056026))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 41] ('M_0_LRG', np.float64(12.448583872162672)) ('M_1_LRG', np.float64(13.565501653287155)) ('alpha_LRG', np.float64(0.9518945691276659)) ('f_sigv_LRG', np.float64(0.9516830886146587)) ('log_Mcent_LRG', np.float64(12.70066751051837)) ('sigma_M_LRG', np.float64(0.5046674977883614))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 41] ('M_0_LRG', np.float64(12.480454672793039)) ('M_1_LRG', np.float64(13.514122305825317)) ('alpha_LRG', np.float64(1.0504695598316856)) ('f_sigv_LRG', np.float64(0.9611589384614051)) ('log_Mcent_LRG', np.float64(12.70006142073022)) ('sigma_M_LRG', np.float64(0.5028829630730111))
[Interation 41] chi2=5941.445675966127
[Interation 41] chi2=4503.158188256452
[Interation 41] chi2=4293.334939265404
[Interation 41] chi2=4463.095741989096
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.410765783988523)) ('M_1_LRG', np.float64(13.69676051909408)) ('alpha_LRG', np.float64(1.18072844795697)) ('f_sigv_LRG', np.float64(0.9533875035802218)) ('log_Mcent_LRG', np.float64(12.580910404870368)) ('sigma_M_LRG', np.float64(0.07763030449072927))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.515344104045704)) ('M_1_LRG', np.float64(14.073716107631933)) ('alpha_LRG', np.float64(0.9322866748308887)) ('f_sigv_LRG', np.float64(0.9993058029129116)) ('log_Mcent_LRG', np.float64(12.850919293848019)) ('sigma_M_LRG', np.float64(0.26621570962727586))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.637055246808552)) ('M_1_LRG', np.float64(13.935445660925904)) ('alpha_LRG', np.float64(0.8518658626325409)) ('f_sigv_LRG', np.float64(0.8539787922314693)) ('log_Mcent_LRG', np.float64(12.904379695362309)) ('sigma_M_LRG', np.float64(0.49812307966995856))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.068625242246245)) ('M_1_LRG', np.float64(13.938738622852327)) ('alpha_LRG', np.float64(1.272237784920755)) ('f_sigv_LRG', np.float64(0.7897272921563672)) ('log_Mcent_LRG', np.float64(12.79472734315014)) ('sigma_M_LRG', np.float64(0.3499987675913926))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.40851317926561)) ('M_1_LRG', np.float64(13.709478874897002)) ('alpha_LRG', np.float64(1.3416571285893415)) ('f_sigv_LRG', np.float64(0.9035227324423802)) ('log_Mcent_LRG', np.float64(12.764969749539205)) ('sigma_M_LRG', np.float64(0.34524808621101954))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.300772872659106)) ('M_1_LRG', np.float64(13.900025259513834)) ('alpha_LRG', np.float64(1.149853727309663)) ('f_sigv_LRG', np.float64(0.9420893260631781)) ('log_Mcent_LRG', np.float64(12.767860065100855)) ('sigma_M_LRG', np.float64(0.2974704142875268))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.517570434534141)) ('M_1_LRG', np.float64(13.77755058826728)) ('alpha_LRG', np.float64(1.104067801371209)) ('f_sigv_LRG', np.float64(0.8627881344777578)) ('log_Mcent_LRG', np.float64(12.653018173326808)) ('sigma_M_LRG', np.float64(0.21887637886274808))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.769086414699933)) ('M_1_LRG', np.float64(13.934012165542843)) ('alpha_LRG', np.float64(0.8890338820308672)) ('f_sigv_LRG', np.float64(0.9599837162292327)) ('log_Mcent_LRG', np.float64(12.888117674311788)) ('sigma_M_LRG', np.float64(0.4591787957422015))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.662445418907991)) ('M_1_LRG', np.float64(13.756375564488987)) ('alpha_LRG', np.float64(1.1242356966694815)) ('f_sigv_LRG', np.float64(0.7150809272660629)) ('log_Mcent_LRG', np.float64(12.786576929312908)) ('sigma_M_LRG', np.float64(0.3675295219157745))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.412912629339546)) ('M_1_LRG', np.float64(13.908947570066111)) ('alpha_LRG', np.float64(1.0519925919917767)) ('f_sigv_LRG', np.float64(0.9316751648265789)) ('log_Mcent_LRG', np.float64(12.768249855101805)) ('sigma_M_LRG', np.float64(0.2688631959563782))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.43993668220254)) ('M_1_LRG', np.float64(13.852257822378123)) ('alpha_LRG', np.float64(1.0527941914806471)) ('f_sigv_LRG', np.float64(1.00187483950093)) ('log_Mcent_LRG', np.float64(12.66243922910855)) ('sigma_M_LRG', np.float64(0.09240373254940781))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.382466131442298)) ('M_1_LRG', np.float64(13.845529810563512)) ('alpha_LRG', np.float64(0.8825481855542597)) ('f_sigv_LRG', np.float64(0.9825382266964463)) ('log_Mcent_LRG', np.float64(12.644603714724065)) ('sigma_M_LRG', np.float64(0.15007415433809118))
[Interation 40] chi2=1175.4499101553972
[Interation 40] chi2=1722.6021995367819
[Interation 40] chi2=1270.9506551456664
[Interation 40] chi2=1247.546358171937
[Interation 40] chi2=2865.1802361700084
[Interation 40] chi2=807.8381143380233
[Interation 40] chi2=703.975250766067
[Interation 40] chi2=1271.5750509860031
[Interation 40] chi2=1381.2765269823105
[Interation 40] chi2=553.6909825004318
[Interation 40] chi2=914.4208291780521
[Interation 40] chi2=1436.1700132041103
[Interation 42] ('M_0_LRG', np.float64(12.513352257697319)) ('M_1_LRG', np.float64(13.81828481686942)) ('alpha_LRG', np.float64(1.0928799005171383)) ('f_sigv_LRG', np.float64(0.9461069883600847)) ('log_Mcent_LRG', np.float64(12.697242227446795)) ('sigma_M_LRG', np.float64(0.1372064850262713))
[Interation 42] ('M_0_LRG', np.float64(12.517992513173843)) ('M_1_LRG', np.float64(13.823796146597488)) ('alpha_LRG', np.float64(1.0948974986435553)) ('f_sigv_LRG', np.float64(0.9414890279697861)) ('log_Mcent_LRG', np.float64(12.720157981997028)) ('sigma_M_LRG', np.float64(0.18478959306575976))
[Interation 42] ('M_0_LRG', np.float64(12.518191034296164)) ('M_1_LRG', np.float64(13.802940252070904)) ('alpha_LRG', np.float64(1.1239822150992553)) ('f_sigv_LRG', np.float64(0.9401864475220802)) ('log_Mcent_LRG', np.float64(12.70412778889806)) ('sigma_M_LRG', np.float64(0.15944702520007464))
[Interation 42] ('M_0_LRG', np.float64(12.614788272920219)) ('M_1_LRG', np.float64(13.812488172328543)) ('alpha_LRG', np.float64(1.0580315535996165)) ('f_sigv_LRG', np.float64(0.9370991480121665)) ('log_Mcent_LRG', np.float64(12.705204054907705)) ('sigma_M_LRG', np.float64(0.1452566946239438))
[Interation 42] chi2=536.5526856209805
[Interation 42] chi2=487.93992783166584
[Interation 42] chi2=495.9028088899901
[Interation 42] chi2=515.3605839440546
[Interation 41] ('M_0_LRG', np.float64(12.521626018412677)) ('M_1_LRG', np.float64(13.835340532633252)) ('alpha_LRG', np.float64(1.1122664810864775)) ('f_sigv_LRG', np.float64(0.9240660477834048)) ('log_Mcent_LRG', np.float64(12.722633823231256)) ('sigma_M_LRG', np.float64(0.17303132137172578))
[Interation 41] ('M_0_LRG', np.float64(12.574908029288467)) ('M_1_LRG', np.float64(13.81220068754158)) ('alpha_LRG', np.float64(1.0637919401342935)) ('f_sigv_LRG', np.float64(0.9286373507234645)) ('log_Mcent_LRG', np.float64(12.704773354880944)) ('sigma_M_LRG', np.float64(0.1551833511633105))
[Interation 41] ('M_0_LRG', np.float64(12.568812772734251)) ('M_1_LRG', np.float64(13.843150719058743)) ('alpha_LRG', np.float64(1.054773188203605)) ('f_sigv_LRG', np.float64(0.9383150828325038)) ('log_Mcent_LRG', np.float64(12.729697494667889)) ('sigma_M_LRG', np.float64(0.18832379726839238))
[Interation 41] ('M_0_LRG', np.float64(12.57362899031757)) ('M_1_LRG', np.float64(13.839052601874798)) ('alpha_LRG', np.float64(1.0600917013630387)) ('f_sigv_LRG', np.float64(0.9423341172493352)) ('log_Mcent_LRG', np.float64(12.737119780156736)) ('sigma_M_LRG', np.float64(0.21041625286415439))
[Interation 41] ('M_0_LRG', np.float64(12.641612999889327)) ('M_1_LRG', np.float64(13.801521900656128)) ('alpha_LRG', np.float64(1.0490475746438792)) ('f_sigv_LRG', np.float64(0.9257091011461718)) ('log_Mcent_LRG', np.float64(12.702695788036019)) ('sigma_M_LRG', np.float64(0.1459672379179457))
[Interation 41] ('M_0_LRG', np.float64(12.555627726034096)) ('M_1_LRG', np.float64(13.828458878696745)) ('alpha_LRG', np.float64(1.0557477701136175)) ('f_sigv_LRG', np.float64(0.9451061508443347)) ('log_Mcent_LRG', np.float64(12.706080763179502)) ('sigma_M_LRG', np.float64(0.14900754222558693))
[Interation 41] ('M_0_LRG', np.float64(12.48882019691448)) ('M_1_LRG', np.float64(13.825007852933512)) ('alpha_LRG', np.float64(1.1078324360921474)) ('f_sigv_LRG', np.float64(0.9381986959168125)) ('log_Mcent_LRG', np.float64(12.708480014371284)) ('sigma_M_LRG', np.float64(0.15474057970018223))
[Interation 41] ('M_0_LRG', np.float64(12.497249327911433)) ('M_1_LRG', np.float64(13.838553460264082)) ('alpha_LRG', np.float64(1.0813193721248446)) ('f_sigv_LRG', np.float64(0.9575096340982557)) ('log_Mcent_LRG', np.float64(12.72870347473881)) ('sigma_M_LRG', np.float64(0.19791844436924305))
[Interation 41] ('M_0_LRG', np.float64(12.548522048537773)) ('M_1_LRG', np.float64(13.833294294947235)) ('alpha_LRG', np.float64(1.0681162914019955)) ('f_sigv_LRG', np.float64(0.9384641763818449)) ('log_Mcent_LRG', np.float64(12.715242366430997)) ('sigma_M_LRG', np.float64(0.1693207808758827))
[Interation 41] ('M_0_LRG', np.float64(12.528901156474214)) ('M_1_LRG', np.float64(13.820114681672099)) ('alpha_LRG', np.float64(1.0771782509649777)) ('f_sigv_LRG', np.float64(0.9395576498399119)) ('log_Mcent_LRG', np.float64(12.720937740653323)) ('sigma_M_LRG', np.float64(0.19511509772227403))
[Interation 41] ('M_0_LRG', np.float64(12.526835895893823)) ('M_1_LRG', np.float64(13.833247015494548)) ('alpha_LRG', np.float64(1.1131105602543319)) ('f_sigv_LRG', np.float64(0.9371975976595129)) ('log_Mcent_LRG', np.float64(12.7234554200189)) ('sigma_M_LRG', np.float64(0.173320477510451))
[Interation 41] ('M_0_LRG', np.float64(12.49919569932925)) ('M_1_LRG', np.float64(13.854629297281562)) ('alpha_LRG', np.float64(1.0869753462063911)) ('f_sigv_LRG', np.float64(0.9384240438352799)) ('log_Mcent_LRG', np.float64(12.734582931989051)) ('sigma_M_LRG', np.float64(0.20397031262928755))
[Interation 41] chi2=471.9059828434763
[Interation 41] chi2=503.7447407933553
[Interation 41] chi2=491.12151768161283
[Interation 41] chi2=535.476896890368
[Interation 41] chi2=460.4799388438696
[Interation 41] chi2=483.40387116914724
[Interation 41] chi2=562.1196684260578
[Interation 41] chi2=521.1325740104501
[Interation 41] chi2=476.7408333996349
[Interation 41] chi2=505.64856463037836
[Interation 41] chi2=471.5179364408016
[Interation 41] chi2=497.6105254175278
[Interation 43] ('M_0_LRG', np.float64(12.557672434691177)) ('M_1_LRG', np.float64(13.831804503585156)) ('alpha_LRG', np.float64(1.0811562781196686)) ('f_sigv_LRG', np.float64(0.9379144483545526)) ('log_Mcent_LRG', np.float64(12.720850700408095)) ('sigma_M_LRG', np.float64(0.17241931462591553))
[Interation 43] ('M_0_LRG', np.float64(12.514597178463118)) ('M_1_LRG', np.float64(13.811315769975275)) ('alpha_LRG', np.float64(1.1105470268929483)) ('f_sigv_LRG', np.float64(0.9266741071875093)) ('log_Mcent_LRG', np.float64(12.698950830692691)) ('sigma_M_LRG', np.float64(0.13452985274483448))
[Interation 43] ('M_0_LRG', np.float64(12.5160484218268)) ('M_1_LRG', np.float64(13.832565079546486)) ('alpha_LRG', np.float64(1.111582745156484)) ('f_sigv_LRG', np.float64(0.9328490779453409)) ('log_Mcent_LRG', np.float64(12.72418036992756)) ('sigma_M_LRG', np.float64(0.17856000676003464))
[Interation 43] ('M_0_LRG', np.float64(12.534396758090548)) ('M_1_LRG', np.float64(13.822508859989545)) ('alpha_LRG', np.float64(1.0975833018326098)) ('f_sigv_LRG', np.float64(0.9285157870218596)) ('log_Mcent_LRG', np.float64(12.709353150354476)) ('sigma_M_LRG', np.float64(0.14964324824998165))
[Interation 43] chi2=513.0099998687084
[Interation 43] chi2=521.6282975472667
[Interation 43] chi2=507.5488551198036
[Interation 43] chi2=548.892107150858
[Interation 42] ('M_0_LRG', np.float64(12.538688251240051)) ('M_1_LRG', np.float64(13.823689144619744)) ('alpha_LRG', np.float64(1.093614160635372)) ('f_sigv_LRG', np.float64(0.9295189628364908)) ('log_Mcent_LRG', np.float64(12.709723898460544)) ('sigma_M_LRG', np.float64(0.1514801431756324))
[Interation 42] ('M_0_LRG', np.float64(12.53539569824147)) ('M_1_LRG', np.float64(13.831070806023643)) ('alpha_LRG', np.float64(1.0891374825579283)) ('f_sigv_LRG', np.float64(0.9377582975167156)) ('log_Mcent_LRG', np.float64(12.715401982415745)) ('sigma_M_LRG', np.float64(0.15979965887250058))
[Interation 42] ('M_0_LRG', np.float64(12.535713177492656)) ('M_1_LRG', np.float64(13.83007563167896)) ('alpha_LRG', np.float64(1.092791994268587)) ('f_sigv_LRG', np.float64(0.9349184688424618)) ('log_Mcent_LRG', np.float64(12.717066427058201)) ('sigma_M_LRG', np.float64(0.16389154990631744))
[Interation 42] ('M_0_LRG', np.float64(12.541488322246645)) ('M_1_LRG', np.float64(13.822279552564765)) ('alpha_LRG', np.float64(1.0827467890389277)) ('f_sigv_LRG', np.float64(0.9327222163174067)) ('log_Mcent_LRG', np.float64(12.71279143031535)) ('sigma_M_LRG', np.float64(0.16399927652056412))
[Interation 42] ('M_0_LRG', np.float64(12.52565478497456)) ('M_1_LRG', np.float64(13.821395988815622)) ('alpha_LRG', np.float64(1.0949553841623954)) ('f_sigv_LRG', np.float64(0.9303368570788876)) ('log_Mcent_LRG', np.float64(12.71175332506662)) ('sigma_M_LRG', np.float64(0.1650042813762959))
[Interation 42] ('M_0_LRG', np.float64(12.518511804842836)) ('M_1_LRG', np.float64(13.827056393849672)) ('alpha_LRG', np.float64(1.1099347706230318)) ('f_sigv_LRG', np.float64(0.9308982163175834)) ('log_Mcent_LRG', np.float64(12.71627497128333)) ('sigma_M_LRG', np.float64(0.1650114442115137))
[Interation 42] ('M_0_LRG', np.float64(12.530858731704601)) ('M_1_LRG', np.float64(13.824543545657262)) ('alpha_LRG', np.float64(1.0914421964903276)) ('f_sigv_LRG', np.float64(0.9280659831442961)) ('log_Mcent_LRG', np.float64(12.714228403286521)) ('sigma_M_LRG', np.float64(0.16419188703477866))
[Interation 42] ('M_0_LRG', np.float64(12.537057267442462)) ('M_1_LRG', np.float64(13.823860883491928)) ('alpha_LRG', np.float64(1.0917462768534816)) ('f_sigv_LRG', np.float64(0.9392115792506435)) ('log_Mcent_LRG', np.float64(12.709958845581948)) ('sigma_M_LRG', np.float64(0.14872813334674162))
[Interation 42] ('M_0_LRG', np.float64(12.517433539738798)) ('M_1_LRG', np.float64(13.82027467402049)) ('alpha_LRG', np.float64(1.0961214685432736)) ('f_sigv_LRG', np.float64(0.930352611406924)) ('log_Mcent_LRG', np.float64(12.707688751863417)) ('sigma_M_LRG', np.float64(0.15411912447094428))
[Interation 42] ('M_0_LRG', np.float64(12.51737152154071)) ('M_1_LRG', np.float64(13.836551054509393)) ('alpha_LRG', np.float64(1.1002761750749437)) ('f_sigv_LRG', np.float64(0.9325377802807288)) ('log_Mcent_LRG', np.float64(12.720747391605885)) ('sigma_M_LRG', np.float64(0.17328399080926116))
[Interation 42] ('M_0_LRG', np.float64(12.539683726177689)) ('M_1_LRG', np.float64(13.841737753647637)) ('alpha_LRG', np.float64(1.0827051946282957)) ('f_sigv_LRG', np.float64(0.9357432354719439)) ('log_Mcent_LRG', np.float64(12.72816905838214)) ('sigma_M_LRG', np.float64(0.18760809299994918))
[Interation 42] ('M_0_LRG', np.float64(12.52988016991925)) ('M_1_LRG', np.float64(13.831811640150587)) ('alpha_LRG', np.float64(1.09412006763763)) ('f_sigv_LRG', np.float64(0.9280250456160295)) ('log_Mcent_LRG', np.float64(12.713036351118772)) ('sigma_M_LRG', np.float64(0.15269971546966488))
[Interation 42] chi2=508.77038363133346
[Interation 42] chi2=512.1597176693016
[Interation 42] chi2=517.8514170603199
[Interation 42] chi2=567.2661061883684
[Interation 42] chi2=483.3841916987978
[Interation 42] chi2=513.8936866005065
[Interation 42] chi2=541.3438916943056
[Interation 42] chi2=466.5641923823651
[Interation 42] chi2=545.0950305726449
[Interation 42] chi2=547.8333787223139
[Interation 42] chi2=475.51375228840607
[Interation 42] chi2=516.4121759824177
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_17.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.532989717138053)) ('M_1_LRG', np.float64(13.829693022825822)) ('alpha_LRG', np.float64(1.0912576012432735)) ('f_sigv_LRG', np.float64(0.9348632481926642)) ('log_Mcent_LRG', np.float64(12.710925277618706)) ('sigma_M_LRG', np.float64(0.1475789023188117))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3275771141052246
Start satellite assignement
Satellite assignement done 0.09194707870483398
LRG mock catalogue done 0.17017006874084473
608060 central galaxies, 91853 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6862008571624756
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_17.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:41
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:41
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:41
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:41
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:41
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:41
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:42
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:42
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:42
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:42
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:43
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:43
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:43
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:43
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:43
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:43
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:43
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Load smu measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:44
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:44
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:44
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:44
Load correlation matrix for LRG at z0.725 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:45
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:45
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:45
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:39
Load correlation matrix for LRG at z0.725 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:39
Load smu measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 44] ('M_0_LRG', np.float64(12.709452382745754)) ('M_1_LRG', np.float64(13.866395161580982)) ('alpha_LRG', np.float64(1.030963456962514)) ('f_sigv_LRG', np.float64(0.8869418822633808)) ('log_Mcent_LRG', np.float64(12.809164621099482)) ('sigma_M_LRG', np.float64(0.3056113456826372))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 44] ('M_0_LRG', np.float64(12.69732511506229)) ('M_1_LRG', np.float64(13.94043937892666)) ('alpha_LRG', np.float64(0.8784690555029222)) ('f_sigv_LRG', np.float64(0.9433851327158105)) ('log_Mcent_LRG', np.float64(12.763912711807464)) ('sigma_M_LRG', np.float64(0.24681482216133577))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 44] ('M_0_LRG', np.float64(12.447545099853693)) ('M_1_LRG', np.float64(13.804216167252019)) ('alpha_LRG', np.float64(1.2063255100781525)) ('f_sigv_LRG', np.float64(0.901004853488873)) ('log_Mcent_LRG', np.float64(12.70077175816728)) ('sigma_M_LRG', np.float64(0.17084248904792992))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 44] ('M_0_LRG', np.float64(12.705862228714594)) ('M_1_LRG', np.float64(13.861336022839039)) ('alpha_LRG', np.float64(1.0082595140045134)) ('f_sigv_LRG', np.float64(0.9290606204447155)) ('log_Mcent_LRG', np.float64(12.775411293492729)) ('sigma_M_LRG', np.float64(0.30377495915636266))
[Interation 44] chi2=702.4091456585745
[Interation 44] chi2=597.0533367564847
[Interation 44] chi2=560.8026153441084
[Interation 44] chi2=639.3153484276837
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 43] ('M_0_LRG', np.float64(12.557716578610448)) ('M_1_LRG', np.float64(13.850559838797372)) ('alpha_LRG', np.float64(1.0616705478617035)) ('f_sigv_LRG', np.float64(0.9371728979626919)) ('log_Mcent_LRG', np.float64(12.754810707339354)) ('sigma_M_LRG', np.float64(0.27231471028975773))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 43] ('M_0_LRG', np.float64(12.530092058138546)) ('M_1_LRG', np.float64(13.835654984886466)) ('alpha_LRG', np.float64(1.0814042499729826)) ('f_sigv_LRG', np.float64(0.8964938629630796)) ('log_Mcent_LRG', np.float64(12.732081246086366)) ('sigma_M_LRG', np.float64(0.20677639610403725))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 43] ('M_0_LRG', np.float64(12.500012931989794)) ('M_1_LRG', np.float64(13.81718132260083)) ('alpha_LRG', np.float64(1.147814260869381)) ('f_sigv_LRG', np.float64(0.8787497719805477)) ('log_Mcent_LRG', np.float64(12.727194824654502)) ('sigma_M_LRG', np.float64(0.2087691560095915))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 43] ('M_0_LRG', np.float64(12.509386300836297)) ('M_1_LRG', np.float64(13.840853502169374)) ('alpha_LRG', np.float64(1.1101220009531028)) ('f_sigv_LRG', np.float64(0.9305323277456122)) ('log_Mcent_LRG', np.float64(12.722907639529542)) ('sigma_M_LRG', np.float64(0.1864038810807252))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 43] ('M_0_LRG', np.float64(12.57678970972049)) ('M_1_LRG', np.float64(13.875535851323649)) ('alpha_LRG', np.float64(1.0414997171900702)) ('f_sigv_LRG', np.float64(0.963570244064602)) ('log_Mcent_LRG', np.float64(12.755512603055852)) ('sigma_M_LRG', np.float64(0.2153116310858435))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 43] ('M_0_LRG', np.float64(12.581900562105467)) ('M_1_LRG', np.float64(13.839455043402218)) ('alpha_LRG', np.float64(1.0651657374464283)) ('f_sigv_LRG', np.float64(0.9566340859538027)) ('log_Mcent_LRG', np.float64(12.735559833633157)) ('sigma_M_LRG', np.float64(0.2098735616582761))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 43] ('M_0_LRG', np.float64(12.483127677449955)) ('M_1_LRG', np.float64(13.848172627319494)) ('alpha_LRG', np.float64(1.1233011420082621)) ('f_sigv_LRG', np.float64(0.9181161444591253)) ('log_Mcent_LRG', np.float64(12.735222740725296)) ('sigma_M_LRG', np.float64(0.19217034282099998))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 43] ('M_0_LRG', np.float64(12.56142650927157)) ('M_1_LRG', np.float64(13.836695144180752)) ('alpha_LRG', np.float64(1.095986903528819)) ('f_sigv_LRG', np.float64(0.9119361711798163)) ('log_Mcent_LRG', np.float64(12.74043649600268)) ('sigma_M_LRG', np.float64(0.22163808828090054))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 43] ('M_0_LRG', np.float64(12.542293872369935)) ('M_1_LRG', np.float64(13.828356975116217)) ('alpha_LRG', np.float64(1.104336442330865)) ('f_sigv_LRG', np.float64(0.9163693194994083)) ('log_Mcent_LRG', np.float64(12.718122200036309)) ('sigma_M_LRG', np.float64(0.17579574168139706))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 43] ('M_0_LRG', np.float64(12.413877105895713)) ('M_1_LRG', np.float64(13.81900683483806)) ('alpha_LRG', np.float64(1.1848960486211317)) ('f_sigv_LRG', np.float64(0.9381227456155345)) ('log_Mcent_LRG', np.float64(12.701966994049046)) ('sigma_M_LRG', np.float64(0.14588774752369604))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 43] ('M_0_LRG', np.float64(12.62305691113361)) ('M_1_LRG', np.float64(13.81426637061691)) ('alpha_LRG', np.float64(1.0353824612789275)) ('f_sigv_LRG', np.float64(0.961173091296793)) ('log_Mcent_LRG', np.float64(12.705564597997832)) ('sigma_M_LRG', np.float64(0.15614943241582702))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 43] ('M_0_LRG', np.float64(12.563645613278998)) ('M_1_LRG', np.float64(13.838437892294849)) ('alpha_LRG', np.float64(1.0895550572843222)) ('f_sigv_LRG', np.float64(0.9268923570954066)) ('log_Mcent_LRG', np.float64(12.74234575199726)) ('sigma_M_LRG', np.float64(0.2017706694612061))
[Interation 43] chi2=508.2335829504001
[Interation 43] chi2=553.5278058447784
[Interation 43] chi2=554.7389940454093
[Interation 43] chi2=509.37743117605123
[Interation 43] chi2=494.54487398429205
[Interation 43] chi2=471.04637676778356
[Interation 43] chi2=510.4150927451779
[Interation 43] chi2=557.3248327253654
[Interation 43] chi2=542.4669937352337
[Interation 43] chi2=524.6930312709768
[Interation 43] chi2=470.94265303693726
[Interation 43] chi2=495.8651120118046
[Interation 45] ('M_0_LRG', np.float64(12.56170147959626)) ('M_1_LRG', np.float64(13.832564135421988)) ('alpha_LRG', np.float64(1.0742640840555184)) ('f_sigv_LRG', np.float64(0.937234230839563)) ('log_Mcent_LRG', np.float64(12.724455839791148)) ('sigma_M_LRG', np.float64(0.177525956961883))
[Interation 45] ('M_0_LRG', np.float64(12.494254467698891)) ('M_1_LRG', np.float64(13.828623634697317)) ('alpha_LRG', np.float64(1.1205354757724024)) ('f_sigv_LRG', np.float64(0.9339450868224841)) ('log_Mcent_LRG', np.float64(12.715151754953636)) ('sigma_M_LRG', np.float64(0.16378284625998796))
[Interation 45] ('M_0_LRG', np.float64(12.506782218191677)) ('M_1_LRG', np.float64(13.831225464961454)) ('alpha_LRG', np.float64(1.1070472534299003)) ('f_sigv_LRG', np.float64(0.9355783050660218)) ('log_Mcent_LRG', np.float64(12.71866121335525)) ('sigma_M_LRG', np.float64(0.16955992636620532))
[Interation 45] ('M_0_LRG', np.float64(12.545700560240402)) ('M_1_LRG', np.float64(13.830748430386716)) ('alpha_LRG', np.float64(1.09920402283273)) ('f_sigv_LRG', np.float64(0.9315201478009704)) ('log_Mcent_LRG', np.float64(12.721665193720742)) ('sigma_M_LRG', np.float64(0.16558053980299736))
[Interation 45] chi2=508.8633818063981
[Interation 45] chi2=515.6813746212298
[Interation 45] chi2=495.2044306207241
[Interation 45] chi2=495.73119399797224
[Interation 44] ('M_0_LRG', np.float64(12.526590380106475)) ('M_1_LRG', np.float64(13.812995388418353)) ('alpha_LRG', np.float64(1.1103799599316075)) ('f_sigv_LRG', np.float64(0.9243968616700609)) ('log_Mcent_LRG', np.float64(12.70264774191339)) ('sigma_M_LRG', np.float64(0.1391280571276015))
[Interation 44] ('M_0_LRG', np.float64(12.522694697631897)) ('M_1_LRG', np.float64(13.826887254828252)) ('alpha_LRG', np.float64(1.0927473499052343)) ('f_sigv_LRG', np.float64(0.9357465195018466)) ('log_Mcent_LRG', np.float64(12.713838288834024)) ('sigma_M_LRG', np.float64(0.15622562244920746))
[Interation 44] ('M_0_LRG', np.float64(12.553714156604759)) ('M_1_LRG', np.float64(13.825071680636437)) ('alpha_LRG', np.float64(1.0920694214096367)) ('f_sigv_LRG', np.float64(0.9322780020081425)) ('log_Mcent_LRG', np.float64(12.711562920653325)) ('sigma_M_LRG', np.float64(0.1438526518337741))
[Interation 44] ('M_0_LRG', np.float64(12.531491578603086)) ('M_1_LRG', np.float64(13.835764590731433)) ('alpha_LRG', np.float64(1.084158650700583)) ('f_sigv_LRG', np.float64(0.9494388176952097)) ('log_Mcent_LRG', np.float64(12.708822158013293)) ('sigma_M_LRG', np.float64(0.13729741363904058))
[Interation 44] ('M_0_LRG', np.float64(12.55627830229546)) ('M_1_LRG', np.float64(13.818516161117513)) ('alpha_LRG', np.float64(1.0793296100973329)) ('f_sigv_LRG', np.float64(0.933819625158792)) ('log_Mcent_LRG', np.float64(12.704291339027993)) ('sigma_M_LRG', np.float64(0.14290103682629085))
[Interation 44] ('M_0_LRG', np.float64(12.528500200902895)) ('M_1_LRG', np.float64(13.82683460346785)) ('alpha_LRG', np.float64(1.0920348666821025)) ('f_sigv_LRG', np.float64(0.937817189240782)) ('log_Mcent_LRG', np.float64(12.713146156804655)) ('sigma_M_LRG', np.float64(0.1596185469671343))
[Interation 44] ('M_0_LRG', np.float64(12.539893507762676)) ('M_1_LRG', np.float64(13.82359194597536)) ('alpha_LRG', np.float64(1.0948836499453052)) ('f_sigv_LRG', np.float64(0.935738733585088)) ('log_Mcent_LRG', np.float64(12.707785237772725)) ('sigma_M_LRG', np.float64(0.13829913591699816))
[Interation 44] ('M_0_LRG', np.float64(12.552937019091855)) ('M_1_LRG', np.float64(13.818549987461815)) ('alpha_LRG', np.float64(1.091539567041948)) ('f_sigv_LRG', np.float64(0.9345650902967046)) ('log_Mcent_LRG', np.float64(12.71320570521908)) ('sigma_M_LRG', np.float64(0.16247691869119735))
[Interation 44] ('M_0_LRG', np.float64(12.555706095495845)) ('M_1_LRG', np.float64(13.828699040535954)) ('alpha_LRG', np.float64(1.0764445845858117)) ('f_sigv_LRG', np.float64(0.9392087725926487)) ('log_Mcent_LRG', np.float64(12.712499537516573)) ('sigma_M_LRG', np.float64(0.15410193736538808))
[Interation 44] ('M_0_LRG', np.float64(12.602085777080726)) ('M_1_LRG', np.float64(13.817067598218863)) ('alpha_LRG', np.float64(1.053516702181299)) ('f_sigv_LRG', np.float64(0.9437480109032709)) ('log_Mcent_LRG', np.float64(12.709543170412804)) ('sigma_M_LRG', np.float64(0.16302412857597093))
[Interation 44] ('M_0_LRG', np.float64(12.557804915934657)) ('M_1_LRG', np.float64(13.811860107880433)) ('alpha_LRG', np.float64(1.079768368503466)) ('f_sigv_LRG', np.float64(0.9350825228832352)) ('log_Mcent_LRG', np.float64(12.699750566657325)) ('sigma_M_LRG', np.float64(0.13728509182714205))
[Interation 44] ('M_0_LRG', np.float64(12.547169395642381)) ('M_1_LRG', np.float64(13.824473612535273)) ('alpha_LRG', np.float64(1.099877546306105)) ('f_sigv_LRG', np.float64(0.9261768872835835)) ('log_Mcent_LRG', np.float64(12.716041176619411)) ('sigma_M_LRG', np.float64(0.15488320381703546))
[Interation 44] chi2=516.5561839222447
[Interation 44] chi2=496.21960054587043
[Interation 44] chi2=471.27430144199684
[Interation 44] chi2=462.21121071601044
[Interation 44] chi2=487.39384948450595
[Interation 44] chi2=473.92419834354376
[Interation 44] chi2=466.05954197240646
[Interation 44] chi2=538.5034904168687
[Interation 44] chi2=501.0771230061182
[Interation 44] chi2=542.6754135707491
[Interation 44] chi2=506.89468126751
[Interation 44] chi2=472.2376136381863
[Interation 46] ('M_0_LRG', np.float64(12.5600958986099)) ('M_1_LRG', np.float64(13.819706723734377)) ('alpha_LRG', np.float64(1.0762309514488402)) ('f_sigv_LRG', np.float64(0.9397127191145148)) ('log_Mcent_LRG', np.float64(12.706821876186)) ('sigma_M_LRG', np.float64(0.15028170450250722))
[Interation 46] ('M_0_LRG', np.float64(12.554851215979722)) ('M_1_LRG', np.float64(13.823717156513997)) ('alpha_LRG', np.float64(1.0837229737392817)) ('f_sigv_LRG', np.float64(0.9382090003245319)) ('log_Mcent_LRG', np.float64(12.706811559263041)) ('sigma_M_LRG', np.float64(0.13864939215795252))
[Interation 46] ('M_0_LRG', np.float64(12.555983716613998)) ('M_1_LRG', np.float64(13.824027515447119)) ('alpha_LRG', np.float64(1.0708761510620877)) ('f_sigv_LRG', np.float64(0.9459607324695853)) ('log_Mcent_LRG', np.float64(12.716005886191324)) ('sigma_M_LRG', np.float64(0.1800018199840273))
[Interation 46] ('M_0_LRG', np.float64(12.551008035474075)) ('M_1_LRG', np.float64(13.826585674572994)) ('alpha_LRG', np.float64(1.0821231339339512)) ('f_sigv_LRG', np.float64(0.9402162789862626)) ('log_Mcent_LRG', np.float64(12.715724493884812)) ('sigma_M_LRG', np.float64(0.16422472552673106))
[Interation 46] chi2=423.3348910150813
[Interation 46] chi2=515.2338870254123
[Interation 46] chi2=470.49380751272764
[Interation 46] chi2=417.6065298942445
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_18.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.545182250420778)) ('M_1_LRG', np.float64(13.820273162206508)) ('alpha_LRG', np.float64(1.095329541192563)) ('f_sigv_LRG', np.float64(0.9320637210203234)) ('log_Mcent_LRG', np.float64(12.710660223896177)) ('sigma_M_LRG', np.float64(0.1519387967532269))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3069274425506592
Start satellite assignement
Satellite assignement done 0.07740235328674316
LRG mock catalogue done 0.15401244163513184
607089 central galaxies, 92380 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6400911808013916
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_18.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:35
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:35
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:35
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:35
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:35
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:35
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:35
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:35
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:35
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:35
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:35
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:35
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:35
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:35
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:35
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:35
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 45] ('M_0_LRG', np.float64(12.668443924683576)) ('M_1_LRG', np.float64(13.93103956988639)) ('alpha_LRG', np.float64(0.848793419216558)) ('f_sigv_LRG', np.float64(1.2993873063848704)) ('log_Mcent_LRG', np.float64(12.767075434798333)) ('sigma_M_LRG', np.float64(0.04989908087526079))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 45] ('M_0_LRG', np.float64(12.52715245372541)) ('M_1_LRG', np.float64(13.941524029275437)) ('alpha_LRG', np.float64(0.9361923917587902)) ('f_sigv_LRG', np.float64(0.8590095354876559)) ('log_Mcent_LRG', np.float64(12.755361239430382)) ('sigma_M_LRG', np.float64(0.24179596292288658))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 45] ('M_0_LRG', np.float64(12.77340247571824)) ('M_1_LRG', np.float64(13.889299996060652)) ('alpha_LRG', np.float64(0.8473239308256757)) ('f_sigv_LRG', np.float64(0.9359484008805674)) ('log_Mcent_LRG', np.float64(12.719473100017831)) ('sigma_M_LRG', np.float64(0.2514752183197595))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 45] ('M_0_LRG', np.float64(12.693743353199043)) ('M_1_LRG', np.float64(13.97037415225998)) ('alpha_LRG', np.float64(0.902120231336843)) ('f_sigv_LRG', np.float64(0.9064379641551445)) ('log_Mcent_LRG', np.float64(12.808709817122377)) ('sigma_M_LRG', np.float64(0.34552583888775956))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 45] ('M_0_LRG', np.float64(12.677585963030623)) ('M_1_LRG', np.float64(14.101623555823227)) ('alpha_LRG', np.float64(0.78223297421301)) ('f_sigv_LRG', np.float64(1.0416145264796293)) ('log_Mcent_LRG', np.float64(12.829305501388019)) ('sigma_M_LRG', np.float64(0.3544762820563273))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 45] ('M_0_LRG', np.float64(12.455776220447907)) ('M_1_LRG', np.float64(13.950199571961297)) ('alpha_LRG', np.float64(1.0317324269758201)) ('f_sigv_LRG', np.float64(0.9659165344745809)) ('log_Mcent_LRG', np.float64(12.759761771126282)) ('sigma_M_LRG', np.float64(0.21311139398576728))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 45] ('M_0_LRG', np.float64(12.618714266101506)) ('M_1_LRG', np.float64(14.01632647490995)) ('alpha_LRG', np.float64(1.041843646349495)) ('f_sigv_LRG', np.float64(0.9066579466703641)) ('log_Mcent_LRG', np.float64(12.855441321671531)) ('sigma_M_LRG', np.float64(0.3631258930885543))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 45] ('M_0_LRG', np.float64(12.865098911173519)) ('M_1_LRG', np.float64(13.813557736439071)) ('alpha_LRG', np.float64(0.9773322154526961)) ('f_sigv_LRG', np.float64(0.9226884540692505)) ('log_Mcent_LRG', np.float64(12.791126946073803)) ('sigma_M_LRG', np.float64(0.3684256265318145))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 45] ('M_0_LRG', np.float64(12.41072880002534)) ('M_1_LRG', np.float64(13.934266158466196)) ('alpha_LRG', np.float64(1.1876391601078207)) ('f_sigv_LRG', np.float64(0.9643505445965033)) ('log_Mcent_LRG', np.float64(12.806668745860238)) ('sigma_M_LRG', np.float64(0.24226320519007932))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 45] ('M_0_LRG', np.float64(12.477569701034406)) ('M_1_LRG', np.float64(13.797001208008968)) ('alpha_LRG', np.float64(0.9926623706151378)) ('f_sigv_LRG', np.float64(1.0485033266266142)) ('log_Mcent_LRG', np.float64(12.733032996690977)) ('sigma_M_LRG', np.float64(0.2757187276411297))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 45] ('M_0_LRG', np.float64(12.57721238928129)) ('M_1_LRG', np.float64(14.058156687873236)) ('alpha_LRG', np.float64(1.0084787171854073)) ('f_sigv_LRG', np.float64(0.8251111771608324)) ('log_Mcent_LRG', np.float64(12.906642378074077)) ('sigma_M_LRG', np.float64(0.4451758483913324))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 45] ('M_0_LRG', np.float64(12.356540007186062)) ('M_1_LRG', np.float64(13.895855200180808)) ('alpha_LRG', np.float64(1.1115904236910839)) ('f_sigv_LRG', np.float64(0.960904522458883)) ('log_Mcent_LRG', np.float64(12.85436165499493)) ('sigma_M_LRG', np.float64(0.36791684214721765))
[Interation 45] chi2=2306.593028449191
[Interation 45] chi2=966.5906651191475
[Interation 45] chi2=975.1661539899527
[Interation 45] chi2=763.0584724110994
[Interation 45] chi2=995.7544509966882
[Interation 45] chi2=960.5408924604933
[Interation 45] chi2=593.9960499731664
[Interation 45] chi2=1215.0729018832376
[Interation 45] chi2=714.2241958567067
[Interation 45] chi2=1123.5041685848225
[Interation 45] chi2=1038.5137819010595
[Interation 45] chi2=736.2250115464816
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 47] ('M_0_LRG', np.float64(12.51578263893992)) ('M_1_LRG', np.float64(13.808470151517048)) ('alpha_LRG', np.float64(1.1295179450626163)) ('f_sigv_LRG', np.float64(0.9167689209526997)) ('log_Mcent_LRG', np.float64(12.714652173004694)) ('sigma_M_LRG', np.float64(0.1768543094709275))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 47] ('M_0_LRG', np.float64(12.56892172220441)) ('M_1_LRG', np.float64(13.834134663168742)) ('alpha_LRG', np.float64(1.0723655728528891)) ('f_sigv_LRG', np.float64(0.9428033473946478)) ('log_Mcent_LRG', np.float64(12.705389653806613)) ('sigma_M_LRG', np.float64(0.13012208974074202))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 47] ('M_0_LRG', np.float64(12.44237557887643)) ('M_1_LRG', np.float64(13.789277973098113)) ('alpha_LRG', np.float64(1.1524100902050058)) ('f_sigv_LRG', np.float64(0.9399623626922008)) ('log_Mcent_LRG', np.float64(12.665547501114204)) ('sigma_M_LRG', np.float64(0.06122612595417576))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 47] ('M_0_LRG', np.float64(12.432822915407252)) ('M_1_LRG', np.float64(13.855076956466846)) ('alpha_LRG', np.float64(1.1260871742811474)) ('f_sigv_LRG', np.float64(0.9083858913717969)) ('log_Mcent_LRG', np.float64(12.742343936219104)) ('sigma_M_LRG', np.float64(0.23992421812365372))
[Interation 47] chi2=558.726016115174
[Interation 47] chi2=501.5156989298982
[Interation 47] chi2=484.17487127420554
[Interation 47] chi2=567.2343582645119
[Interation 46] ('M_0_LRG', np.float64(12.553759884764279)) ('M_1_LRG', np.float64(13.828463750950514)) ('alpha_LRG', np.float64(1.0726472911009726)) ('f_sigv_LRG', np.float64(0.9390345693553863)) ('log_Mcent_LRG', np.float64(12.718879795620163)) ('sigma_M_LRG', np.float64(0.18155810167855652))
[Interation 46] ('M_0_LRG', np.float64(12.544821434310983)) ('M_1_LRG', np.float64(13.846745895973207)) ('alpha_LRG', np.float64(1.084091241155144)) ('f_sigv_LRG', np.float64(0.9438135056381022)) ('log_Mcent_LRG', np.float64(12.725928161469499)) ('sigma_M_LRG', np.float64(0.17397324441920714))
[Interation 46] ('M_0_LRG', np.float64(12.475309875357933)) ('M_1_LRG', np.float64(13.84521958827732)) ('alpha_LRG', np.float64(1.1232430748986653)) ('f_sigv_LRG', np.float64(0.9380817790500505)) ('log_Mcent_LRG', np.float64(12.732477186552154)) ('sigma_M_LRG', np.float64(0.1982843813336968))
[Interation 46] ('M_0_LRG', np.float64(12.510743779486816)) ('M_1_LRG', np.float64(13.82790350791676)) ('alpha_LRG', np.float64(1.1139999266872789)) ('f_sigv_LRG', np.float64(0.9423854893639744)) ('log_Mcent_LRG', np.float64(12.70854468939811)) ('sigma_M_LRG', np.float64(0.13730452477023697))
[Interation 46] ('M_0_LRG', np.float64(12.590483716734518)) ('M_1_LRG', np.float64(13.822660657723151)) ('alpha_LRG', np.float64(1.0748535955341683)) ('f_sigv_LRG', np.float64(0.9432086208167427)) ('log_Mcent_LRG', np.float64(12.711136661494926)) ('sigma_M_LRG', np.float64(0.15412747164302965))
[Interation 46] ('M_0_LRG', np.float64(12.486923193252847)) ('M_1_LRG', np.float64(13.848047386129707)) ('alpha_LRG', np.float64(1.1093837484461122)) ('f_sigv_LRG', np.float64(0.9272127032590831)) ('log_Mcent_LRG', np.float64(12.736052812269987)) ('sigma_M_LRG', np.float64(0.20955750901398057))
[Interation 46] ('M_0_LRG', np.float64(12.47219582922695)) ('M_1_LRG', np.float64(13.856616538701179)) ('alpha_LRG', np.float64(1.1018429763420143)) ('f_sigv_LRG', np.float64(0.9419222642431884)) ('log_Mcent_LRG', np.float64(12.735551017213009)) ('sigma_M_LRG', np.float64(0.1967994487397614))
[Interation 46] ('M_0_LRG', np.float64(12.509202400244996)) ('M_1_LRG', np.float64(13.84690656341875)) ('alpha_LRG', np.float64(1.1006244931407168)) ('f_sigv_LRG', np.float64(0.9372538805913623)) ('log_Mcent_LRG', np.float64(12.735701039486935)) ('sigma_M_LRG', np.float64(0.20276020242877235))
[Interation 46] ('M_0_LRG', np.float64(12.568256170286665)) ('M_1_LRG', np.float64(13.831742287903465)) ('alpha_LRG', np.float64(1.0625904009225398)) ('f_sigv_LRG', np.float64(0.9480580000611843)) ('log_Mcent_LRG', np.float64(12.718783981264549)) ('sigma_M_LRG', np.float64(0.1673693792778419))
[Interation 46] ('M_0_LRG', np.float64(12.506491475013938)) ('M_1_LRG', np.float64(13.854859220153388)) ('alpha_LRG', np.float64(1.094034931220962)) ('f_sigv_LRG', np.float64(0.9437079566024279)) ('log_Mcent_LRG', np.float64(12.733283299088543)) ('sigma_M_LRG', np.float64(0.19300331047427594))
[Interation 46] ('M_0_LRG', np.float64(12.413062804237697)) ('M_1_LRG', np.float64(13.851941679499461)) ('alpha_LRG', np.float64(1.1507415287217202)) ('f_sigv_LRG', np.float64(0.9384236325821274)) ('log_Mcent_LRG', np.float64(12.738140535067156)) ('sigma_M_LRG', np.float64(0.21001853454410913))
[Interation 46] ('M_0_LRG', np.float64(12.497844279888067)) ('M_1_LRG', np.float64(13.858378414519613)) ('alpha_LRG', np.float64(1.0927145044946114)) ('f_sigv_LRG', np.float64(0.9360457731101514)) ('log_Mcent_LRG', np.float64(12.741060710525828)) ('sigma_M_LRG', np.float64(0.21086242227574742))
[Interation 46] chi2=485.51108776623596
[Interation 46] chi2=522.5914773665495
[Interation 46] chi2=530.9943432532652
[Interation 46] chi2=525.976041138486
[Interation 46] chi2=483.5135860808793
[Interation 46] chi2=471.1028081971679
[Interation 46] chi2=496.8803022216679
[Interation 46] chi2=500.4444595320646
[Interation 46] chi2=500.5723923796441
[Interation 46] chi2=482.1558114450135
[Interation 46] chi2=475.95148801398636
[Interation 46] chi2=501.8802512856963
[Interation 48] ('M_0_LRG', np.float64(12.471744390738738)) ('M_1_LRG', np.float64(13.83837160880282)) ('alpha_LRG', np.float64(1.1158165650405176)) ('f_sigv_LRG', np.float64(0.944878002216064)) ('log_Mcent_LRG', np.float64(12.717045575795884)) ('sigma_M_LRG', np.float64(0.16475598620478132))
[Interation 48] ('M_0_LRG', np.float64(12.513429952278006)) ('M_1_LRG', np.float64(13.832649772495289)) ('alpha_LRG', np.float64(1.1027712761298514)) ('f_sigv_LRG', np.float64(0.943128071042236)) ('log_Mcent_LRG', np.float64(12.71482920093216)) ('sigma_M_LRG', np.float64(0.15484173902353682))
[Interation 48] ('M_0_LRG', np.float64(12.529947051892034)) ('M_1_LRG', np.float64(13.84175716662932)) ('alpha_LRG', np.float64(1.0917885215583942)) ('f_sigv_LRG', np.float64(0.9395420966031165)) ('log_Mcent_LRG', np.float64(12.727990330828518)) ('sigma_M_LRG', np.float64(0.1876963461688304))
[Interation 48] ('M_0_LRG', np.float64(12.483967170752782)) ('M_1_LRG', np.float64(13.857409941174938)) ('alpha_LRG', np.float64(1.094695181010559)) ('f_sigv_LRG', np.float64(0.9463177968979993)) ('log_Mcent_LRG', np.float64(12.742188269445746)) ('sigma_M_LRG', np.float64(0.21445575193430522))
[Interation 48] chi2=470.16427441483677
[Interation 48] chi2=523.7725042412795
[Interation 48] chi2=439.8224902094398
[Interation 48] chi2=494.497172459266
[Interation 47] ('M_0_LRG', np.float64(12.480972158910147)) ('M_1_LRG', np.float64(13.83996870410393)) ('alpha_LRG', np.float64(1.1037176755616356)) ('f_sigv_LRG', np.float64(0.9414858299608969)) ('log_Mcent_LRG', np.float64(12.720096305086493)) ('sigma_M_LRG', np.float64(0.17114627032617674))
[Interation 47] ('M_0_LRG', np.float64(12.421515679703118)) ('M_1_LRG', np.float64(13.82754456300093)) ('alpha_LRG', np.float64(1.1363308903380478)) ('f_sigv_LRG', np.float64(0.9289545012253334)) ('log_Mcent_LRG', np.float64(12.704686588689407)) ('sigma_M_LRG', np.float64(0.13754789982286858))
[Interation 47] ('M_0_LRG', np.float64(12.466134895194578)) ('M_1_LRG', np.float64(13.834401294348933)) ('alpha_LRG', np.float64(1.1078669420840626)) ('f_sigv_LRG', np.float64(0.9512592312565515)) ('log_Mcent_LRG', np.float64(12.712717427335162)) ('sigma_M_LRG', np.float64(0.15660443238029498))
[Interation 47] ('M_0_LRG', np.float64(12.478972594751593)) ('M_1_LRG', np.float64(13.83676137186294)) ('alpha_LRG', np.float64(1.1133961624143822)) ('f_sigv_LRG', np.float64(0.9293134495805249)) ('log_Mcent_LRG', np.float64(12.726537864969032)) ('sigma_M_LRG', np.float64(0.1867529731171217))
[Interation 47] ('M_0_LRG', np.float64(12.533844169769846)) ('M_1_LRG', np.float64(13.829592721742104)) ('alpha_LRG', np.float64(1.087555971885262)) ('f_sigv_LRG', np.float64(0.9396885123712521)) ('log_Mcent_LRG', np.float64(12.710126498622992)) ('sigma_M_LRG', np.float64(0.15050602986624156))
[Interation 47] ('M_0_LRG', np.float64(12.44333256491616)) ('M_1_LRG', np.float64(13.842037608265066)) ('alpha_LRG', np.float64(1.1226179231895435)) ('f_sigv_LRG', np.float64(0.9481882859220486)) ('log_Mcent_LRG', np.float64(12.71979141626836)) ('sigma_M_LRG', np.float64(0.165076562844938))
[Interation 47] ('M_0_LRG', np.float64(12.487134652636975)) ('M_1_LRG', np.float64(13.837577938793753)) ('alpha_LRG', np.float64(1.1178745277388857)) ('f_sigv_LRG', np.float64(0.9409516042457446)) ('log_Mcent_LRG', np.float64(12.71742262198725)) ('sigma_M_LRG', np.float64(0.1632170716989615))
[Interation 47] ('M_0_LRG', np.float64(12.41906087309087)) ('M_1_LRG', np.float64(13.839281421838459)) ('alpha_LRG', np.float64(1.131397839552348)) ('f_sigv_LRG', np.float64(0.9486305849892461)) ('log_Mcent_LRG', np.float64(12.714668053954409)) ('sigma_M_LRG', np.float64(0.15683928020437937))
[Interation 47] ('M_0_LRG', np.float64(12.443877655224597)) ('M_1_LRG', np.float64(13.8378312915857)) ('alpha_LRG', np.float64(1.1262109727586347)) ('f_sigv_LRG', np.float64(0.9401845205199657)) ('log_Mcent_LRG', np.float64(12.713420752222289)) ('sigma_M_LRG', np.float64(0.14873480168077619))
[Interation 47] ('M_0_LRG', np.float64(12.564736574310025)) ('M_1_LRG', np.float64(13.836338366601794)) ('alpha_LRG', np.float64(1.084954182267026)) ('f_sigv_LRG', np.float64(0.9312463271132235)) ('log_Mcent_LRG', np.float64(12.725773096925275)) ('sigma_M_LRG', np.float64(0.18157620748197228))
[Interation 47] ('M_0_LRG', np.float64(12.423571710587868)) ('M_1_LRG', np.float64(13.830746393693842)) ('alpha_LRG', np.float64(1.1326849690870069)) ('f_sigv_LRG', np.float64(0.9360757042608384)) ('log_Mcent_LRG', np.float64(12.706959739939315)) ('sigma_M_LRG', np.float64(0.14205566021830068))
[Interation 47] ('M_0_LRG', np.float64(12.51424096344725)) ('M_1_LRG', np.float64(13.846112958034238)) ('alpha_LRG', np.float64(1.0792883211722677)) ('f_sigv_LRG', np.float64(0.9514518180854927)) ('log_Mcent_LRG', np.float64(12.724207494908494)) ('sigma_M_LRG', np.float64(0.1779935764203996))
[Interation 47] chi2=484.86176407492263
[Interation 47] chi2=497.0249860352035
[Interation 47] chi2=513.6173103452389
[Interation 47] chi2=497.7130850010967
[Interation 47] chi2=492.39324212656646
[Interation 47] chi2=529.0870210894973
[Interation 47] chi2=497.17156493736286
[Interation 47] chi2=501.1082529398336
[Interation 47] chi2=517.9936119483117
[Interation 47] chi2=544.8789421794219
[Interation 47] chi2=514.7613412743739
[Interation 47] chi2=513.3263333788675
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_19.npy
Set number of threads to 32
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.428746592004181)) ('M_1_LRG', np.float64(13.842687465782316)) ('alpha_LRG', np.float64(1.121829738351196)) ('f_sigv_LRG', np.float64(0.9470602853431472)) ('log_Mcent_LRG', np.float64(12.71884666516946)) ('sigma_M_LRG', np.float64(0.16521801501509714))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3878815174102783
Start satellite assignement
Satellite assignement done 0.07916736602783203
LRG mock catalogue done 0.15596866607666016
605071 central galaxies, 95029 satellites, fraction of satellite 0.14 
Done overall time  LRG 0.7430346012115479
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.6-0.8_dv-obs_19.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:42
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:42
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:42
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:43
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:43
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:43
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:38
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:39
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:46
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:46
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:46
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.725 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:46
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:47
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:47
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:47
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:47
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:47
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:47
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:47
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:47
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:47
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:47
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:47
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:47
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:48
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.725 ...
Done took 00:00:48
Load rppi measurements at z0.6-0.8 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:48
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.725 loaded, took 00:00:48
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load rppi measurements at z0.6-0.8 for LRG...
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load smu measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Load correlation matrix for LRG at z0.725 ...
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 49] ('M_0_LRG', np.float64(12.91340500521722)) ('M_1_LRG', np.float64(14.000550477894928)) ('alpha_LRG', np.float64(0.9829348139962216)) ('f_sigv_LRG', np.float64(0.8988180178732519)) ('log_Mcent_LRG', np.float64(12.858951318657383)) ('sigma_M_LRG', np.float64(0.3310820700788626))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 49] ('M_0_LRG', np.float64(12.631653633368598)) ('M_1_LRG', np.float64(13.919697619471666)) ('alpha_LRG', np.float64(0.9278521917056313)) ('f_sigv_LRG', np.float64(0.9733015715372272)) ('log_Mcent_LRG', np.float64(12.827516591922812)) ('sigma_M_LRG', np.float64(0.34108146854841365))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 49] ('M_0_LRG', np.float64(12.487475600782123)) ('M_1_LRG', np.float64(14.162876152966522)) ('alpha_LRG', np.float64(0.8223320172832375)) ('f_sigv_LRG', np.float64(1.0583339542476624)) ('log_Mcent_LRG', np.float64(13.01494939946407)) ('sigma_M_LRG', np.float64(0.6155207237464279))
[Interation 49] chi2=1767.8839716890022
[Interation 49] chi2=724.3751151815826
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 49] ('M_0_LRG', np.float64(12.498069494310439)) ('M_1_LRG', np.float64(14.017253691973952)) ('alpha_LRG', np.float64(1.1366628748789647)) ('f_sigv_LRG', np.float64(0.8978532326163148)) ('log_Mcent_LRG', np.float64(12.89921316327859)) ('sigma_M_LRG', np.float64(0.3647694596938823))
[Interation 49] chi2=2601.086046570251
[Interation 49] chi2=908.8642270573237
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 48] ('M_0_LRG', np.float64(12.576124480292505)) ('M_1_LRG', np.float64(13.840474760943481)) ('alpha_LRG', np.float64(1.06889224157676)) ('f_sigv_LRG', np.float64(0.9244951278129312)) ('log_Mcent_LRG', np.float64(12.743559712807713)) ('sigma_M_LRG', np.float64(0.2282846641472796))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 48] ('M_0_LRG', np.float64(12.630730287405225)) ('M_1_LRG', np.float64(13.817084993626535)) ('alpha_LRG', np.float64(1.0831245626386452)) ('f_sigv_LRG', np.float64(0.9193492970700633)) ('log_Mcent_LRG', np.float64(12.73368122570004)) ('sigma_M_LRG', np.float64(0.2068314210622278))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 48] ('M_0_LRG', np.float64(12.629402616095721)) ('M_1_LRG', np.float64(13.847957763333659)) ('alpha_LRG', np.float64(1.046309469961143)) ('f_sigv_LRG', np.float64(0.9318793188812112)) ('log_Mcent_LRG', np.float64(12.746744363643764)) ('sigma_M_LRG', np.float64(0.23389361154156313))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 48] ('M_0_LRG', np.float64(12.59268498152444)) ('M_1_LRG', np.float64(13.856909197565907)) ('alpha_LRG', np.float64(1.0660467722377671)) ('f_sigv_LRG', np.float64(0.907450516487958)) ('log_Mcent_LRG', np.float64(12.756207740578722)) ('sigma_M_LRG', np.float64(0.24347699302552195))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 48] ('M_0_LRG', np.float64(12.4849749037555)) ('M_1_LRG', np.float64(13.837597417728064)) ('alpha_LRG', np.float64(1.0733322076622966)) ('f_sigv_LRG', np.float64(0.9543608340026127)) ('log_Mcent_LRG', np.float64(12.710455509725314)) ('sigma_M_LRG', np.float64(0.1823788749900082))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 48] ('M_0_LRG', np.float64(12.56525573989748)) ('M_1_LRG', np.float64(13.80057187463628)) ('alpha_LRG', np.float64(1.1063929855417547)) ('f_sigv_LRG', np.float64(0.9300610579368528)) ('log_Mcent_LRG', np.float64(12.70180533525643)) ('sigma_M_LRG', np.float64(0.15348214009062))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 48] ('M_0_LRG', np.float64(12.566737835807235)) ('M_1_LRG', np.float64(13.856715441042274)) ('alpha_LRG', np.float64(1.0699341771394835)) ('f_sigv_LRG', np.float64(0.9478276507147381)) ('log_Mcent_LRG', np.float64(12.736870543468873)) ('sigma_M_LRG', np.float64(0.1931716185889209))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 48] ('M_0_LRG', np.float64(12.503330366790037)) ('M_1_LRG', np.float64(13.848313992395346)) ('alpha_LRG', np.float64(1.102661108659635)) ('f_sigv_LRG', np.float64(0.9458606529715825)) ('log_Mcent_LRG', np.float64(12.753790924467555)) ('sigma_M_LRG', np.float64(0.2430951147828681))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 48] ('M_0_LRG', np.float64(12.512633609760579)) ('M_1_LRG', np.float64(13.801384862138038)) ('alpha_LRG', np.float64(1.1187114444387034)) ('f_sigv_LRG', np.float64(0.9323829390986701)) ('log_Mcent_LRG', np.float64(12.691808249495237)) ('sigma_M_LRG', np.float64(0.12207128356171654))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 48] ('M_0_LRG', np.float64(12.614669864194257)) ('M_1_LRG', np.float64(13.824502320761226)) ('alpha_LRG', np.float64(1.0763177228832232)) ('f_sigv_LRG', np.float64(0.9152565318180141)) ('log_Mcent_LRG', np.float64(12.746044331235936)) ('sigma_M_LRG', np.float64(0.2354964176947401))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 48] ('M_0_LRG', np.float64(12.600131029577488)) ('M_1_LRG', np.float64(13.863215334464828)) ('alpha_LRG', np.float64(1.0614508169854646)) ('f_sigv_LRG', np.float64(0.9570325754675285)) ('log_Mcent_LRG', np.float64(12.75982139717762)) ('sigma_M_LRG', np.float64(0.24193870557731872))
Apply vsmear for LRG at z0.6-0.8
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 48] ('M_0_LRG', np.float64(12.5564093972607)) ('M_1_LRG', np.float64(13.834555946668576)) ('alpha_LRG', np.float64(1.0935317189223746)) ('f_sigv_LRG', np.float64(0.9240736349985117)) ('log_Mcent_LRG', np.float64(12.72016380471084)) ('sigma_M_LRG', np.float64(0.17640178969817144))
[Interation 48] chi2=546.9622707143445
[Interation 48] chi2=519.7640581774605
[Interation 48] chi2=542.0574612911003
[Interation 48] chi2=564.502599285362
[Interation 48] chi2=537.196496122353
[Interation 48] chi2=473.8093963547592
[Interation 48] chi2=515.0647473382187
[Interation 48] chi2=586.4656955860925
[Interation 48] chi2=524.7669222302741
[Interation 48] chi2=514.5718726420282
[Interation 48] chi2=514.7014921592968
[Interation 48] chi2=558.442695101001
[Interation 50] ('M_0_LRG', np.float64(12.551276255700406)) ('M_1_LRG', np.float64(13.818966268253803)) ('alpha_LRG', np.float64(1.0937042764679739)) ('f_sigv_LRG', np.float64(0.9263836722455652)) ('log_Mcent_LRG', np.float64(12.720589944924575)) ('sigma_M_LRG', np.float64(0.19537383267490305))
[Interation 50] ('M_0_LRG', np.float64(12.500155085658609)) ('M_1_LRG', np.float64(13.837641813042804)) ('alpha_LRG', np.float64(1.096190306981497)) ('f_sigv_LRG', np.float64(0.9372140641629844)) ('log_Mcent_LRG', np.float64(12.742151118004648)) ('sigma_M_LRG', np.float64(0.24217554061826468))
[Interation 50] ('M_0_LRG', np.float64(12.445355781838137)) ('M_1_LRG', np.float64(13.848501576872874)) ('alpha_LRG', np.float64(1.13148818920886)) ('f_sigv_LRG', np.float64(0.9328655439636924)) ('log_Mcent_LRG', np.float64(12.732017429686472)) ('sigma_M_LRG', np.float64(0.19916313992263712))
[Interation 50] ('M_0_LRG', np.float64(12.558244917016207)) ('M_1_LRG', np.float64(13.846270638375124)) ('alpha_LRG', np.float64(1.0661977559105469)) ('f_sigv_LRG', np.float64(0.9399524271386271)) ('log_Mcent_LRG', np.float64(12.736343215375117)) ('sigma_M_LRG', np.float64(0.21300896651619788))
[Interation 50] chi2=538.8784990680997
[Interation 50] chi2=549.5569040496778
[Interation 50] chi2=531.1992209762875
[Interation 50] chi2=465.9186228273416
[Interation 49] ('M_0_LRG', np.float64(12.542757062343629)) ('M_1_LRG', np.float64(13.82992774241309)) ('alpha_LRG', np.float64(1.079297336419073)) ('f_sigv_LRG', np.float64(0.957715912049039)) ('log_Mcent_LRG', np.float64(12.726279397432283)) ('sigma_M_LRG', np.float64(0.19056731501467483))
[Interation 49] ('M_0_LRG', np.float64(12.579231684107741)) ('M_1_LRG', np.float64(13.820304865731789)) ('alpha_LRG', np.float64(1.06006934256408)) ('f_sigv_LRG', np.float64(0.9474872675156752)) ('log_Mcent_LRG', np.float64(12.708029414645011)) ('sigma_M_LRG', np.float64(0.15625924295333976))
[Interation 49] ('M_0_LRG', np.float64(12.587557649645865)) ('M_1_LRG', np.float64(13.829353254746964)) ('alpha_LRG', np.float64(1.064089221184701)) ('f_sigv_LRG', np.float64(0.9392404458067003)) ('log_Mcent_LRG', np.float64(12.717753152015264)) ('sigma_M_LRG', np.float64(0.1660278043706765))
[Interation 49] ('M_0_LRG', np.float64(12.507265253596664)) ('M_1_LRG', np.float64(13.830521822218365)) ('alpha_LRG', np.float64(1.115398568434723)) ('f_sigv_LRG', np.float64(0.9432043403227285)) ('log_Mcent_LRG', np.float64(12.722288628332532)) ('sigma_M_LRG', np.float64(0.1797959569911063))
[Interation 49] ('M_0_LRG', np.float64(12.573888299844757)) ('M_1_LRG', np.float64(13.831326573693289)) ('alpha_LRG', np.float64(1.06850286726276)) ('f_sigv_LRG', np.float64(0.9371504183710182)) ('log_Mcent_LRG', np.float64(12.721104840965507)) ('sigma_M_LRG', np.float64(0.17526071762184675))
[Interation 49] ('M_0_LRG', np.float64(12.501321571411696)) ('M_1_LRG', np.float64(13.837870394337958)) ('alpha_LRG', np.float64(1.1061879518649769)) ('f_sigv_LRG', np.float64(0.9491688536462559)) ('log_Mcent_LRG', np.float64(12.719653918175558)) ('sigma_M_LRG', np.float64(0.16779463176987547))
[Interation 49] ('M_0_LRG', np.float64(12.56672871871823)) ('M_1_LRG', np.float64(13.840650105746976)) ('alpha_LRG', np.float64(1.0874888573770558)) ('f_sigv_LRG', np.float64(0.9399827033851738)) ('log_Mcent_LRG', np.float64(12.731839432108314)) ('sigma_M_LRG', np.float64(0.19334670531150594))
[Interation 49] ('M_0_LRG', np.float64(12.512394476106566)) ('M_1_LRG', np.float64(13.84152554132591)) ('alpha_LRG', np.float64(1.109299178967727)) ('f_sigv_LRG', np.float64(0.9459966730300633)) ('log_Mcent_LRG', np.float64(12.731464041034528)) ('sigma_M_LRG', np.float64(0.19551002635728826))
[Interation 49] ('M_0_LRG', np.float64(12.608181866754695)) ('M_1_LRG', np.float64(13.833602443398854)) ('alpha_LRG', np.float64(1.0541015934001134)) ('f_sigv_LRG', np.float64(0.9487733036471642)) ('log_Mcent_LRG', np.float64(12.729428731422257)) ('sigma_M_LRG', np.float64(0.19199827543612147))
[Interation 49] ('M_0_LRG', np.float64(12.521669038121976)) ('M_1_LRG', np.float64(13.83441623767676)) ('alpha_LRG', np.float64(1.0892559386585272)) ('f_sigv_LRG', np.float64(0.9561141816747133)) ('log_Mcent_LRG', np.float64(12.711017403526228)) ('sigma_M_LRG', np.float64(0.1408617626763632))
[Interation 49] ('M_0_LRG', np.float64(12.57484098798564)) ('M_1_LRG', np.float64(13.827657470812445)) ('alpha_LRG', np.float64(1.076385343146306)) ('f_sigv_LRG', np.float64(0.9411952855019501)) ('log_Mcent_LRG', np.float64(12.722805498320605)) ('sigma_M_LRG', np.float64(0.18579237311514735))
[Interation 49] ('M_0_LRG', np.float64(12.59782507670667)) ('M_1_LRG', np.float64(13.833505105344571)) ('alpha_LRG', np.float64(1.0542565053276602)) ('f_sigv_LRG', np.float64(0.9513848566825394)) ('log_Mcent_LRG', np.float64(12.72051367568903)) ('sigma_M_LRG', np.float64(0.17408526057268348))
[Interation 49] chi2=502.4200736116726
[Interation 49] chi2=564.7251994924172
[Interation 49] chi2=453.4065530995187
[Interation 49] chi2=526.7396436727242
[Interation 49] chi2=501.55904266211036
[Interation 49] chi2=467.8306327657601
[Interation 49] chi2=462.95364956329684
[Interation 49] chi2=535.1953182977842
[Interation 49] chi2=500.614527189259
[Interation 49] chi2=489.288380081372
[Interation 49] chi2=465.6021530483322
[Interation 49] chi2=494.7930472197376
[Interation 51] ('M_0_LRG', np.float64(12.537796339089857)) ('M_1_LRG', np.float64(13.854367502665308)) ('alpha_LRG', np.float64(1.085792291447881)) ('f_sigv_LRG', np.float64(0.9449450776719683)) ('log_Mcent_LRG', np.float64(12.747699890395815)) ('sigma_M_LRG', np.float64(0.23474738240042037))
[Interation 51] ('M_0_LRG', np.float64(12.53626080133093)) ('M_1_LRG', np.float64(13.833869276975227)) ('alpha_LRG', np.float64(1.0906887414065338)) ('f_sigv_LRG', np.float64(0.9480537550629539)) ('log_Mcent_LRG', np.float64(12.718343205738934)) ('sigma_M_LRG', np.float64(0.17133944468289553))
[Interation 51] ('M_0_LRG', np.float64(12.521119127892202)) ('M_1_LRG', np.float64(13.845735449374747)) ('alpha_LRG', np.float64(1.0976936280350023)) ('f_sigv_LRG', np.float64(0.941822683335211)) ('log_Mcent_LRG', np.float64(12.73283868647008)) ('sigma_M_LRG', np.float64(0.20168010756392757))
[Interation 51] ('M_0_LRG', np.float64(12.502922884905166)) ('M_1_LRG', np.float64(13.843169578725224)) ('alpha_LRG', np.float64(1.1116378895785217)) ('f_sigv_LRG', np.float64(0.9484533182015422)) ('log_Mcent_LRG', np.float64(12.733623127236013)) ('sigma_M_LRG', np.float64(0.20200291679091392))
[Interation 51] chi2=477.4790945911641
[Interation 51] chi2=507.694657472855
[Interation 51] chi2=526.2702098273709
[Interation 51] chi2=458.69435579923623
Load data vector for LRG
Load rppi measurements at z0.6-0.8 for LRG...
Load smu measurements at z0.6-0.8 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.553866943157056)) ('M_1_LRG', np.float64(13.827590304430831)) ('alpha_LRG', np.float64(1.0897720209629431)) ('f_sigv_LRG', np.float64(0.9259279611593902)) ('log_Mcent_LRG', np.float64(12.718559974182023)) ('sigma_M_LRG', np.float64(0.18077976884631214))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.295975923538208
Start satellite assignement
Satellite assignement done 0.07345461845397949
LRG mock catalogue done 0.14562368392944336
608701 central galaxies, 90225 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6135468482971191
