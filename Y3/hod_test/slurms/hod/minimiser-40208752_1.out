[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_03.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:17
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:18
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:18
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:18
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:19
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:19
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:19
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:19
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:21
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:21
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:21
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:22
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:22
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load smu measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.508357862499357)) ('M_1_LRG', np.float64(13.763914426475878)) ('alpha_LRG', np.float64(1.0684875808733685)) ('f_sigv_LRG', np.float64(0.9385000305499991)) ('log_Mcent_LRG', np.float64(12.674645052952668)) ('sigma_M_LRG', np.float64(0.21014969324276622))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.543346946626261)) ('M_1_LRG', np.float64(13.723692507629798)) ('alpha_LRG', np.float64(1.1076857486280958)) ('f_sigv_LRG', np.float64(0.9242274072556954)) ('log_Mcent_LRG', np.float64(12.676561976297002)) ('sigma_M_LRG', np.float64(0.23898153278349982))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.543155271980412)) ('M_1_LRG', np.float64(13.731093516039598)) ('alpha_LRG', np.float64(1.0759770970246783)) ('f_sigv_LRG', np.float64(0.9067176628873315)) ('log_Mcent_LRG', np.float64(12.67094087804826)) ('sigma_M_LRG', np.float64(0.22578606631519582))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.56172712867415)) ('M_1_LRG', np.float64(13.701726439434903)) ('alpha_LRG', np.float64(1.0898255380377302)) ('f_sigv_LRG', np.float64(0.9210641363214681)) ('log_Mcent_LRG', np.float64(12.6505124845315)) ('sigma_M_LRG', np.float64(0.19679639994069104))
[Interation 1] chi2=363.4878392487256
[Interation 1] chi2=339.6978024438927
[Interation 1] chi2=395.14665027800055
[Interation 1] chi2=370.02324572132903
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.52526811558361)) ('M_1_LRG', np.float64(13.743713060214452)) ('alpha_LRG', np.float64(1.051632969222148)) ('f_sigv_LRG', np.float64(0.961549207352443)) ('log_Mcent_LRG', np.float64(12.683768649291325)) ('sigma_M_LRG', np.float64(0.24407943651226666))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.532056551627996)) ('M_1_LRG', np.float64(13.70602948213215)) ('alpha_LRG', np.float64(1.095316546536416)) ('f_sigv_LRG', np.float64(0.8977287534460077)) ('log_Mcent_LRG', np.float64(12.639664885465725)) ('sigma_M_LRG', np.float64(0.1786146999535776))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.513602155319564)) ('M_1_LRG', np.float64(13.699464578001082)) ('alpha_LRG', np.float64(1.135639645840815)) ('f_sigv_LRG', np.float64(0.9528283960390742)) ('log_Mcent_LRG', np.float64(12.641737900879162)) ('sigma_M_LRG', np.float64(0.16401625599411002))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.488190960562251)) ('M_1_LRG', np.float64(13.722820665293051)) ('alpha_LRG', np.float64(1.1259754764863004)) ('f_sigv_LRG', np.float64(0.918991154659905)) ('log_Mcent_LRG', np.float64(12.65718821451719)) ('sigma_M_LRG', np.float64(0.20059865024811463))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.565713482645076)) ('M_1_LRG', np.float64(13.713698790398569)) ('alpha_LRG', np.float64(1.0720483466438626)) ('f_sigv_LRG', np.float64(0.9445674922000054)) ('log_Mcent_LRG', np.float64(12.667047694957214)) ('sigma_M_LRG', np.float64(0.21944011663643354))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.548466730704542)) ('M_1_LRG', np.float64(13.744799952250311)) ('alpha_LRG', np.float64(1.0502477784639914)) ('f_sigv_LRG', np.float64(0.9362149091951574)) ('log_Mcent_LRG', np.float64(12.681948642763402)) ('sigma_M_LRG', np.float64(0.24359381248329848))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.496722994839642)) ('M_1_LRG', np.float64(13.680716301689989)) ('alpha_LRG', np.float64(1.1412683731079247)) ('f_sigv_LRG', np.float64(0.9399479621307183)) ('log_Mcent_LRG', np.float64(12.619832317003251)) ('sigma_M_LRG', np.float64(0.1353524296927816))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.56074549613643)) ('M_1_LRG', np.float64(13.716197518839845)) ('alpha_LRG', np.float64(1.077727035950203)) ('f_sigv_LRG', np.float64(0.9252916290211373)) ('log_Mcent_LRG', np.float64(12.665821609126569)) ('sigma_M_LRG', np.float64(0.2345333671207429))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.48953812754665)) ('M_1_LRG', np.float64(13.730774601508713)) ('alpha_LRG', np.float64(1.1234267350106624)) ('f_sigv_LRG', np.float64(0.935740621032652)) ('log_Mcent_LRG', np.float64(12.669100068817063)) ('sigma_M_LRG', np.float64(0.22140500883494718))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.516048670888932)) ('M_1_LRG', np.float64(13.716053175264447)) ('alpha_LRG', np.float64(1.0932808080036385)) ('f_sigv_LRG', np.float64(0.946886945482759)) ('log_Mcent_LRG', np.float64(12.65610618053533)) ('sigma_M_LRG', np.float64(0.19682019153437968))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.585777006108062)) ('M_1_LRG', np.float64(13.713107059236004)) ('alpha_LRG', np.float64(1.0821844119542903)) ('f_sigv_LRG', np.float64(0.9159366785666564)) ('log_Mcent_LRG', np.float64(12.663997274310026)) ('sigma_M_LRG', np.float64(0.22321056094871933))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.560903557758168)) ('M_1_LRG', np.float64(13.738134197369918)) ('alpha_LRG', np.float64(1.080095739092623)) ('f_sigv_LRG', np.float64(0.9587417307537635)) ('log_Mcent_LRG', np.float64(12.680512395546407)) ('sigma_M_LRG', np.float64(0.2290186231150449))
[Interation 1] chi2=405.8404960670076
[Interation 1] chi2=371.26786699187716
[Interation 1] chi2=416.13398692110866
[Interation 1] chi2=381.2087323452532
[Interation 1] chi2=353.02993367702373
[Interation 1] chi2=323.6337013330867
[Interation 1] chi2=383.31919935625
[Interation 1] chi2=412.09324554329663
[Interation 1] chi2=375.6019283290677
[Interation 1] chi2=351.95772689114597
[Interation 1] chi2=375.468264657806
[Interation 1] chi2=370.6922594604026
[Interation 2] ('M_0_LRG', np.float64(12.60738495920004)) ('M_1_LRG', np.float64(13.7142686130352)) ('alpha_LRG', np.float64(1.044144829289814)) ('f_sigv_LRG', np.float64(0.9538280792442908)) ('log_Mcent_LRG', np.float64(12.657411486463914)) ('sigma_M_LRG', np.float64(0.19611491761932937))
[Interation 2] ('M_0_LRG', np.float64(12.526012331231973)) ('M_1_LRG', np.float64(13.713534122021851)) ('alpha_LRG', np.float64(1.0951122209125848)) ('f_sigv_LRG', np.float64(0.9415904090795895)) ('log_Mcent_LRG', np.float64(12.652783822382084)) ('sigma_M_LRG', np.float64(0.1881582209409664))
[Interation 2] ('M_0_LRG', np.float64(12.567758753003236)) ('M_1_LRG', np.float64(13.728405874913326)) ('alpha_LRG', np.float64(1.0616501362785062)) ('f_sigv_LRG', np.float64(0.9391669236610899)) ('log_Mcent_LRG', np.float64(12.666728430018852)) ('sigma_M_LRG', np.float64(0.21354257383716468))
[Interation 2] ('M_0_LRG', np.float64(12.547349413096876)) ('M_1_LRG', np.float64(13.704493137292209)) ('alpha_LRG', np.float64(1.0959159965907315)) ('f_sigv_LRG', np.float64(0.9403172579426033)) ('log_Mcent_LRG', np.float64(12.638521723984075)) ('sigma_M_LRG', np.float64(0.15585731547131593))
[Interation 2] chi2=406.08034934025113
[Interation 2] chi2=388.15216551383867
[Interation 2] chi2=345.74011354501823
[Interation 2] chi2=339.7731144933662
[Interation 2] ('M_0_LRG', np.float64(12.577776883557886)) ('M_1_LRG', np.float64(13.705171160143392)) ('alpha_LRG', np.float64(1.0756995944250591)) ('f_sigv_LRG', np.float64(0.9319274804829216)) ('log_Mcent_LRG', np.float64(12.648597893523176)) ('sigma_M_LRG', np.float64(0.1725405816050481))
[Interation 2] ('M_0_LRG', np.float64(12.479329369973392)) ('M_1_LRG', np.float64(13.712412994867393)) ('alpha_LRG', np.float64(1.1346391240385159)) ('f_sigv_LRG', np.float64(0.928129876936971)) ('log_Mcent_LRG', np.float64(12.647763963852366)) ('sigma_M_LRG', np.float64(0.187481575900863))
[Interation 2] ('M_0_LRG', np.float64(12.527477420419691)) ('M_1_LRG', np.float64(13.720971192865814)) ('alpha_LRG', np.float64(1.105032340470341)) ('f_sigv_LRG', np.float64(0.9446236426354867)) ('log_Mcent_LRG', np.float64(12.666489984310012)) ('sigma_M_LRG', np.float64(0.2109343170632299))
[Interation 2] ('M_0_LRG', np.float64(12.552647727975506)) ('M_1_LRG', np.float64(13.714438180769667)) ('alpha_LRG', np.float64(1.0789150793936242)) ('f_sigv_LRG', np.float64(0.9411288081159981)) ('log_Mcent_LRG', np.float64(12.65492981078295)) ('sigma_M_LRG', np.float64(0.19512564306425462))
[Interation 2] ('M_0_LRG', np.float64(12.574555289483467)) ('M_1_LRG', np.float64(13.710843714422685)) ('alpha_LRG', np.float64(1.0768022233937238)) ('f_sigv_LRG', np.float64(0.9351731072443403)) ('log_Mcent_LRG', np.float64(12.64727533641789)) ('sigma_M_LRG', np.float64(0.17801502229942207))
[Interation 2] ('M_0_LRG', np.float64(12.566074359946242)) ('M_1_LRG', np.float64(13.709323183182612)) ('alpha_LRG', np.float64(1.0730873613351215)) ('f_sigv_LRG', np.float64(0.9445164166214397)) ('log_Mcent_LRG', np.float64(12.660011158161986)) ('sigma_M_LRG', np.float64(0.2072884250216186))
[Interation 2] ('M_0_LRG', np.float64(12.594997249060087)) ('M_1_LRG', np.float64(13.701935290550992)) ('alpha_LRG', np.float64(1.0630534971039776)) ('f_sigv_LRG', np.float64(0.9393279556629369)) ('log_Mcent_LRG', np.float64(12.649296315963275)) ('sigma_M_LRG', np.float64(0.18431630585277026))
[Interation 2] ('M_0_LRG', np.float64(12.481782319978201)) ('M_1_LRG', np.float64(13.707624587389176)) ('alpha_LRG', np.float64(1.1515707439012457)) ('f_sigv_LRG', np.float64(0.9142387514549482)) ('log_Mcent_LRG', np.float64(12.632944732474582)) ('sigma_M_LRG', np.float64(0.1467072303196088))
[Interation 2] ('M_0_LRG', np.float64(12.584748380737002)) ('M_1_LRG', np.float64(13.70819574256075)) ('alpha_LRG', np.float64(1.0550030771641523)) ('f_sigv_LRG', np.float64(0.9423402282590706)) ('log_Mcent_LRG', np.float64(12.653303876064077)) ('sigma_M_LRG', np.float64(0.19181902372987852))
[Interation 2] ('M_0_LRG', np.float64(12.517651777098184)) ('M_1_LRG', np.float64(13.713691487919059)) ('alpha_LRG', np.float64(1.103323922638981)) ('f_sigv_LRG', np.float64(0.9279225107513652)) ('log_Mcent_LRG', np.float64(12.647592712343219)) ('sigma_M_LRG', np.float64(0.17813789951775205))
[Interation 2] ('M_0_LRG', np.float64(12.54392453926336)) ('M_1_LRG', np.float64(13.703127097356367)) ('alpha_LRG', np.float64(1.113320794690562)) ('f_sigv_LRG', np.float64(0.9307726670746238)) ('log_Mcent_LRG', np.float64(12.646982379344383)) ('sigma_M_LRG', np.float64(0.1793362226372619))
[Interation 2] ('M_0_LRG', np.float64(12.552158355824007)) ('M_1_LRG', np.float64(13.717303141308811)) ('alpha_LRG', np.float64(1.0896262835027644)) ('f_sigv_LRG', np.float64(0.93703359446721)) ('log_Mcent_LRG', np.float64(12.657236377484104)) ('sigma_M_LRG', np.float64(0.19801833255706047))
[Interation 2] chi2=350.55925486694963
[Interation 2] chi2=333.9033879701176
[Interation 2] chi2=415.99579181295996
[Interation 2] chi2=370.07343887337333
[Interation 2] chi2=369.76035869399044
[Interation 2] chi2=369.1786280167659
[Interation 2] chi2=356.57609779199015
[Interation 2] chi2=329.7601702926396
[Interation 2] chi2=363.33825949674065
[Interation 2] chi2=388.23645637508776
[Interation 2] chi2=378.6582763255745
[Interation 2] chi2=387.94948188507067
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_04.npy
Set number of threads to 32
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.54553700684343)) ('M_1_LRG', np.float64(13.708047546595537)) ('alpha_LRG', np.float64(1.0927038967186489)) ('f_sigv_LRG', np.float64(0.9368269108345866)) ('log_Mcent_LRG', np.float64(12.64677699707392)) ('sigma_M_LRG', np.float64(0.17893208558584311))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 1.1930327415466309
Start satellite assignement
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
Satellite assignement done 1.8015947341918945
LRG mock catalogue done 1.8797814846038818
612305 central galaxies, 87360 satellites, fraction of satellite 0.12 
Done overall time  LRG 3.2583961486816406
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_04.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:21
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:21
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load correlation matrix for LRG at z0.95 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:16
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:17
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Load smu measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.809515378507246)) ('M_1_LRG', np.float64(13.737488969383227)) ('alpha_LRG', np.float64(0.8248906773159904)) ('f_sigv_LRG', np.float64(0.9929033442839674)) ('log_Mcent_LRG', np.float64(12.677278562458675)) ('sigma_M_LRG', np.float64(0.2823606203719343))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.65618343671149)) ('M_1_LRG', np.float64(13.686508608110191)) ('alpha_LRG', np.float64(1.124410961694831)) ('f_sigv_LRG', np.float64(0.8991412382612844)) ('log_Mcent_LRG', np.float64(12.718316473500629)) ('sigma_M_LRG', np.float64(0.2851156170184258))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.61744478357399)) ('M_1_LRG', np.float64(13.87089676884424)) ('alpha_LRG', np.float64(1.012887149360839)) ('f_sigv_LRG', np.float64(0.9210530481892618)) ('log_Mcent_LRG', np.float64(12.833566177591823)) ('sigma_M_LRG', np.float64(0.44941706643782253))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.529820095250628)) ('M_1_LRG', np.float64(13.88076587311041)) ('alpha_LRG', np.float64(1.076564348911354)) ('f_sigv_LRG', np.float64(1.0180931209144755)) ('log_Mcent_LRG', np.float64(12.798467247298891)) ('sigma_M_LRG', np.float64(0.35805189072792454))
[Interation 3] chi2=645.5630699935265
[Interation 3] chi2=574.3237505644346
[Interation 3] chi2=518.373542198051
[Interation 3] chi2=498.5700955071632
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.74405648318174)) ('M_1_LRG', np.float64(13.709531459870092)) ('alpha_LRG', np.float64(0.8911194676224247)) ('f_sigv_LRG', np.float64(0.981977601364262)) ('log_Mcent_LRG', np.float64(12.673314972904034)) ('sigma_M_LRG', np.float64(0.24634722114800595))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.597977495046859)) ('M_1_LRG', np.float64(13.697490622159853)) ('alpha_LRG', np.float64(1.0285279723817948)) ('f_sigv_LRG', np.float64(0.9270733280220862)) ('log_Mcent_LRG', np.float64(12.67015747896251)) ('sigma_M_LRG', np.float64(0.2402654324159494))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.478708097297954)) ('M_1_LRG', np.float64(13.760563401686214)) ('alpha_LRG', np.float64(1.0741645074694033)) ('f_sigv_LRG', np.float64(0.9438658075543245)) ('log_Mcent_LRG', np.float64(12.702796318657564)) ('sigma_M_LRG', np.float64(0.28422207005422095))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.504798423266418)) ('M_1_LRG', np.float64(13.709590628462633)) ('alpha_LRG', np.float64(1.0985670906719707)) ('f_sigv_LRG', np.float64(0.9237403590310688)) ('log_Mcent_LRG', np.float64(12.672715616010045)) ('sigma_M_LRG', np.float64(0.23295874295215646))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.680752483144683)) ('M_1_LRG', np.float64(13.687247269866784)) ('alpha_LRG', np.float64(1.0105239670315576)) ('f_sigv_LRG', np.float64(0.9465896851364389)) ('log_Mcent_LRG', np.float64(12.67602772291841)) ('sigma_M_LRG', np.float64(0.2376191216507988))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.461371645322597)) ('M_1_LRG', np.float64(13.658416879587973)) ('alpha_LRG', np.float64(1.1600895126356412)) ('f_sigv_LRG', np.float64(1.051175940101259)) ('log_Mcent_LRG', np.float64(12.588712193174421)) ('sigma_M_LRG', np.float64(0.08658849609805092))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.543689604683426)) ('M_1_LRG', np.float64(13.76421459552767)) ('alpha_LRG', np.float64(1.0933483914979738)) ('f_sigv_LRG', np.float64(0.9518904319195847)) ('log_Mcent_LRG', np.float64(12.727273266011112)) ('sigma_M_LRG', np.float64(0.29820095185608964))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.396364631068785)) ('M_1_LRG', np.float64(13.680551323129642)) ('alpha_LRG', np.float64(1.2672664663193907)) ('f_sigv_LRG', np.float64(0.9103362295102355)) ('log_Mcent_LRG', np.float64(12.670517807654878)) ('sigma_M_LRG', np.float64(0.2312324224531246))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.514140279744236)) ('M_1_LRG', np.float64(13.678492389057503)) ('alpha_LRG', np.float64(1.1288597582824087)) ('f_sigv_LRG', np.float64(0.9361147901831264)) ('log_Mcent_LRG', np.float64(12.643524210681228)) ('sigma_M_LRG', np.float64(0.18568343563644907))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.61292134343565)) ('M_1_LRG', np.float64(13.691567041306039)) ('alpha_LRG', np.float64(1.0256250501493829)) ('f_sigv_LRG', np.float64(0.8898188978574244)) ('log_Mcent_LRG', np.float64(12.671737741239214)) ('sigma_M_LRG', np.float64(0.28410150652905397))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.63638936322318)) ('M_1_LRG', np.float64(13.740142242396027)) ('alpha_LRG', np.float64(1.0494771749885337)) ('f_sigv_LRG', np.float64(0.896871603648524)) ('log_Mcent_LRG', np.float64(12.671321744470339)) ('sigma_M_LRG', np.float64(0.2433791757899561))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.579782906751989)) ('M_1_LRG', np.float64(13.799604121221469)) ('alpha_LRG', np.float64(0.9287890796950192)) ('f_sigv_LRG', np.float64(1.0258372759114285)) ('log_Mcent_LRG', np.float64(12.689435501097154)) ('sigma_M_LRG', np.float64(0.24465444371837336))
[Interation 3] chi2=383.46229331753335
[Interation 3] chi2=331.9880586614509
[Interation 3] chi2=375.7828547529595
[Interation 3] chi2=401.9222536959132
[Interation 3] chi2=375.770210679853
[Interation 3] chi2=365.15614244195905
[Interation 3] chi2=705.1102688440565
[Interation 3] chi2=550.6514716011993
[Interation 3] chi2=435.623083299406
[Interation 3] chi2=501.5972711457221
[Interation 3] chi2=403.82552222816634
[Interation 3] chi2=391.49970091778096
[Interation 4] ('M_0_LRG', np.float64(12.579039256013367)) ('M_1_LRG', np.float64(13.696087244120388)) ('alpha_LRG', np.float64(1.0714131378806324)) ('f_sigv_LRG', np.float64(0.9533246723990482)) ('log_Mcent_LRG', np.float64(12.646321820560756)) ('sigma_M_LRG', np.float64(0.19062774300469432))
[Interation 4] ('M_0_LRG', np.float64(12.54794597342718)) ('M_1_LRG', np.float64(13.69709407836418)) ('alpha_LRG', np.float64(1.073224500591098)) ('f_sigv_LRG', np.float64(0.9363650145950693)) ('log_Mcent_LRG', np.float64(12.636670434450975)) ('sigma_M_LRG', np.float64(0.17479643379299248))
[Interation 4] ('M_0_LRG', np.float64(12.551216244620662)) ('M_1_LRG', np.float64(13.704715955667343)) ('alpha_LRG', np.float64(1.0810817388719993)) ('f_sigv_LRG', np.float64(0.9223142663768698)) ('log_Mcent_LRG', np.float64(12.652625980212528)) ('sigma_M_LRG', np.float64(0.2046592773080817))
[Interation 4] ('M_0_LRG', np.float64(12.56597347177987)) ('M_1_LRG', np.float64(13.69165750158175)) ('alpha_LRG', np.float64(1.0912194662283607)) ('f_sigv_LRG', np.float64(0.9245484149760783)) ('log_Mcent_LRG', np.float64(12.643209958749052)) ('sigma_M_LRG', np.float64(0.1909171942566445))
[Interation 4] chi2=349.57046355559527
[Interation 4] chi2=364.2357607816469
[Interation 4] chi2=413.709519498595
[Interation 4] chi2=348.5651522123031
[Interation 4] ('M_0_LRG', np.float64(12.557331804964623)) ('M_1_LRG', np.float64(13.725390413350125)) ('alpha_LRG', np.float64(1.0813188905768307)) ('f_sigv_LRG', np.float64(0.9224936559802126)) ('log_Mcent_LRG', np.float64(12.680090515209118)) ('sigma_M_LRG', np.float64(0.2470193416564428))
[Interation 4] ('M_0_LRG', np.float64(12.563162642650314)) ('M_1_LRG', np.float64(13.705738625845264)) ('alpha_LRG', np.float64(1.078794518671289)) ('f_sigv_LRG', np.float64(0.9451538009172692)) ('log_Mcent_LRG', np.float64(12.648093282400744)) ('sigma_M_LRG', np.float64(0.18250999775183546))
[Interation 4] ('M_0_LRG', np.float64(12.542431404089617)) ('M_1_LRG', np.float64(13.717850205784769)) ('alpha_LRG', np.float64(1.079243432491531)) ('f_sigv_LRG', np.float64(0.9475192474512109)) ('log_Mcent_LRG', np.float64(12.661601854592252)) ('sigma_M_LRG', np.float64(0.20837241963952025))
[Interation 4] ('M_0_LRG', np.float64(12.5802057602603)) ('M_1_LRG', np.float64(13.677360472908092)) ('alpha_LRG', np.float64(1.0795238520316752)) ('f_sigv_LRG', np.float64(0.9304118376002216)) ('log_Mcent_LRG', np.float64(12.625667934747762)) ('sigma_M_LRG', np.float64(0.14144536529029472))
[Interation 4] ('M_0_LRG', np.float64(12.509837089628817)) ('M_1_LRG', np.float64(13.711120139983867)) ('alpha_LRG', np.float64(1.1020029916090424)) ('f_sigv_LRG', np.float64(0.95964907019535)) ('log_Mcent_LRG', np.float64(12.639769362603513)) ('sigma_M_LRG', np.float64(0.15462503377464487))
[Interation 4] ('M_0_LRG', np.float64(12.522804766730399)) ('M_1_LRG', np.float64(13.727897501370629)) ('alpha_LRG', np.float64(1.0919305606087453)) ('f_sigv_LRG', np.float64(0.9473944041359565)) ('log_Mcent_LRG', np.float64(12.655559060264645)) ('sigma_M_LRG', np.float64(0.17855121953869896))
[Interation 4] ('M_0_LRG', np.float64(12.556343005211888)) ('M_1_LRG', np.float64(13.677542168703207)) ('alpha_LRG', np.float64(1.103607299226967)) ('f_sigv_LRG', np.float64(0.926847068389135)) ('log_Mcent_LRG', np.float64(12.625858274914693)) ('sigma_M_LRG', np.float64(0.14225007906829595))
[Interation 4] ('M_0_LRG', np.float64(12.555259876793524)) ('M_1_LRG', np.float64(13.707858236561245)) ('alpha_LRG', np.float64(1.0870291761124906)) ('f_sigv_LRG', np.float64(0.9373141420951208)) ('log_Mcent_LRG', np.float64(12.651866063277934)) ('sigma_M_LRG', np.float64(0.18989365488253374))
[Interation 4] ('M_0_LRG', np.float64(12.565949398286243)) ('M_1_LRG', np.float64(13.714691593649526)) ('alpha_LRG', np.float64(1.087955508162407)) ('f_sigv_LRG', np.float64(0.9327369986518073)) ('log_Mcent_LRG', np.float64(12.666760434323033)) ('sigma_M_LRG', np.float64(0.21345901938884765))
[Interation 4] ('M_0_LRG', np.float64(12.529291109930792)) ('M_1_LRG', np.float64(13.717264513952127)) ('alpha_LRG', np.float64(1.1011160012715826)) ('f_sigv_LRG', np.float64(0.9367008763739934)) ('log_Mcent_LRG', np.float64(12.65566236099596)) ('sigma_M_LRG', np.float64(0.19459926317911674))
[Interation 4] ('M_0_LRG', np.float64(12.580497781671768)) ('M_1_LRG', np.float64(13.722287339279294)) ('alpha_LRG', np.float64(1.067519308369673)) ('f_sigv_LRG', np.float64(0.9459172976522263)) ('log_Mcent_LRG', np.float64(12.67231980380461)) ('sigma_M_LRG', np.float64(0.22383075967073512))
[Interation 4] ('M_0_LRG', np.float64(12.580886909133865)) ('M_1_LRG', np.float64(13.711541645131724)) ('alpha_LRG', np.float64(1.0745936028391136)) ('f_sigv_LRG', np.float64(0.934506497385965)) ('log_Mcent_LRG', np.float64(12.658794589429796)) ('sigma_M_LRG', np.float64(0.19635276724525308))
[Interation 4] chi2=393.1968041055696
[Interation 4] chi2=357.6538754108984
[Interation 4] chi2=374.89978836415474
[Interation 4] chi2=333.210083373981
[Interation 4] chi2=341.04080214428177
[Interation 4] chi2=379.66462163862934
[Interation 4] chi2=409.3576725222329
[Interation 4] chi2=321.56147055454693
[Interation 4] chi2=330.6306385269327
[Interation 4] chi2=311.3903675293079
[Interation 4] chi2=367.57656827941
[Interation 4] chi2=388.11238493871673
[Interation 5] ('M_0_LRG', np.float64(12.549881632489745)) ('M_1_LRG', np.float64(13.705205916214064)) ('alpha_LRG', np.float64(1.0857638388530988)) ('f_sigv_LRG', np.float64(0.9344160693544886)) ('log_Mcent_LRG', np.float64(12.645086950140099)) ('sigma_M_LRG', np.float64(0.1758438621267413))
[Interation 5] ('M_0_LRG', np.float64(12.566027863078713)) ('M_1_LRG', np.float64(13.701221484524305)) ('alpha_LRG', np.float64(1.0832675532425289)) ('f_sigv_LRG', np.float64(0.9414409347764988)) ('log_Mcent_LRG', np.float64(12.643399749806452)) ('sigma_M_LRG', np.float64(0.17120423853494188))
[Interation 5] ('M_0_LRG', np.float64(12.56378045897673)) ('M_1_LRG', np.float64(13.70305786406048)) ('alpha_LRG', np.float64(1.0746170342944812)) ('f_sigv_LRG', np.float64(0.9435973712442175)) ('log_Mcent_LRG', np.float64(12.641937003525992)) ('sigma_M_LRG', np.float64(0.1675986411935757))
[Interation 5] ('M_0_LRG', np.float64(12.54104680756504)) ('M_1_LRG', np.float64(13.715897021994328)) ('alpha_LRG', np.float64(1.0841268550206928)) ('f_sigv_LRG', np.float64(0.9465073476425352)) ('log_Mcent_LRG', np.float64(12.650095994595189)) ('sigma_M_LRG', np.float64(0.17869024484218776))
[Interation 5] chi2=329.1667091655102
[Interation 5] chi2=366.60445326606083
[Interation 5] chi2=317.73965699755234
[Interation 5] chi2=369.92810428615945
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_05.npy
Set number of threads to 32
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.52571053935441)) ('M_1_LRG', np.float64(13.707447993669396)) ('alpha_LRG', np.float64(1.1028682270903034)) ('f_sigv_LRG', np.float64(0.9425322120285565)) ('log_Mcent_LRG', np.float64(12.639416381000906)) ('sigma_M_LRG', np.float64(0.15609305616750135))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.32387733459472656
Start satellite assignement
Satellite assignement done 0.07463550567626953
LRG mock catalogue done 0.14885592460632324
612367 central galaxies, 87387 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6526076793670654
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_05.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:20
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:20
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:20
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:21
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:21
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:21
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:21
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:22
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:16
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:17
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Load correlation matrix for LRG at z0.95 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Load correlation matrix for LRG at z0.95 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.439676707082713)) ('M_1_LRG', np.float64(13.406602594342617)) ('alpha_LRG', np.float64(1.0828303224843396)) ('f_sigv_LRG', np.float64(1.0334212774270446)) ('log_Mcent_LRG', np.float64(12.727765327126573)) ('sigma_M_LRG', np.float64(0.46936402816029293))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.542385759897119)) ('M_1_LRG', np.float64(13.643552543053296)) ('alpha_LRG', np.float64(1.0079016718646028)) ('f_sigv_LRG', np.float64(1.0345319841784477)) ('log_Mcent_LRG', np.float64(12.69614810595414)) ('sigma_M_LRG', np.float64(0.46650064977838834))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.499142154003993)) ('M_1_LRG', np.float64(13.532867595107167)) ('alpha_LRG', np.float64(0.8756156659246341)) ('f_sigv_LRG', np.float64(1.0310503842967302)) ('log_Mcent_LRG', np.float64(12.81417655897954)) ('sigma_M_LRG', np.float64(0.5131295562891591))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.513959232578847)) ('M_1_LRG', np.float64(13.436138755714293)) ('alpha_LRG', np.float64(1.024371880817025)) ('f_sigv_LRG', np.float64(1.0961386077942668)) ('log_Mcent_LRG', np.float64(12.69106839628818)) ('sigma_M_LRG', np.float64(0.5439300902568706))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.549200456176413)) ('M_1_LRG', np.float64(13.552662189443735)) ('alpha_LRG', np.float64(0.9796554781998035)) ('f_sigv_LRG', np.float64(1.1167689198353534)) ('log_Mcent_LRG', np.float64(12.827872562972969)) ('sigma_M_LRG', np.float64(0.4400848386919708))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.537110197497462)) ('M_1_LRG', np.float64(13.646782214077442)) ('alpha_LRG', np.float64(0.9959388495926802)) ('f_sigv_LRG', np.float64(1.0136246813219048)) ('log_Mcent_LRG', np.float64(12.75914151837913)) ('sigma_M_LRG', np.float64(0.4501933893517465))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.535166278514758)) ('M_1_LRG', np.float64(13.451620416818537)) ('alpha_LRG', np.float64(0.9198980898722905)) ('f_sigv_LRG', np.float64(1.027877799408964)) ('log_Mcent_LRG', np.float64(12.671515818182717)) ('sigma_M_LRG', np.float64(0.4794184718977621))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.528046057247186)) ('M_1_LRG', np.float64(13.368111468418661)) ('alpha_LRG', np.float64(1.0775043628729175)) ('f_sigv_LRG', np.float64(1.008421668101508)) ('log_Mcent_LRG', np.float64(12.688244089041008)) ('sigma_M_LRG', np.float64(0.48107745026846344))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.545625443362024)) ('M_1_LRG', np.float64(13.640680278487048)) ('alpha_LRG', np.float64(0.9920904051246233)) ('f_sigv_LRG', np.float64(0.9832777950168501)) ('log_Mcent_LRG', np.float64(12.71796968881137)) ('sigma_M_LRG', np.float64(0.5343561945984753))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.53390623124009)) ('M_1_LRG', np.float64(13.41008413110914)) ('alpha_LRG', np.float64(0.9931162292911164)) ('f_sigv_LRG', np.float64(1.047683090384449)) ('log_Mcent_LRG', np.float64(12.697896214789104)) ('sigma_M_LRG', np.float64(0.49511223365072105))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.568720687880589)) ('M_1_LRG', np.float64(13.562542054017925)) ('alpha_LRG', np.float64(1.0132996392654756)) ('f_sigv_LRG', np.float64(1.0618208649932135)) ('log_Mcent_LRG', np.float64(12.6663336416299)) ('sigma_M_LRG', np.float64(0.5365961022691706))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.514055865005226)) ('M_1_LRG', np.float64(13.597589630220218)) ('alpha_LRG', np.float64(0.9776951414084568)) ('f_sigv_LRG', np.float64(1.0333618380419034)) ('log_Mcent_LRG', np.float64(12.714113038988998)) ('sigma_M_LRG', np.float64(0.47441056668490994))
[Interation 5] chi2=5358.843122998854
[Interation 5] chi2=2703.849822068007
[Interation 5] chi2=4282.054097350815
[Interation 5] chi2=5023.133254856582
[Interation 5] chi2=6153.26608747777
[Interation 5] chi2=1382.5612789506545
[Interation 5] chi2=3398.2764493306204
[Interation 5] chi2=4397.669115044674
[Interation 5] chi2=3967.605411674538
[Interation 5] chi2=3777.7494882236883
[Interation 5] chi2=2463.6948896131853
[Interation 5] chi2=5873.03986917229
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 6] ('M_0_LRG', np.float64(12.493992289248785)) ('M_1_LRG', np.float64(13.732101380296589)) ('alpha_LRG', np.float64(1.0952749043715475)) ('f_sigv_LRG', np.float64(0.9383839580116637)) ('log_Mcent_LRG', np.float64(12.657526643752437)) ('sigma_M_LRG', np.float64(0.19672140436131946))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 6] ('M_0_LRG', np.float64(12.384428795083798)) ('M_1_LRG', np.float64(13.712619950557912)) ('alpha_LRG', np.float64(1.177896058092526)) ('f_sigv_LRG', np.float64(0.9287275635072222)) ('log_Mcent_LRG', np.float64(12.640162883677988)) ('sigma_M_LRG', np.float64(0.16875719503154574))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 6] ('M_0_LRG', np.float64(12.45811808649486)) ('M_1_LRG', np.float64(13.725692140214075)) ('alpha_LRG', np.float64(1.1674005024231182)) ('f_sigv_LRG', np.float64(0.9356856281612687)) ('log_Mcent_LRG', np.float64(12.65316197352746)) ('sigma_M_LRG', np.float64(0.169202157677323))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 6] ('M_0_LRG', np.float64(12.42470337598564)) ('M_1_LRG', np.float64(13.774193997550286)) ('alpha_LRG', np.float64(1.146065384727044)) ('f_sigv_LRG', np.float64(0.9420198169336915)) ('log_Mcent_LRG', np.float64(12.702743408939892)) ('sigma_M_LRG', np.float64(0.2578623721121479))
[Interation 6] chi2=341.96516593604736
[Interation 6] chi2=336.9569839381797
[Interation 6] chi2=374.09082466972626
[Interation 6] chi2=379.0889249566131
[Interation 6] ('M_0_LRG', np.float64(12.474453667727241)) ('M_1_LRG', np.float64(13.738041611607878)) ('alpha_LRG', np.float64(1.134472896540766)) ('f_sigv_LRG', np.float64(0.912609537936387)) ('log_Mcent_LRG', np.float64(12.671900185524176)) ('sigma_M_LRG', np.float64(0.21526937981363725))
[Interation 6] ('M_0_LRG', np.float64(12.55255738790346)) ('M_1_LRG', np.float64(13.735384108204563)) ('alpha_LRG', np.float64(1.0572682680969772)) ('f_sigv_LRG', np.float64(0.9468948018068182)) ('log_Mcent_LRG', np.float64(12.653554545848078)) ('sigma_M_LRG', np.float64(0.1782264581324775))
[Interation 6] ('M_0_LRG', np.float64(12.45290145081181)) ('M_1_LRG', np.float64(13.723891551128299)) ('alpha_LRG', np.float64(1.1525218298067101)) ('f_sigv_LRG', np.float64(0.9425121668957379)) ('log_Mcent_LRG', np.float64(12.666343532089472)) ('sigma_M_LRG', np.float64(0.21292720339707488))
[Interation 6] ('M_0_LRG', np.float64(12.580514904614489)) ('M_1_LRG', np.float64(13.684840827617005)) ('alpha_LRG', np.float64(1.0915856151110395)) ('f_sigv_LRG', np.float64(0.9254468651187234)) ('log_Mcent_LRG', np.float64(12.6305221212146)) ('sigma_M_LRG', np.float64(0.14562111039617665))
[Interation 6] ('M_0_LRG', np.float64(12.482063509482519)) ('M_1_LRG', np.float64(13.725401200587696)) ('alpha_LRG', np.float64(1.129135905359587)) ('f_sigv_LRG', np.float64(0.914966622468534)) ('log_Mcent_LRG', np.float64(12.661794367459445)) ('sigma_M_LRG', np.float64(0.21209416901673045))
[Interation 6] ('M_0_LRG', np.float64(12.458013696747122)) ('M_1_LRG', np.float64(13.725274382521262)) ('alpha_LRG', np.float64(1.1428815258159462)) ('f_sigv_LRG', np.float64(0.937618373008158)) ('log_Mcent_LRG', np.float64(12.666477275581363)) ('sigma_M_LRG', np.float64(0.2127682643281925))
[Interation 6] ('M_0_LRG', np.float64(12.567269282483789)) ('M_1_LRG', np.float64(13.72693361525545)) ('alpha_LRG', np.float64(1.05984532242022)) ('f_sigv_LRG', np.float64(0.9374071055177724)) ('log_Mcent_LRG', np.float64(12.660178160209576)) ('sigma_M_LRG', np.float64(0.21193157362593357))
[Interation 6] ('M_0_LRG', np.float64(12.471230369898711)) ('M_1_LRG', np.float64(13.726995047975466)) ('alpha_LRG', np.float64(1.1482278735328657)) ('f_sigv_LRG', np.float64(0.9204083082239869)) ('log_Mcent_LRG', np.float64(12.66332636538968)) ('sigma_M_LRG', np.float64(0.2120624075350226))
[Interation 6] ('M_0_LRG', np.float64(12.458507795204525)) ('M_1_LRG', np.float64(13.764983105462784)) ('alpha_LRG', np.float64(1.1284984970314353)) ('f_sigv_LRG', np.float64(0.9235247047970709)) ('log_Mcent_LRG', np.float64(12.690250074614992)) ('sigma_M_LRG', np.float64(0.23763500257786163))
[Interation 6] ('M_0_LRG', np.float64(12.43014818902569)) ('M_1_LRG', np.float64(13.733912524790465)) ('alpha_LRG', np.float64(1.1595393788560986)) ('f_sigv_LRG', np.float64(0.9370400825692058)) ('log_Mcent_LRG', np.float64(12.664849271894465)) ('sigma_M_LRG', np.float64(0.21396891081030128))
[Interation 6] ('M_0_LRG', np.float64(12.396720612591787)) ('M_1_LRG', np.float64(13.73654379251711)) ('alpha_LRG', np.float64(1.1850009425457646)) ('f_sigv_LRG', np.float64(0.9178580767799939)) ('log_Mcent_LRG', np.float64(12.668853493300535)) ('sigma_M_LRG', np.float64(0.20739477342710944))
[Interation 6] ('M_0_LRG', np.float64(12.485990185275785)) ('M_1_LRG', np.float64(13.751536485459676)) ('alpha_LRG', np.float64(1.109911437328409)) ('f_sigv_LRG', np.float64(0.9238010431652767)) ('log_Mcent_LRG', np.float64(12.689214887725992)) ('sigma_M_LRG', np.float64(0.26117189072579244))
[Interation 6] chi2=374.0298299071922
[Interation 6] chi2=326.1796336837696
[Interation 6] chi2=418.8244943673097
[Interation 6] chi2=397.9791406481464
[Interation 6] chi2=328.54213260431675
[Interation 6] chi2=421.19641065048984
[Interation 6] chi2=344.4818776910238
[Interation 6] chi2=325.89334868969144
[Interation 6] chi2=419.6553186316189
[Interation 6] chi2=331.3659596201052
[Interation 6] chi2=342.6167376047617
[Interation 6] chi2=357.62901283726563
[Interation 7] ('M_0_LRG', np.float64(12.588048074669205)) ('M_1_LRG', np.float64(13.689991481073056)) ('alpha_LRG', np.float64(1.0628508373778451)) ('f_sigv_LRG', np.float64(0.9327569352462812)) ('log_Mcent_LRG', np.float64(12.627510970534113)) ('sigma_M_LRG', np.float64(0.14698530680718858))
[Interation 7] ('M_0_LRG', np.float64(12.56765806013545)) ('M_1_LRG', np.float64(13.700311943784607)) ('alpha_LRG', np.float64(1.0743310176199072)) ('f_sigv_LRG', np.float64(0.939448919881566)) ('log_Mcent_LRG', np.float64(12.640049247096147)) ('sigma_M_LRG', np.float64(0.16674412911712622))
[Interation 7] ('M_0_LRG', np.float64(12.556794143609542)) ('M_1_LRG', np.float64(13.692273707927114)) ('alpha_LRG', np.float64(1.0838945247928784)) ('f_sigv_LRG', np.float64(0.9504501166712315)) ('log_Mcent_LRG', np.float64(12.627658244171702)) ('sigma_M_LRG', np.float64(0.14243344878406922))
[Interation 7] ('M_0_LRG', np.float64(12.512530897957513)) ('M_1_LRG', np.float64(13.718096553286852)) ('alpha_LRG', np.float64(1.1047834114276425)) ('f_sigv_LRG', np.float64(0.9309413722444537)) ('log_Mcent_LRG', np.float64(12.63878134503135)) ('sigma_M_LRG', np.float64(0.15216736096534722))
[Interation 7] chi2=356.0675360434511
[Interation 7] chi2=310.4901971082334
[Interation 7] chi2=332.47028277824074
[Interation 7] chi2=407.08628607422884
[Interation 7] ('M_0_LRG', np.float64(12.508539969969497)) ('M_1_LRG', np.float64(13.737356985671475)) ('alpha_LRG', np.float64(1.0882958009090433)) ('f_sigv_LRG', np.float64(0.9416359316529717)) ('log_Mcent_LRG', np.float64(12.657856464668868)) ('sigma_M_LRG', np.float64(0.1959029503520086))
[Interation 7] ('M_0_LRG', np.float64(12.583342782345365)) ('M_1_LRG', np.float64(13.703990238825348)) ('alpha_LRG', np.float64(1.0581233200666418)) ('f_sigv_LRG', np.float64(0.952054042539531)) ('log_Mcent_LRG', np.float64(12.65063505513871)) ('sigma_M_LRG', np.float64(0.19146289499782082))
[Interation 7] ('M_0_LRG', np.float64(12.519366265879574)) ('M_1_LRG', np.float64(13.715910640073776)) ('alpha_LRG', np.float64(1.0931312461781084)) ('f_sigv_LRG', np.float64(0.9425465763646484)) ('log_Mcent_LRG', np.float64(12.642466402629054)) ('sigma_M_LRG', np.float64(0.15935981897516194))
[Interation 7] ('M_0_LRG', np.float64(12.53557311211942)) ('M_1_LRG', np.float64(13.712066210643481)) ('alpha_LRG', np.float64(1.0998377735284615)) ('f_sigv_LRG', np.float64(0.9422509955606663)) ('log_Mcent_LRG', np.float64(12.643456400174259)) ('sigma_M_LRG', np.float64(0.16660716693805777))
[Interation 7] ('M_0_LRG', np.float64(12.52446107197762)) ('M_1_LRG', np.float64(13.691345226503957)) ('alpha_LRG', np.float64(1.110190178342421)) ('f_sigv_LRG', np.float64(0.9300016495803011)) ('log_Mcent_LRG', np.float64(12.624757476125264)) ('sigma_M_LRG', np.float64(0.13679455330607815))
[Interation 7] ('M_0_LRG', np.float64(12.503996352616522)) ('M_1_LRG', np.float64(13.725910212827326)) ('alpha_LRG', np.float64(1.1175464450354364)) ('f_sigv_LRG', np.float64(0.9341909476696615)) ('log_Mcent_LRG', np.float64(12.646617307678497)) ('sigma_M_LRG', np.float64(0.16690455903230073))
[Interation 7] ('M_0_LRG', np.float64(12.570530786198002)) ('M_1_LRG', np.float64(13.707488393094069)) ('alpha_LRG', np.float64(1.0728330154262513)) ('f_sigv_LRG', np.float64(0.9423386509580908)) ('log_Mcent_LRG', np.float64(12.640527854295534)) ('sigma_M_LRG', np.float64(0.16505165897961632))
[Interation 7] ('M_0_LRG', np.float64(12.554548894578023)) ('M_1_LRG', np.float64(13.702004352006856)) ('alpha_LRG', np.float64(1.086543426929061)) ('f_sigv_LRG', np.float64(0.9432306299191211)) ('log_Mcent_LRG', np.float64(12.630277235752079)) ('sigma_M_LRG', np.float64(0.1382181604630156))
[Interation 7] ('M_0_LRG', np.float64(12.548854294832598)) ('M_1_LRG', np.float64(13.695572779320743)) ('alpha_LRG', np.float64(1.0802788071212968)) ('f_sigv_LRG', np.float64(0.9383605322179693)) ('log_Mcent_LRG', np.float64(12.635143909257025)) ('sigma_M_LRG', np.float64(0.16182406820321277))
[Interation 7] ('M_0_LRG', np.float64(12.58039994925626)) ('M_1_LRG', np.float64(13.70060651664168)) ('alpha_LRG', np.float64(1.0640856748979113)) ('f_sigv_LRG', np.float64(0.9437725462814787)) ('log_Mcent_LRG', np.float64(12.635719796993598)) ('sigma_M_LRG', np.float64(0.15955050402222049))
[Interation 7] ('M_0_LRG', np.float64(12.534287565489345)) ('M_1_LRG', np.float64(13.719015578491234)) ('alpha_LRG', np.float64(1.0860173019185229)) ('f_sigv_LRG', np.float64(0.9340272122803667)) ('log_Mcent_LRG', np.float64(12.650536848757811)) ('sigma_M_LRG', np.float64(0.18922862641237814))
[Interation 7] ('M_0_LRG', np.float64(12.565533155553881)) ('M_1_LRG', np.float64(13.710910296465801)) ('alpha_LRG', np.float64(1.0740310485594629)) ('f_sigv_LRG', np.float64(0.9419996155963336)) ('log_Mcent_LRG', np.float64(12.651179859090416)) ('sigma_M_LRG', np.float64(0.18701851718624463))
[Interation 7] chi2=341.35001613773125
[Interation 7] chi2=377.0135553804623
[Interation 7] chi2=363.8771335268411
[Interation 7] chi2=366.8371941991543
[Interation 7] chi2=380.0138835867025
[Interation 7] chi2=345.9712345587759
[Interation 7] chi2=369.42453188378084
[Interation 7] chi2=347.96968094066017
[Interation 7] chi2=334.5359176435919
[Interation 7] chi2=374.4240538938295
[Interation 7] chi2=374.21506878789245
[Interation 7] chi2=372.93310033889964
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_06.npy
Set number of threads to 32
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.584978505152005)) ('M_1_LRG', np.float64(13.694728044103467)) ('alpha_LRG', np.float64(1.0611782607515392)) ('f_sigv_LRG', np.float64(0.9397573384605185)) ('log_Mcent_LRG', np.float64(12.632332083920167)) ('sigma_M_LRG', np.float64(0.14755313765857936))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.31302905082702637
Start satellite assignement
Satellite assignement done 0.07305622100830078
LRG mock catalogue done 0.14602136611938477
612727 central galaxies, 86532 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6375827789306641
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_06.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:17
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:17
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Load correlation matrix for LRG at z0.95 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.59512497697435)) ('M_1_LRG', np.float64(13.68361235212536)) ('alpha_LRG', np.float64(1.1358692934776324)) ('f_sigv_LRG', np.float64(0.9299744292815944)) ('log_Mcent_LRG', np.float64(12.773640066341281)) ('sigma_M_LRG', np.float64(0.37032220878685573))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.450750251670724)) ('M_1_LRG', np.float64(13.998967149115687)) ('alpha_LRG', np.float64(1.0266819333293775)) ('f_sigv_LRG', np.float64(1.0038420320602208)) ('log_Mcent_LRG', np.float64(12.798397363349578)) ('sigma_M_LRG', np.float64(0.30872418306640637))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.57474655080142)) ('M_1_LRG', np.float64(13.931967828814605)) ('alpha_LRG', np.float64(0.9496264113321682)) ('f_sigv_LRG', np.float64(0.8839914598568586)) ('log_Mcent_LRG', np.float64(12.77472417378177)) ('sigma_M_LRG', np.float64(0.4893202712814274))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.340127979618842)) ('M_1_LRG', np.float64(13.890738927646323)) ('alpha_LRG', np.float64(0.9849850867016908)) ('f_sigv_LRG', np.float64(0.8963656027894884)) ('log_Mcent_LRG', np.float64(12.767588137380848)) ('sigma_M_LRG', np.float64(0.3690176757350251))
[Interation 8] chi2=933.5210395868604
[Interation 8] chi2=806.0576155025346
[Interation 8] chi2=2560.9617122844506
[Interation 8] chi2=621.1406998733022
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.417837959702599)) ('M_1_LRG', np.float64(13.793385189057052)) ('alpha_LRG', np.float64(1.1568527653112297)) ('f_sigv_LRG', np.float64(0.9284508144449979)) ('log_Mcent_LRG', np.float64(12.750139496587488)) ('sigma_M_LRG', np.float64(0.3477143506431175))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.487268915987777)) ('M_1_LRG', np.float64(13.700896325977586)) ('alpha_LRG', np.float64(1.1288051309057991)) ('f_sigv_LRG', np.float64(0.9124144078117472)) ('log_Mcent_LRG', np.float64(12.628154896904013)) ('sigma_M_LRG', np.float64(0.18421836307332617))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.579926338835788)) ('M_1_LRG', np.float64(13.72800696576729)) ('alpha_LRG', np.float64(1.0386187233169584)) ('f_sigv_LRG', np.float64(0.9325772104834256)) ('log_Mcent_LRG', np.float64(12.68476200182543)) ('sigma_M_LRG', np.float64(0.27555594540106965))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.581648873988229)) ('M_1_LRG', np.float64(13.783980030489785)) ('alpha_LRG', np.float64(1.053637995902381)) ('f_sigv_LRG', np.float64(0.9108479757305449)) ('log_Mcent_LRG', np.float64(12.744515898975598)) ('sigma_M_LRG', np.float64(0.32317714075349696))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.356619046247703)) ('M_1_LRG', np.float64(13.758442807121739)) ('alpha_LRG', np.float64(1.210684944321037)) ('f_sigv_LRG', np.float64(0.9059891133181124)) ('log_Mcent_LRG', np.float64(12.731171147709894)) ('sigma_M_LRG', np.float64(0.3143752699982439))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.359079860167833)) ('M_1_LRG', np.float64(13.780116965432747)) ('alpha_LRG', np.float64(1.1966998921413512)) ('f_sigv_LRG', np.float64(0.923906219896224)) ('log_Mcent_LRG', np.float64(12.7090641399693)) ('sigma_M_LRG', np.float64(0.2570111976434907))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.526605423431844)) ('M_1_LRG', np.float64(13.723807933605718)) ('alpha_LRG', np.float64(1.1063220528349873)) ('f_sigv_LRG', np.float64(0.9412836917016745)) ('log_Mcent_LRG', np.float64(12.671401076912877)) ('sigma_M_LRG', np.float64(0.23454846090860015))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.525121191808354)) ('M_1_LRG', np.float64(13.772895477295886)) ('alpha_LRG', np.float64(1.0500133620096919)) ('f_sigv_LRG', np.float64(0.9185911811351559)) ('log_Mcent_LRG', np.float64(12.658055771478715)) ('sigma_M_LRG', np.float64(0.19805992654721322))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.454698998961021)) ('M_1_LRG', np.float64(13.748294737120686)) ('alpha_LRG', np.float64(1.161567940617995)) ('f_sigv_LRG', np.float64(0.9323896172852794)) ('log_Mcent_LRG', np.float64(12.716018238548871)) ('sigma_M_LRG', np.float64(0.27390059918845516))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.697943375387624)) ('M_1_LRG', np.float64(13.829015069022299)) ('alpha_LRG', np.float64(0.9246156015079411)) ('f_sigv_LRG', np.float64(0.9536951060105141)) ('log_Mcent_LRG', np.float64(12.79939362274064)) ('sigma_M_LRG', np.float64(0.4230148140656724))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.514809890967655)) ('M_1_LRG', np.float64(13.81858778885966)) ('alpha_LRG', np.float64(0.9819552347499927)) ('f_sigv_LRG', np.float64(0.9741387456921025)) ('log_Mcent_LRG', np.float64(12.709454323360898)) ('sigma_M_LRG', np.float64(0.28699719181756067))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.589303094169793)) ('M_1_LRG', np.float64(13.772941391577465)) ('alpha_LRG', np.float64(1.0516743016472883)) ('f_sigv_LRG', np.float64(0.9513009373334638)) ('log_Mcent_LRG', np.float64(12.728665322616488)) ('sigma_M_LRG', np.float64(0.30995740003587335))
[Interation 8] chi2=528.6239084449046
[Interation 8] chi2=433.4478216867953
[Interation 8] chi2=391.66065159585065
[Interation 8] chi2=380.3526354013569
[Interation 8] chi2=413.380372586371
[Interation 8] chi2=421.7732443868192
[Interation 8] chi2=416.03891451014937
[Interation 8] chi2=381.22369220982586
[Interation 8] chi2=364.2179356969624
[Interation 8] chi2=372.7963239056016
[Interation 8] chi2=405.5052156084374
[Interation 8] chi2=405.1257117948302
[Interation 9] ('M_0_LRG', np.float64(12.473010319724954)) ('M_1_LRG', np.float64(13.702446633428833)) ('alpha_LRG', np.float64(1.1551643880793183)) ('f_sigv_LRG', np.float64(0.9176660997896633)) ('log_Mcent_LRG', np.float64(12.640843783250359)) ('sigma_M_LRG', np.float64(0.16437231680181613))
[Interation 9] ('M_0_LRG', np.float64(12.657312337201718)) ('M_1_LRG', np.float64(13.69301748187393)) ('alpha_LRG', np.float64(1.0391271451626916)) ('f_sigv_LRG', np.float64(0.9267304197361808)) ('log_Mcent_LRG', np.float64(12.64134292500007)) ('sigma_M_LRG', np.float64(0.1703939102424883))
[Interation 9] ('M_0_LRG', np.float64(12.485053525787027)) ('M_1_LRG', np.float64(13.674455471849537)) ('alpha_LRG', np.float64(1.1525893757937227)) ('f_sigv_LRG', np.float64(0.927018856559551)) ('log_Mcent_LRG', np.float64(12.635524828573587)) ('sigma_M_LRG', np.float64(0.1602710590540709))
[Interation 9] ('M_0_LRG', np.float64(12.467031528782332)) ('M_1_LRG', np.float64(13.707484297910414)) ('alpha_LRG', np.float64(1.1550051725185038)) ('f_sigv_LRG', np.float64(0.9121191490324883)) ('log_Mcent_LRG', np.float64(12.659311264084629)) ('sigma_M_LRG', np.float64(0.20710945318135554))
[Interation 9] chi2=334.9181141009981
[Interation 9] chi2=337.2536268330832
[Interation 9] chi2=373.1247236492675
[Interation 9] chi2=370.9130303776667
[Interation 9] ('M_0_LRG', np.float64(12.411510439084488)) ('M_1_LRG', np.float64(13.752587119976598)) ('alpha_LRG', np.float64(1.1527342557001539)) ('f_sigv_LRG', np.float64(0.9581742430528354)) ('log_Mcent_LRG', np.float64(12.66270353245574)) ('sigma_M_LRG', np.float64(0.19470396137555662))
[Interation 9] ('M_0_LRG', np.float64(12.43095362411787)) ('M_1_LRG', np.float64(13.702468263544931)) ('alpha_LRG', np.float64(1.1577037087240376)) ('f_sigv_LRG', np.float64(0.9101860704638013)) ('log_Mcent_LRG', np.float64(12.628550813057359)) ('sigma_M_LRG', np.float64(0.1502836590429784))
[Interation 9] ('M_0_LRG', np.float64(12.467421869665515)) ('M_1_LRG', np.float64(13.725536130916932)) ('alpha_LRG', np.float64(1.1280663248158544)) ('f_sigv_LRG', np.float64(0.917287045414517)) ('log_Mcent_LRG', np.float64(12.663022144610986)) ('sigma_M_LRG', np.float64(0.2144268172543921))
[Interation 9] ('M_0_LRG', np.float64(12.516381721647498)) ('M_1_LRG', np.float64(13.719936553055167)) ('alpha_LRG', np.float64(1.088422133922646)) ('f_sigv_LRG', np.float64(0.955242119704095)) ('log_Mcent_LRG', np.float64(12.643225237808167)) ('sigma_M_LRG', np.float64(0.15199074538583252))
[Interation 9] ('M_0_LRG', np.float64(12.546308929393915)) ('M_1_LRG', np.float64(13.71044953919009)) ('alpha_LRG', np.float64(1.0874095620632702)) ('f_sigv_LRG', np.float64(0.9404148303288236)) ('log_Mcent_LRG', np.float64(12.658281923676567)) ('sigma_M_LRG', np.float64(0.19438154870019692))
[Interation 9] ('M_0_LRG', np.float64(12.47015412096641)) ('M_1_LRG', np.float64(13.752530417884302)) ('alpha_LRG', np.float64(1.112132701490091)) ('f_sigv_LRG', np.float64(0.9311763809277045)) ('log_Mcent_LRG', np.float64(12.678321639437108)) ('sigma_M_LRG', np.float64(0.23610730566534083))
[Interation 9] ('M_0_LRG', np.float64(12.474167878147712)) ('M_1_LRG', np.float64(13.729542659314754)) ('alpha_LRG', np.float64(1.1152779880680024)) ('f_sigv_LRG', np.float64(0.9297944797796776)) ('log_Mcent_LRG', np.float64(12.653254904298413)) ('sigma_M_LRG', np.float64(0.18124885836332383))
[Interation 9] ('M_0_LRG', np.float64(12.587274330759044)) ('M_1_LRG', np.float64(13.724820779739206)) ('alpha_LRG', np.float64(1.069641761558721)) ('f_sigv_LRG', np.float64(0.9438878888537922)) ('log_Mcent_LRG', np.float64(12.6801548225313)) ('sigma_M_LRG', np.float64(0.23903143943375893))
[Interation 9] ('M_0_LRG', np.float64(12.525460953741266)) ('M_1_LRG', np.float64(13.718619128352833)) ('alpha_LRG', np.float64(1.1059628983567475)) ('f_sigv_LRG', np.float64(0.9379921789248015)) ('log_Mcent_LRG', np.float64(12.661090932846829)) ('sigma_M_LRG', np.float64(0.2020694104680475))
[Interation 9] ('M_0_LRG', np.float64(12.456294100041633)) ('M_1_LRG', np.float64(13.719836345805184)) ('alpha_LRG', np.float64(1.1320640090649576)) ('f_sigv_LRG', np.float64(0.9283876574058476)) ('log_Mcent_LRG', np.float64(12.641225440800136)) ('sigma_M_LRG', np.float64(0.16974869047660324))
[Interation 9] ('M_0_LRG', np.float64(12.632989735467804)) ('M_1_LRG', np.float64(13.730926735024994)) ('alpha_LRG', np.float64(1.0267324749084497)) ('f_sigv_LRG', np.float64(0.9438376198667523)) ('log_Mcent_LRG', np.float64(12.677073475967381)) ('sigma_M_LRG', np.float64(0.22653784486573514))
[Interation 9] ('M_0_LRG', np.float64(12.558974372892639)) ('M_1_LRG', np.float64(13.70067351203493)) ('alpha_LRG', np.float64(1.0858235950684274)) ('f_sigv_LRG', np.float64(0.9340238467133459)) ('log_Mcent_LRG', np.float64(12.64019743204609)) ('sigma_M_LRG', np.float64(0.17144214814078274))
[Interation 9] chi2=386.7457636119775
[Interation 9] chi2=375.8695352881314
[Interation 9] chi2=334.9616730089023
[Interation 9] chi2=382.82668055629034
[Interation 9] chi2=368.4513764632582
[Interation 9] chi2=372.87436802676274
[Interation 9] chi2=408.1419784529482
[Interation 9] chi2=365.34642555900973
[Interation 9] chi2=319.79099317285517
[Interation 9] chi2=356.21492286797013
[Interation 9] chi2=399.9827922826757
[Interation 9] chi2=375.99617939481243
[Interation 10] ('M_0_LRG', np.float64(12.50498986844679)) ('M_1_LRG', np.float64(13.721451663438351)) ('alpha_LRG', np.float64(1.117032166163657)) ('f_sigv_LRG', np.float64(0.9301345124046283)) ('log_Mcent_LRG', np.float64(12.654084416783926)) ('sigma_M_LRG', np.float64(0.1897378174000205))
[Interation 10] ('M_0_LRG', np.float64(12.563689027098409)) ('M_1_LRG', np.float64(13.706740838754902)) ('alpha_LRG', np.float64(1.0779455692678634)) ('f_sigv_LRG', np.float64(0.936205425560635)) ('log_Mcent_LRG', np.float64(12.644367295880004)) ('sigma_M_LRG', np.float64(0.1689275157666058))
[Interation 10] ('M_0_LRG', np.float64(12.526998115916447)) ('M_1_LRG', np.float64(13.733782029852359)) ('alpha_LRG', np.float64(1.0860874278590982)) ('f_sigv_LRG', np.float64(0.92596365398424)) ('log_Mcent_LRG', np.float64(12.666922471909983)) ('sigma_M_LRG', np.float64(0.21330619086466923))
[Interation 10] ('M_0_LRG', np.float64(12.517830619479893)) ('M_1_LRG', np.float64(13.715150526227578)) ('alpha_LRG', np.float64(1.1031413193224842)) ('f_sigv_LRG', np.float64(0.9287528765653874)) ('log_Mcent_LRG', np.float64(12.647125842425396)) ('sigma_M_LRG', np.float64(0.1814549308520187))
[Interation 10] chi2=371.60323363531796
[Interation 10] chi2=365.2993939288437
[Interation 10] chi2=384.8020440801401
[Interation 10] chi2=394.89794197700024
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_07.npy
Set number of threads to 32
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.561300032882102)) ('M_1_LRG', np.float64(13.706536062347661)) ('alpha_LRG', np.float64(1.0860274074509182)) ('f_sigv_LRG', np.float64(0.9207922672771018)) ('log_Mcent_LRG', np.float64(12.650614361969787)) ('sigma_M_LRG', np.float64(0.191026900827234))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3527488708496094
Start satellite assignement
Satellite assignement done 0.07466244697570801
LRG mock catalogue done 0.14888310432434082
612979 central galaxies, 86781 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.691861629486084
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_07.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:18
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:18
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.508425117636232)) ('M_1_LRG', np.float64(13.683663202804086)) ('alpha_LRG', np.float64(1.066906006748396)) ('f_sigv_LRG', np.float64(0.947725325841932)) ('log_Mcent_LRG', np.float64(12.767537612545713)) ('sigma_M_LRG', np.float64(0.4269964871103776))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.588988367263214)) ('M_1_LRG', np.float64(13.466826827221006)) ('alpha_LRG', np.float64(0.9715693983570607)) ('f_sigv_LRG', np.float64(1.1661423074086366)) ('log_Mcent_LRG', np.float64(12.746875872558043)) ('sigma_M_LRG', np.float64(0.43047196619256556))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.617861078471666)) ('M_1_LRG', np.float64(13.851090517961447)) ('alpha_LRG', np.float64(1.0179836295040712)) ('f_sigv_LRG', np.float64(1.0276894905776888)) ('log_Mcent_LRG', np.float64(12.796476172840293)) ('sigma_M_LRG', np.float64(0.3701574434283945))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.50235374465191)) ('M_1_LRG', np.float64(13.45001200166763)) ('alpha_LRG', np.float64(1.0426238190820534)) ('f_sigv_LRG', np.float64(0.8998462338681023)) ('log_Mcent_LRG', np.float64(12.830482246008206)) ('sigma_M_LRG', np.float64(0.4488178833457728))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.544247367492023)) ('M_1_LRG', np.float64(13.743011787636451)) ('alpha_LRG', np.float64(0.9884783845895674)) ('f_sigv_LRG', np.float64(1.0184417735250555)) ('log_Mcent_LRG', np.float64(12.757672535166709)) ('sigma_M_LRG', np.float64(0.4290184826996425))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.676069108290328)) ('M_1_LRG', np.float64(13.514456662338286)) ('alpha_LRG', np.float64(0.9305143831102614)) ('f_sigv_LRG', np.float64(1.0018160681481854)) ('log_Mcent_LRG', np.float64(12.74121375644808)) ('sigma_M_LRG', np.float64(0.6007641109657642))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.481612013228316)) ('M_1_LRG', np.float64(13.4521868441105)) ('alpha_LRG', np.float64(1.2214414277917351)) ('f_sigv_LRG', np.float64(1.0117894673178407)) ('log_Mcent_LRG', np.float64(12.63940698772958)) ('sigma_M_LRG', np.float64(0.2637225249201193))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.41085943964733)) ('M_1_LRG', np.float64(13.648226529660564)) ('alpha_LRG', np.float64(0.9740164143459437)) ('f_sigv_LRG', np.float64(1.0956327092993368)) ('log_Mcent_LRG', np.float64(12.779313341579368)) ('sigma_M_LRG', np.float64(0.44042434440061473))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.537965768739511)) ('M_1_LRG', np.float64(13.567654521843382)) ('alpha_LRG', np.float64(1.0977517924557545)) ('f_sigv_LRG', np.float64(0.9853506205740581)) ('log_Mcent_LRG', np.float64(12.650289321449364)) ('sigma_M_LRG', np.float64(0.3980980779876355))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.473080017082173)) ('M_1_LRG', np.float64(13.676167981985262)) ('alpha_LRG', np.float64(1.0674181544822188)) ('f_sigv_LRG', np.float64(0.9253086821406942)) ('log_Mcent_LRG', np.float64(12.688383543201162)) ('sigma_M_LRG', np.float64(0.44545433773730175))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.55995805021485)) ('M_1_LRG', np.float64(13.651322656468011)) ('alpha_LRG', np.float64(0.9787711803826595)) ('f_sigv_LRG', np.float64(1.1242875830425438)) ('log_Mcent_LRG', np.float64(12.67594694760527)) ('sigma_M_LRG', np.float64(0.2707745839278205))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.475247663742396)) ('M_1_LRG', np.float64(13.606780526832866)) ('alpha_LRG', np.float64(1.1176620280348544)) ('f_sigv_LRG', np.float64(1.0030032751054527)) ('log_Mcent_LRG', np.float64(12.701123405947824)) ('sigma_M_LRG', np.float64(0.45032671574633776))
[Interation 10] chi2=873.3521577908389
[Interation 10] chi2=535.4589882724518
[Interation 10] chi2=4562.42327262634
[Interation 10] chi2=14549.527465420859
[Interation 10] chi2=1001.0828577975282
[Interation 10] chi2=4419.747367495737
[Interation 10] chi2=5063.97015729443
[Interation 10] chi2=2322.757717494534
[Interation 10] chi2=2169.499479731103
[Interation 10] chi2=2000.3193164114364
[Interation 10] chi2=1126.0905750389222
[Interation 10] chi2=2123.233594044536
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 11] ('M_0_LRG', np.float64(12.482558732947483)) ('M_1_LRG', np.float64(13.737729269684776)) ('alpha_LRG', np.float64(1.1172903500777212)) ('f_sigv_LRG', np.float64(0.9512309488691181)) ('log_Mcent_LRG', np.float64(12.672673092479492)) ('sigma_M_LRG', np.float64(0.22368154562627135))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 11] ('M_0_LRG', np.float64(12.496688292207434)) ('M_1_LRG', np.float64(13.687471609388652)) ('alpha_LRG', np.float64(1.1287949816056633)) ('f_sigv_LRG', np.float64(0.948850022738424)) ('log_Mcent_LRG', np.float64(12.6186247149232)) ('sigma_M_LRG', np.float64(0.1484553786830769))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 11] ('M_0_LRG', np.float64(12.629968389660828)) ('M_1_LRG', np.float64(13.691986952681532)) ('alpha_LRG', np.float64(1.0653969119357904)) ('f_sigv_LRG', np.float64(0.9144802521404225)) ('log_Mcent_LRG', np.float64(12.66670712325971)) ('sigma_M_LRG', np.float64(0.23117546148389528))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 11] ('M_0_LRG', np.float64(12.461015276401092)) ('M_1_LRG', np.float64(13.732988114564664)) ('alpha_LRG', np.float64(1.1585185304837937)) ('f_sigv_LRG', np.float64(0.8971882544831021)) ('log_Mcent_LRG', np.float64(12.646360660699061)) ('sigma_M_LRG', np.float64(0.18088535386621862))
[Interation 11] chi2=392.2040543288764
[Interation 11] chi2=356.96475946904843
[Interation 11] chi2=409.0153412207767
[Interation 11] chi2=360.6897121790992
[Interation 11] ('M_0_LRG', np.float64(12.600008498101428)) ('M_1_LRG', np.float64(13.6907809508542)) ('alpha_LRG', np.float64(1.077139469067864)) ('f_sigv_LRG', np.float64(0.9219855457033859)) ('log_Mcent_LRG', np.float64(12.63698032682575)) ('sigma_M_LRG', np.float64(0.17014653696408794))
[Interation 11] ('M_0_LRG', np.float64(12.560806044976749)) ('M_1_LRG', np.float64(13.73121125649673)) ('alpha_LRG', np.float64(1.089474164364454)) ('f_sigv_LRG', np.float64(0.9374137998551856)) ('log_Mcent_LRG', np.float64(12.661715436780215)) ('sigma_M_LRG', np.float64(0.19403353265666662))
[Interation 11] ('M_0_LRG', np.float64(12.574317310024707)) ('M_1_LRG', np.float64(13.716947239502762)) ('alpha_LRG', np.float64(1.053817223742631)) ('f_sigv_LRG', np.float64(0.9469716879786452)) ('log_Mcent_LRG', np.float64(12.659494687177789)) ('sigma_M_LRG', np.float64(0.20320319024262506))
[Interation 11] ('M_0_LRG', np.float64(12.399927535422563)) ('M_1_LRG', np.float64(13.723661788315363)) ('alpha_LRG', np.float64(1.2164673416644216)) ('f_sigv_LRG', np.float64(0.9296632064892804)) ('log_Mcent_LRG', np.float64(12.650233463604714)) ('sigma_M_LRG', np.float64(0.1743577493709515))
[Interation 11] ('M_0_LRG', np.float64(12.551809921385326)) ('M_1_LRG', np.float64(13.706171844952465)) ('alpha_LRG', np.float64(1.0904236083589385)) ('f_sigv_LRG', np.float64(0.9446043366320351)) ('log_Mcent_LRG', np.float64(12.638459112195877)) ('sigma_M_LRG', np.float64(0.16474739125795002))
[Interation 11] ('M_0_LRG', np.float64(12.582753011469581)) ('M_1_LRG', np.float64(13.681248871877091)) ('alpha_LRG', np.float64(1.0581513430756277)) ('f_sigv_LRG', np.float64(0.9229465436145685)) ('log_Mcent_LRG', np.float64(12.628630772254905)) ('sigma_M_LRG', np.float64(0.15580208643452192))
[Interation 11] ('M_0_LRG', np.float64(12.446924248429292)) ('M_1_LRG', np.float64(13.713968783899025)) ('alpha_LRG', np.float64(1.165313793157253)) ('f_sigv_LRG', np.float64(0.9225557662611629)) ('log_Mcent_LRG', np.float64(12.64300844960938)) ('sigma_M_LRG', np.float64(0.17469675253770578))
[Interation 11] ('M_0_LRG', np.float64(12.547197135076773)) ('M_1_LRG', np.float64(13.734570181400187)) ('alpha_LRG', np.float64(1.0822411908500633)) ('f_sigv_LRG', np.float64(0.9438095382153585)) ('log_Mcent_LRG', np.float64(12.67575158784342)) ('sigma_M_LRG', np.float64(0.22595076785603463))
[Interation 11] ('M_0_LRG', np.float64(12.578595402606842)) ('M_1_LRG', np.float64(13.715005685347311)) ('alpha_LRG', np.float64(1.0503664157455004)) ('f_sigv_LRG', np.float64(0.9426158003251658)) ('log_Mcent_LRG', np.float64(12.642468421328031)) ('sigma_M_LRG', np.float64(0.16561353686996388))
[Interation 11] ('M_0_LRG', np.float64(12.538913165329701)) ('M_1_LRG', np.float64(13.691779589328062)) ('alpha_LRG', np.float64(1.113895347684539)) ('f_sigv_LRG', np.float64(0.9349727700081308)) ('log_Mcent_LRG', np.float64(12.634912397632753)) ('sigma_M_LRG', np.float64(0.16542621876261188))
[Interation 11] ('M_0_LRG', np.float64(12.469833742386838)) ('M_1_LRG', np.float64(13.742265308220572)) ('alpha_LRG', np.float64(1.1154873035142785)) ('f_sigv_LRG', np.float64(0.9165617088487091)) ('log_Mcent_LRG', np.float64(12.664452255935135)) ('sigma_M_LRG', np.float64(0.21879888478873571))
[Interation 11] ('M_0_LRG', np.float64(12.577879119716277)) ('M_1_LRG', np.float64(13.744448163971153)) ('alpha_LRG', np.float64(1.0687794588645514)) ('f_sigv_LRG', np.float64(0.9445998072911721)) ('log_Mcent_LRG', np.float64(12.68138932971334)) ('sigma_M_LRG', np.float64(0.2272297928782568))
[Interation 11] chi2=343.58291051039157
[Interation 11] chi2=422.4324544019415
[Interation 11] chi2=358.3776308830544
[Interation 11] chi2=378.2549600878497
[Interation 11] chi2=326.7959687560026
[Interation 11] chi2=356.3755316873115
[Interation 11] chi2=355.1893602072388
[Interation 11] chi2=390.7222759345103
[Interation 11] chi2=382.2245592177451
[Interation 11] chi2=341.5823680669391
[Interation 11] chi2=334.9991229857195
[Interation 11] chi2=362.27363906686196
[Interation 12] ('M_0_LRG', np.float64(12.51779199717117)) ('M_1_LRG', np.float64(13.703968588416984)) ('alpha_LRG', np.float64(1.1039430561834869)) ('f_sigv_LRG', np.float64(0.9382600695582878)) ('log_Mcent_LRG', np.float64(12.63379908007475)) ('sigma_M_LRG', np.float64(0.1569210464814892))
[Interation 12] ('M_0_LRG', np.float64(12.548469742275886)) ('M_1_LRG', np.float64(13.696680527836595)) ('alpha_LRG', np.float64(1.0791582861369493)) ('f_sigv_LRG', np.float64(0.9283317269123083)) ('log_Mcent_LRG', np.float64(12.627729419003579)) ('sigma_M_LRG', np.float64(0.14512428266595379))
[Interation 12] ('M_0_LRG', np.float64(12.557975410093954)) ('M_1_LRG', np.float64(13.705949518774458)) ('alpha_LRG', np.float64(1.0920727680875817)) ('f_sigv_LRG', np.float64(0.9192779140117155)) ('log_Mcent_LRG', np.float64(12.647329587081371)) ('sigma_M_LRG', np.float64(0.1811046335836804))
[Interation 12] ('M_0_LRG', np.float64(12.497618652926244)) ('M_1_LRG', np.float64(13.701837173106085)) ('alpha_LRG', np.float64(1.128563290465947)) ('f_sigv_LRG', np.float64(0.9305348822339043)) ('log_Mcent_LRG', np.float64(12.636838728460436)) ('sigma_M_LRG', np.float64(0.162275558922497))
[Interation 12] chi2=397.88581221063464
[Interation 12] chi2=421.0171082697894
[Interation 12] chi2=394.8219710680491
[Interation 12] chi2=390.2302778523875
[Interation 12] ('M_0_LRG', np.float64(12.603593256559439)) ('M_1_LRG', np.float64(13.702719030166039)) ('alpha_LRG', np.float64(1.07449442027481)) ('f_sigv_LRG', np.float64(0.9194820415102694)) ('log_Mcent_LRG', np.float64(12.652627647104921)) ('sigma_M_LRG', np.float64(0.1961499624943121))
[Interation 12] ('M_0_LRG', np.float64(12.53687415905237)) ('M_1_LRG', np.float64(13.702181399501868)) ('alpha_LRG', np.float64(1.1012970023768738)) ('f_sigv_LRG', np.float64(0.9195078644377699)) ('log_Mcent_LRG', np.float64(12.639173832111311)) ('sigma_M_LRG', np.float64(0.17532531370912746))
[Interation 12] ('M_0_LRG', np.float64(12.561571894536026)) ('M_1_LRG', np.float64(13.69609678351887)) ('alpha_LRG', np.float64(1.0893810078440807)) ('f_sigv_LRG', np.float64(0.9174191552802865)) ('log_Mcent_LRG', np.float64(12.631730962478677)) ('sigma_M_LRG', np.float64(0.15658784739803838))
[Interation 12] ('M_0_LRG', np.float64(12.595595131964897)) ('M_1_LRG', np.float64(13.688257578716732)) ('alpha_LRG', np.float64(1.0787456553021009)) ('f_sigv_LRG', np.float64(0.9220666974625777)) ('log_Mcent_LRG', np.float64(12.632450807391171)) ('sigma_M_LRG', np.float64(0.1538047607148606))
[Interation 12] ('M_0_LRG', np.float64(12.535902745582401)) ('M_1_LRG', np.float64(13.695075426225852)) ('alpha_LRG', np.float64(1.1049249255336855)) ('f_sigv_LRG', np.float64(0.9434500656345406)) ('log_Mcent_LRG', np.float64(12.63082353793213)) ('sigma_M_LRG', np.float64(0.14502152700633347))
[Interation 12] ('M_0_LRG', np.float64(12.536605171136905)) ('M_1_LRG', np.float64(13.692542585311335)) ('alpha_LRG', np.float64(1.0998773221819707)) ('f_sigv_LRG', np.float64(0.9416914648343213)) ('log_Mcent_LRG', np.float64(12.627853034504392)) ('sigma_M_LRG', np.float64(0.13969503293709945))
[Interation 12] ('M_0_LRG', np.float64(12.493721547079085)) ('M_1_LRG', np.float64(13.711112736568564)) ('alpha_LRG', np.float64(1.1165057087301102)) ('f_sigv_LRG', np.float64(0.933681405843521)) ('log_Mcent_LRG', np.float64(12.642391284666036)) ('sigma_M_LRG', np.float64(0.17360269198005057))
[Interation 12] ('M_0_LRG', np.float64(12.520695481681736)) ('M_1_LRG', np.float64(13.697954382279605)) ('alpha_LRG', np.float64(1.105576177325593)) ('f_sigv_LRG', np.float64(0.9376206947534059)) ('log_Mcent_LRG', np.float64(12.632311981379898)) ('sigma_M_LRG', np.float64(0.14750243990672002))
[Interation 12] ('M_0_LRG', np.float64(12.522212108145627)) ('M_1_LRG', np.float64(13.698614879046932)) ('alpha_LRG', np.float64(1.0994627869795957)) ('f_sigv_LRG', np.float64(0.9494242322454595)) ('log_Mcent_LRG', np.float64(12.634036657371855)) ('sigma_M_LRG', np.float64(0.1529942145747074))
[Interation 12] ('M_0_LRG', np.float64(12.550713938044101)) ('M_1_LRG', np.float64(13.704879161245117)) ('alpha_LRG', np.float64(1.092200834968554)) ('f_sigv_LRG', np.float64(0.9382840311153515)) ('log_Mcent_LRG', np.float64(12.645803611508567)) ('sigma_M_LRG', np.float64(0.17596760502427156))
[Interation 12] ('M_0_LRG', np.float64(12.531519439454847)) ('M_1_LRG', np.float64(13.69514307446919)) ('alpha_LRG', np.float64(1.096261094257359)) ('f_sigv_LRG', np.float64(0.9316036450059038)) ('log_Mcent_LRG', np.float64(12.62443200499242)) ('sigma_M_LRG', np.float64(0.1428602631648601))
[Interation 12] ('M_0_LRG', np.float64(12.577884732404492)) ('M_1_LRG', np.float64(13.700257119381137)) ('alpha_LRG', np.float64(1.085633792557541)) ('f_sigv_LRG', np.float64(0.9187081684551559)) ('log_Mcent_LRG', np.float64(12.646121103057498)) ('sigma_M_LRG', np.float64(0.18234052271824358))
[Interation 12] chi2=355.93487642776125
[Interation 12] chi2=351.7926853917324
[Interation 12] chi2=324.4740087347694
[Interation 12] chi2=365.21492852231717
[Interation 12] chi2=343.53954985332297
[Interation 12] chi2=358.07938940488924
[Interation 12] chi2=350.456073416954
[Interation 12] chi2=350.23256244160586
[Interation 12] chi2=400.9866856752781
[Interation 12] chi2=358.74136943519113
[Interation 12] chi2=379.7818129871985
[Interation 12] chi2=407.2086390407433
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_08.npy
Set number of threads to 32
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.559013326623399)) ('M_1_LRG', np.float64(13.701701092402645)) ('alpha_LRG', np.float64(1.0823881009775467)) ('f_sigv_LRG', np.float64(0.9341723531087252)) ('log_Mcent_LRG', np.float64(12.64169896450059)) ('sigma_M_LRG', np.float64(0.17135655854991316))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.32964563369750977
Start satellite assignement
Satellite assignement done 0.07326006889343262
LRG mock catalogue done 0.14786839485168457
611664 central galaxies, 86941 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6565864086151123
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_08.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:19
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:19
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:27
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.660577504038868)) ('M_1_LRG', np.float64(13.66323980942878)) ('alpha_LRG', np.float64(0.9208803735954827)) ('f_sigv_LRG', np.float64(0.6895722587247917)) ('log_Mcent_LRG', np.float64(12.660902115622145)) ('sigma_M_LRG', np.float64(0.5105062394333363))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.466751730339125)) ('M_1_LRG', np.float64(13.789212505101872)) ('alpha_LRG', np.float64(1.1048906837623784)) ('f_sigv_LRG', np.float64(1.0888055696429053)) ('log_Mcent_LRG', np.float64(12.614981963839009)) ('sigma_M_LRG', np.float64(0.22504845996907863))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.383962805484408)) ('M_1_LRG', np.float64(14.054536580948032)) ('alpha_LRG', np.float64(1.0505183271481997)) ('f_sigv_LRG', np.float64(1.0210234510254972)) ('log_Mcent_LRG', np.float64(12.822529084960241)) ('sigma_M_LRG', np.float64(0.27049783150778284))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.36098622002758)) ('M_1_LRG', np.float64(13.956825784662675)) ('alpha_LRG', np.float64(1.3059929340421386)) ('f_sigv_LRG', np.float64(0.7436176091487474)) ('log_Mcent_LRG', np.float64(12.879645772610246)) ('sigma_M_LRG', np.float64(0.4135446148811367))
[Interation 13] chi2=3882.11370609111
[Interation 13] chi2=1578.6478973939934
[Interation 13] chi2=1385.8956779448629
[Interation 13] chi2=1820.6705908378453
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.39809441081801)) ('M_1_LRG', np.float64(13.820700761746926)) ('alpha_LRG', np.float64(1.1932494967247207)) ('f_sigv_LRG', np.float64(0.9195654771083622)) ('log_Mcent_LRG', np.float64(12.781315523077838)) ('sigma_M_LRG', np.float64(0.3794447012668889))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.47325044008122)) ('M_1_LRG', np.float64(13.678264135286774)) ('alpha_LRG', np.float64(1.1919981654786604)) ('f_sigv_LRG', np.float64(0.9212755939759709)) ('log_Mcent_LRG', np.float64(12.628435914304248)) ('sigma_M_LRG', np.float64(0.20560592204562766))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.52646197223073)) ('M_1_LRG', np.float64(13.827111800493428)) ('alpha_LRG', np.float64(1.126802195722164)) ('f_sigv_LRG', np.float64(0.9530631865432461)) ('log_Mcent_LRG', np.float64(12.78348078804202)) ('sigma_M_LRG', np.float64(0.3654893702760412))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.618063228799432)) ('M_1_LRG', np.float64(13.7826148636929)) ('alpha_LRG', np.float64(1.0444580475956964)) ('f_sigv_LRG', np.float64(0.9046057931092581)) ('log_Mcent_LRG', np.float64(12.723105743578197)) ('sigma_M_LRG', np.float64(0.30639379157240404))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.603285643301673)) ('M_1_LRG', np.float64(13.664604615781059)) ('alpha_LRG', np.float64(1.0798238360557122)) ('f_sigv_LRG', np.float64(0.9261919327361986)) ('log_Mcent_LRG', np.float64(12.618168303556423)) ('sigma_M_LRG', np.float64(0.17108977597683556))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.51969367118722)) ('M_1_LRG', np.float64(13.8299834383968)) ('alpha_LRG', np.float64(1.0479700050182215)) ('f_sigv_LRG', np.float64(0.9352808264669349)) ('log_Mcent_LRG', np.float64(12.748308512086615)) ('sigma_M_LRG', np.float64(0.32979207267372973))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.48894547455316)) ('M_1_LRG', np.float64(13.715739210341534)) ('alpha_LRG', np.float64(1.1808951000801393)) ('f_sigv_LRG', np.float64(0.9008348113820287)) ('log_Mcent_LRG', np.float64(12.670496541217426)) ('sigma_M_LRG', np.float64(0.24457711794051445))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.613455790380813)) ('M_1_LRG', np.float64(13.771907361379636)) ('alpha_LRG', np.float64(1.0157126085711692)) ('f_sigv_LRG', np.float64(0.9528839553036625)) ('log_Mcent_LRG', np.float64(12.691329443238327)) ('sigma_M_LRG', np.float64(0.24313185769456763))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.593399327500489)) ('M_1_LRG', np.float64(13.75857015060092)) ('alpha_LRG', np.float64(1.0466883600531884)) ('f_sigv_LRG', np.float64(0.9993555644671124)) ('log_Mcent_LRG', np.float64(12.72207074889707)) ('sigma_M_LRG', np.float64(0.27645888947898717))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.38167791325506)) ('M_1_LRG', np.float64(13.83055241915901)) ('alpha_LRG', np.float64(1.0787865925688618)) ('f_sigv_LRG', np.float64(0.9736274914775458)) ('log_Mcent_LRG', np.float64(12.731365811911475)) ('sigma_M_LRG', np.float64(0.29936987986406))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.372312713448869)) ('M_1_LRG', np.float64(13.762326231410906)) ('alpha_LRG', np.float64(1.1521440302201318)) ('f_sigv_LRG', np.float64(0.9663315575243315)) ('log_Mcent_LRG', np.float64(12.67958236849747)) ('sigma_M_LRG', np.float64(0.21656281404612282))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.510776246177075)) ('M_1_LRG', np.float64(13.743458390557109)) ('alpha_LRG', np.float64(1.0820925638654504)) ('f_sigv_LRG', np.float64(0.9636857330153152)) ('log_Mcent_LRG', np.float64(12.681539946655706)) ('sigma_M_LRG', np.float64(0.22946194408765402))
[Interation 13] chi2=391.5256165763726
[Interation 13] chi2=457.2859275878518
[Interation 13] chi2=459.81112738852283
[Interation 13] chi2=436.69023788441626
[Interation 13] chi2=383.8039244443724
[Interation 13] chi2=362.3954669253079
[Interation 13] chi2=472.86437252819024
[Interation 13] chi2=387.2096769284259
[Interation 13] chi2=416.38365030379543
[Interation 13] chi2=456.19466518685374
[Interation 13] chi2=379.7293317225961
[Interation 13] chi2=410.9988913216365
[Interation 14] ('M_0_LRG', np.float64(12.44965053694428)) ('M_1_LRG', np.float64(13.700767955847132)) ('alpha_LRG', np.float64(1.1640187116019665)) ('f_sigv_LRG', np.float64(0.9368635094237994)) ('log_Mcent_LRG', np.float64(12.630135930603078)) ('sigma_M_LRG', np.float64(0.16199986732150845))
[Interation 14] ('M_0_LRG', np.float64(12.529243636241711)) ('M_1_LRG', np.float64(13.685194299863976)) ('alpha_LRG', np.float64(1.1375155498449496)) ('f_sigv_LRG', np.float64(0.9546482328599308)) ('log_Mcent_LRG', np.float64(12.617625146493609)) ('sigma_M_LRG', np.float64(0.12022296769080515))
[Interation 14] ('M_0_LRG', np.float64(12.533861962988707)) ('M_1_LRG', np.float64(13.762846008925443)) ('alpha_LRG', np.float64(1.090232821646942)) ('f_sigv_LRG', np.float64(0.9410291752808045)) ('log_Mcent_LRG', np.float64(12.707206217370896)) ('sigma_M_LRG', np.float64(0.2754439672959863))
[Interation 14] ('M_0_LRG', np.float64(12.416134023211924)) ('M_1_LRG', np.float64(13.755182552620147)) ('alpha_LRG', np.float64(1.1405021118283845)) ('f_sigv_LRG', np.float64(0.9409270068012543)) ('log_Mcent_LRG', np.float64(12.674889251689224)) ('sigma_M_LRG', np.float64(0.2311668944749713))
[Interation 14] chi2=365.1792230676264
[Interation 14] chi2=344.27732637216474
[Interation 14] chi2=357.24646011318504
[Interation 14] chi2=434.7265168316685
[Interation 14] ('M_0_LRG', np.float64(12.553843266477454)) ('M_1_LRG', np.float64(13.71647755309959)) ('alpha_LRG', np.float64(1.0871679268469903)) ('f_sigv_LRG', np.float64(0.9575931553396453)) ('log_Mcent_LRG', np.float64(12.65459962788748)) ('sigma_M_LRG', np.float64(0.1892795074682843))
[Interation 14] ('M_0_LRG', np.float64(12.559762780624673)) ('M_1_LRG', np.float64(13.72811996616535)) ('alpha_LRG', np.float64(1.0706659243252359)) ('f_sigv_LRG', np.float64(0.9374353510854149)) ('log_Mcent_LRG', np.float64(12.671849459167243)) ('sigma_M_LRG', np.float64(0.22331233209084816))
[Interation 14] ('M_0_LRG', np.float64(12.496871024055277)) ('M_1_LRG', np.float64(13.711443110708997)) ('alpha_LRG', np.float64(1.1254971019184188)) ('f_sigv_LRG', np.float64(0.9569403721211089)) ('log_Mcent_LRG', np.float64(12.64471635380196)) ('sigma_M_LRG', np.float64(0.16448829462160958))
[Interation 14] ('M_0_LRG', np.float64(12.533546503040343)) ('M_1_LRG', np.float64(13.73391348951934)) ('alpha_LRG', np.float64(1.0841948742849699)) ('f_sigv_LRG', np.float64(0.9549520505432464)) ('log_Mcent_LRG', np.float64(12.666979083084046)) ('sigma_M_LRG', np.float64(0.21058360075219218))
[Interation 14] ('M_0_LRG', np.float64(12.47463398904331)) ('M_1_LRG', np.float64(13.74708368983471)) ('alpha_LRG', np.float64(1.1203494050048672)) ('f_sigv_LRG', np.float64(0.9520176949896895)) ('log_Mcent_LRG', np.float64(12.674619882935966)) ('sigma_M_LRG', np.float64(0.22010507566468968))
[Interation 14] ('M_0_LRG', np.float64(12.521723824081826)) ('M_1_LRG', np.float64(13.712913893736996)) ('alpha_LRG', np.float64(1.108549165051306)) ('f_sigv_LRG', np.float64(0.9475474653750728)) ('log_Mcent_LRG', np.float64(12.642536678106714)) ('sigma_M_LRG', np.float64(0.16935467077508898))
[Interation 14] ('M_0_LRG', np.float64(12.54845838949634)) ('M_1_LRG', np.float64(13.709914581899767)) ('alpha_LRG', np.float64(1.0944945991760235)) ('f_sigv_LRG', np.float64(0.9562477625441743)) ('log_Mcent_LRG', np.float64(12.646622129720972)) ('sigma_M_LRG', np.float64(0.18042979158762357))
[Interation 14] ('M_0_LRG', np.float64(12.59013929947341)) ('M_1_LRG', np.float64(13.710559102727842)) ('alpha_LRG', np.float64(1.0656225761867455)) ('f_sigv_LRG', np.float64(0.9562656958875002)) ('log_Mcent_LRG', np.float64(12.6504791316188)) ('sigma_M_LRG', np.float64(0.1890965934270215))
[Interation 14] ('M_0_LRG', np.float64(12.506417858342134)) ('M_1_LRG', np.float64(13.721222900928339)) ('alpha_LRG', np.float64(1.1246996033136136)) ('f_sigv_LRG', np.float64(0.9393059399282517)) ('log_Mcent_LRG', np.float64(12.654903119868148)) ('sigma_M_LRG', np.float64(0.18904684686960738))
[Interation 14] ('M_0_LRG', np.float64(12.439354776600023)) ('M_1_LRG', np.float64(13.737401962524366)) ('alpha_LRG', np.float64(1.1367567397043663)) ('f_sigv_LRG', np.float64(0.9532885473982132)) ('log_Mcent_LRG', np.float64(12.645103816189367)) ('sigma_M_LRG', np.float64(0.1553561166944611))
[Interation 14] ('M_0_LRG', np.float64(12.515527724519742)) ('M_1_LRG', np.float64(13.736836739283387)) ('alpha_LRG', np.float64(1.08339694836029)) ('f_sigv_LRG', np.float64(0.9416746294436311)) ('log_Mcent_LRG', np.float64(12.669022410729365)) ('sigma_M_LRG', np.float64(0.21899643570169935))
[Interation 14] ('M_0_LRG', np.float64(12.57191489082497)) ('M_1_LRG', np.float64(13.716443781386536)) ('alpha_LRG', np.float64(1.0779055399308597)) ('f_sigv_LRG', np.float64(0.9468121923299191)) ('log_Mcent_LRG', np.float64(12.657439928030492)) ('sigma_M_LRG', np.float64(0.19992984381795004))
[Interation 14] chi2=352.7206609125152
[Interation 14] chi2=276.3549685458013
[Interation 14] chi2=332.6587552880019
[Interation 14] chi2=308.7943066870319
[Interation 14] chi2=422.6803391112945
[Interation 14] chi2=342.83442838140934
[Interation 14] chi2=347.0834766479368
[Interation 14] chi2=327.0076422584015
[Interation 14] chi2=385.36066067905796
[Interation 14] chi2=361.9292019782831
[Interation 14] chi2=329.3467408963812
[Interation 14] chi2=345.53610118125516
[Interation 15] ('M_0_LRG', np.float64(12.497253210522281)) ('M_1_LRG', np.float64(13.707519643420419)) ('alpha_LRG', np.float64(1.13227053819562)) ('f_sigv_LRG', np.float64(0.9245320397299045)) ('log_Mcent_LRG', np.float64(12.652485288160944)) ('sigma_M_LRG', np.float64(0.1965303975653988))
[Interation 15] ('M_0_LRG', np.float64(12.561323396000581)) ('M_1_LRG', np.float64(13.706586145423518)) ('alpha_LRG', np.float64(1.0827133562052955)) ('f_sigv_LRG', np.float64(0.9417575359824482)) ('log_Mcent_LRG', np.float64(12.645218208319513)) ('sigma_M_LRG', np.float64(0.18295605063112513))
[Interation 15] ('M_0_LRG', np.float64(12.571779914958778)) ('M_1_LRG', np.float64(13.714915501467448)) ('alpha_LRG', np.float64(1.0719915161405176)) ('f_sigv_LRG', np.float64(0.9546695419714195)) ('log_Mcent_LRG', np.float64(12.655798477127153)) ('sigma_M_LRG', np.float64(0.19951536481593163))
[Interation 15] ('M_0_LRG', np.float64(12.466727735830982)) ('M_1_LRG', np.float64(13.733730072904521)) ('alpha_LRG', np.float64(1.125199676359622)) ('f_sigv_LRG', np.float64(0.9481691393545058)) ('log_Mcent_LRG', np.float64(12.660120444396647)) ('sigma_M_LRG', np.float64(0.19514858114378086))
[Interation 15] chi2=357.6290339777376
[Interation 15] chi2=317.2850553508905
[Interation 15] chi2=377.7874584984259
[Interation 15] chi2=335.01286793561405
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_09.npy
Set number of threads to 32
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.5509841403458)) ('M_1_LRG', np.float64(13.712900777273964)) ('alpha_LRG', np.float64(1.0789964663312879)) ('f_sigv_LRG', np.float64(0.9475418261618604)) ('log_Mcent_LRG', np.float64(12.651750999836889)) ('sigma_M_LRG', np.float64(0.19022194538005055))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3124682903289795
Start satellite assignement
Satellite assignement done 0.07260966300964355
LRG mock catalogue done 0.14479899406433105
611987 central galaxies, 86662 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6438140869140625
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_09.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:20
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:21
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:21
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:18
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:18
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.505214605782669)) ('M_1_LRG', np.float64(13.535573228669382)) ('alpha_LRG', np.float64(0.999959655084575)) ('f_sigv_LRG', np.float64(1.0346056950845908)) ('log_Mcent_LRG', np.float64(12.69482896430825)) ('sigma_M_LRG', np.float64(0.4143923015325184))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.582193931175842)) ('M_1_LRG', np.float64(13.650973460449183)) ('alpha_LRG', np.float64(1.0526056072045424)) ('f_sigv_LRG', np.float64(1.0088140619483155)) ('log_Mcent_LRG', np.float64(12.709599665138425)) ('sigma_M_LRG', np.float64(0.4443689373160843))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.490916594421194)) ('M_1_LRG', np.float64(13.6806935097913)) ('alpha_LRG', np.float64(1.0194905174923419)) ('f_sigv_LRG', np.float64(0.8880595129807813)) ('log_Mcent_LRG', np.float64(12.8119579736049)) ('sigma_M_LRG', np.float64(0.45484772673172863))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.555775577945653)) ('M_1_LRG', np.float64(13.53535255716665)) ('alpha_LRG', np.float64(1.033134129589565)) ('f_sigv_LRG', np.float64(0.9120232011008579)) ('log_Mcent_LRG', np.float64(12.74078320443441)) ('sigma_M_LRG', np.float64(0.5357282807709268))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.612700020699476)) ('M_1_LRG', np.float64(13.639152641003129)) ('alpha_LRG', np.float64(0.957094826104552)) ('f_sigv_LRG', np.float64(1.0841313181705428)) ('log_Mcent_LRG', np.float64(12.880530093235931)) ('sigma_M_LRG', np.float64(0.48161323134486944))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.352808585438783)) ('M_1_LRG', np.float64(13.321391047815304)) ('alpha_LRG', np.float64(1.0547802840487057)) ('f_sigv_LRG', np.float64(1.053398623058424)) ('log_Mcent_LRG', np.float64(12.774047143775993)) ('sigma_M_LRG', np.float64(0.56038513808497))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.525263617444917)) ('M_1_LRG', np.float64(13.349565865162171)) ('alpha_LRG', np.float64(0.9609379099568435)) ('f_sigv_LRG', np.float64(1.1464171771772727)) ('log_Mcent_LRG', np.float64(12.764325320432393)) ('sigma_M_LRG', np.float64(0.5167328787785659))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.53799523776267)) ('M_1_LRG', np.float64(13.895687685684702)) ('alpha_LRG', np.float64(1.0275712658654785)) ('f_sigv_LRG', np.float64(1.027987654805479)) ('log_Mcent_LRG', np.float64(12.821708175462481)) ('sigma_M_LRG', np.float64(0.45127396798714153))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.453197598121758)) ('M_1_LRG', np.float64(13.548558135734698)) ('alpha_LRG', np.float64(0.9540606464018117)) ('f_sigv_LRG', np.float64(0.9805819376492727)) ('log_Mcent_LRG', np.float64(12.817083276725981)) ('sigma_M_LRG', np.float64(0.4474320880527685))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.516988058179388)) ('M_1_LRG', np.float64(13.667139368473347)) ('alpha_LRG', np.float64(1.0242847435869888)) ('f_sigv_LRG', np.float64(0.9500663653413264)) ('log_Mcent_LRG', np.float64(12.801341081992451)) ('sigma_M_LRG', np.float64(0.45265886896465646))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.477100291600514)) ('M_1_LRG', np.float64(13.44036717913945)) ('alpha_LRG', np.float64(0.8659010477301174)) ('f_sigv_LRG', np.float64(1.0608980294260038)) ('log_Mcent_LRG', np.float64(12.777267919628311)) ('sigma_M_LRG', np.float64(0.5863435403634165))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.409152834518158)) ('M_1_LRG', np.float64(13.45956549922816)) ('alpha_LRG', np.float64(1.0614701218088007)) ('f_sigv_LRG', np.float64(1.0199366463439041)) ('log_Mcent_LRG', np.float64(12.730739392473351)) ('sigma_M_LRG', np.float64(0.4537119245124352))
[Interation 15] chi2=2136.857269390631
[Interation 15] chi2=1952.5192778560377
[Interation 15] chi2=1726.538445279356
[Interation 15] chi2=4221.49097068155
[Interation 15] chi2=1017.8208217364978
[Interation 15] chi2=2423.968762795778
[Interation 15] chi2=7510.136699586383
[Interation 15] chi2=8406.068247053961
[Interation 15] chi2=6485.150075991628
[Interation 15] chi2=1363.4475695533959
[Interation 15] chi2=4937.517857811095
[Interation 15] chi2=4315.507468048329
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 16] ('M_0_LRG', np.float64(12.776639967771432)) ('M_1_LRG', np.float64(13.742956725614746)) ('alpha_LRG', np.float64(0.8622020118911449)) ('f_sigv_LRG', np.float64(0.9382104963281187)) ('log_Mcent_LRG', np.float64(12.688586445164374)) ('sigma_M_LRG', np.float64(0.25422327271243944))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 16] ('M_0_LRG', np.float64(12.338957436084797)) ('M_1_LRG', np.float64(13.77668827109894)) ('alpha_LRG', np.float64(1.2005098393204356)) ('f_sigv_LRG', np.float64(0.9842030642657956)) ('log_Mcent_LRG', np.float64(12.684442552356806)) ('sigma_M_LRG', np.float64(0.22729128740163346))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 16] ('M_0_LRG', np.float64(12.528417095968093)) ('M_1_LRG', np.float64(13.715393575402778)) ('alpha_LRG', np.float64(1.0938229566674516)) ('f_sigv_LRG', np.float64(0.97980179629936)) ('log_Mcent_LRG', np.float64(12.64309090009032)) ('sigma_M_LRG', np.float64(0.15930524722492434))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 16] ('M_0_LRG', np.float64(12.571380599620705)) ('M_1_LRG', np.float64(13.72936667735706)) ('alpha_LRG', np.float64(1.0293311535358944)) ('f_sigv_LRG', np.float64(0.955401770293885)) ('log_Mcent_LRG', np.float64(12.68715732753755)) ('sigma_M_LRG', np.float64(0.2585670441581788))
[Interation 16] chi2=415.5497043483989
[Interation 16] chi2=434.1833512858619
[Interation 16] chi2=380.09326781657853
[Interation 16] chi2=442.45639721806975
[Interation 16] ('M_0_LRG', np.float64(12.53738525847663)) ('M_1_LRG', np.float64(13.73117723247185)) ('alpha_LRG', np.float64(1.0869748661866847)) ('f_sigv_LRG', np.float64(0.9236069030757266)) ('log_Mcent_LRG', np.float64(12.663705699533127)) ('sigma_M_LRG', np.float64(0.2105642702905563))
[Interation 16] ('M_0_LRG', np.float64(12.516314096056542)) ('M_1_LRG', np.float64(13.719086532048088)) ('alpha_LRG', np.float64(1.1093111446269914)) ('f_sigv_LRG', np.float64(0.9379290370999447)) ('log_Mcent_LRG', np.float64(12.647739518435346)) ('sigma_M_LRG', np.float64(0.1844135549443568))
[Interation 16] ('M_0_LRG', np.float64(12.523485805719393)) ('M_1_LRG', np.float64(13.698460723503747)) ('alpha_LRG', np.float64(1.1345697146024272)) ('f_sigv_LRG', np.float64(0.9227659085319867)) ('log_Mcent_LRG', np.float64(12.647261790638852)) ('sigma_M_LRG', np.float64(0.1929427318664082))
[Interation 16] ('M_0_LRG', np.float64(12.53707486921878)) ('M_1_LRG', np.float64(13.70826098638629)) ('alpha_LRG', np.float64(1.091834933755227)) ('f_sigv_LRG', np.float64(0.9365007843510249)) ('log_Mcent_LRG', np.float64(12.641222146387333)) ('sigma_M_LRG', np.float64(0.1737902997968509))
[Interation 16] ('M_0_LRG', np.float64(12.522241964019287)) ('M_1_LRG', np.float64(13.724489883723717)) ('alpha_LRG', np.float64(1.0939158376436044)) ('f_sigv_LRG', np.float64(0.9230916524341389)) ('log_Mcent_LRG', np.float64(12.666660477589309)) ('sigma_M_LRG', np.float64(0.22110910657852573))
[Interation 16] ('M_0_LRG', np.float64(12.494157556331585)) ('M_1_LRG', np.float64(13.729862161352111)) ('alpha_LRG', np.float64(1.12335984292544)) ('f_sigv_LRG', np.float64(0.9370187183138959)) ('log_Mcent_LRG', np.float64(12.66819762507703)) ('sigma_M_LRG', np.float64(0.21478730666233736))
[Interation 16] ('M_0_LRG', np.float64(12.49823694278977)) ('M_1_LRG', np.float64(13.74725222986924)) ('alpha_LRG', np.float64(1.1140572456443998)) ('f_sigv_LRG', np.float64(0.9320422749832311)) ('log_Mcent_LRG', np.float64(12.683589537876811)) ('sigma_M_LRG', np.float64(0.2380781201724403))
[Interation 16] ('M_0_LRG', np.float64(12.467576022160216)) ('M_1_LRG', np.float64(13.718432641851956)) ('alpha_LRG', np.float64(1.1285956118660567)) ('f_sigv_LRG', np.float64(0.9337862271065119)) ('log_Mcent_LRG', np.float64(12.647286739029557)) ('sigma_M_LRG', np.float64(0.18249156257981258))
[Interation 16] ('M_0_LRG', np.float64(12.436638710045086)) ('M_1_LRG', np.float64(13.72760946989615)) ('alpha_LRG', np.float64(1.1607859093948028)) ('f_sigv_LRG', np.float64(0.9276831637495992)) ('log_Mcent_LRG', np.float64(12.64713809827181)) ('sigma_M_LRG', np.float64(0.1817086488711388))
[Interation 16] ('M_0_LRG', np.float64(12.531753636303986)) ('M_1_LRG', np.float64(13.715002474131953)) ('alpha_LRG', np.float64(1.1061560733651117)) ('f_sigv_LRG', np.float64(0.9581817100421818)) ('log_Mcent_LRG', np.float64(12.655846278827351)) ('sigma_M_LRG', np.float64(0.18964251002294097))
[Interation 16] ('M_0_LRG', np.float64(12.614917357534509)) ('M_1_LRG', np.float64(13.698056754748814)) ('alpha_LRG', np.float64(1.0549794043895873)) ('f_sigv_LRG', np.float64(0.9252632671778621)) ('log_Mcent_LRG', np.float64(12.64602171747382)) ('sigma_M_LRG', np.float64(0.19105118954136896))
[Interation 16] ('M_0_LRG', np.float64(12.509203797373047)) ('M_1_LRG', np.float64(13.723569379012401)) ('alpha_LRG', np.float64(1.1168373467915047)) ('f_sigv_LRG', np.float64(0.9358168856289767)) ('log_Mcent_LRG', np.float64(12.66267810233689)) ('sigma_M_LRG', np.float64(0.2133729683050985))
[Interation 16] chi2=396.43318087564364
[Interation 16] chi2=436.33806110179097
[Interation 16] chi2=386.6531251114746
[Interation 16] chi2=350.85743264472353
[Interation 16] chi2=380.0552755270985
[Interation 16] chi2=395.28291330171396
[Interation 16] chi2=427.2440581744779
[Interation 16] chi2=336.8596205772999
[Interation 16] chi2=308.74128632885163
[Interation 16] chi2=300.91633654388
[Interation 16] chi2=348.9451868218866
[Interation 16] chi2=370.10125022820245
[Interation 17] ('M_0_LRG', np.float64(12.4638273492482)) ('M_1_LRG', np.float64(13.73347271976392)) ('alpha_LRG', np.float64(1.1248293211222862)) ('f_sigv_LRG', np.float64(0.9305459983172245)) ('log_Mcent_LRG', np.float64(12.652689525811956)) ('sigma_M_LRG', np.float64(0.18464571677254155))
[Interation 17] ('M_0_LRG', np.float64(12.485240366359143)) ('M_1_LRG', np.float64(13.724579265208538)) ('alpha_LRG', np.float64(1.1235180834850012)) ('f_sigv_LRG', np.float64(0.9460759149615465)) ('log_Mcent_LRG', np.float64(12.654331025410409)) ('sigma_M_LRG', np.float64(0.1895881431040795))
[Interation 17] ('M_0_LRG', np.float64(12.49744606018033)) ('M_1_LRG', np.float64(13.730659975980076)) ('alpha_LRG', np.float64(1.1146757850894133)) ('f_sigv_LRG', np.float64(0.9250710914401546)) ('log_Mcent_LRG', np.float64(12.663292485853894)) ('sigma_M_LRG', np.float64(0.21361074013330977))
[Interation 17] ('M_0_LRG', np.float64(12.521605391768592)) ('M_1_LRG', np.float64(13.706592926291352)) ('alpha_LRG', np.float64(1.104935257909748)) ('f_sigv_LRG', np.float64(0.9316038982406343)) ('log_Mcent_LRG', np.float64(12.640750903192638)) ('sigma_M_LRG', np.float64(0.17396701988293506))
[Interation 17] chi2=337.9141774358008
[Interation 17] chi2=370.54487919396087
[Interation 17] chi2=362.33797091720004
[Interation 17] chi2=359.86601587875634
[Interation 17] ('M_0_LRG', np.float64(12.489001601476023)) ('M_1_LRG', np.float64(13.72578091985756)) ('alpha_LRG', np.float64(1.125746130811657)) ('f_sigv_LRG', np.float64(0.9265999620711647)) ('log_Mcent_LRG', np.float64(12.660513554707414)) ('sigma_M_LRG', np.float64(0.20433284728003526))
[Interation 17] ('M_0_LRG', np.float64(12.493656825860391)) ('M_1_LRG', np.float64(13.723701177640795)) ('alpha_LRG', np.float64(1.1234298384249435)) ('f_sigv_LRG', np.float64(0.929639467588343)) ('log_Mcent_LRG', np.float64(12.656564796595974)) ('sigma_M_LRG', np.float64(0.19691039389374781))
[Interation 17] ('M_0_LRG', np.float64(12.497248495568808)) ('M_1_LRG', np.float64(13.726908683112894)) ('alpha_LRG', np.float64(1.12069043376654)) ('f_sigv_LRG', np.float64(0.93807986406965)) ('log_Mcent_LRG', np.float64(12.659065439129549)) ('sigma_M_LRG', np.float64(0.19532015276646397))
[Interation 17] ('M_0_LRG', np.float64(12.499400257505048)) ('M_1_LRG', np.float64(13.722800675053541)) ('alpha_LRG', np.float64(1.1224095313993194)) ('f_sigv_LRG', np.float64(0.9202606902872291)) ('log_Mcent_LRG', np.float64(12.653493237663973)) ('sigma_M_LRG', np.float64(0.1905008846338998))
[Interation 17] ('M_0_LRG', np.float64(12.514212824183874)) ('M_1_LRG', np.float64(13.723535006510579)) ('alpha_LRG', np.float64(1.111631420566783)) ('f_sigv_LRG', np.float64(0.9329994217422983)) ('log_Mcent_LRG', np.float64(12.662817907264714)) ('sigma_M_LRG', np.float64(0.20621764678679194))
[Interation 17] ('M_0_LRG', np.float64(12.510368569935965)) ('M_1_LRG', np.float64(13.718410714895441)) ('alpha_LRG', np.float64(1.113245768778243)) ('f_sigv_LRG', np.float64(0.9323262306490391)) ('log_Mcent_LRG', np.float64(12.654091599122975)) ('sigma_M_LRG', np.float64(0.1972041196574703))
[Interation 17] ('M_0_LRG', np.float64(12.518862690384163)) ('M_1_LRG', np.float64(13.731885448589301)) ('alpha_LRG', np.float64(1.0979894218952444)) ('f_sigv_LRG', np.float64(0.9361878373919938)) ('log_Mcent_LRG', np.float64(12.665879781639248)) ('sigma_M_LRG', np.float64(0.2138922978983352))
[Interation 17] ('M_0_LRG', np.float64(12.500339651149636)) ('M_1_LRG', np.float64(13.726637831266641)) ('alpha_LRG', np.float64(1.115631094998967)) ('f_sigv_LRG', np.float64(0.9339804909709833)) ('log_Mcent_LRG', np.float64(12.65075630603256)) ('sigma_M_LRG', np.float64(0.17937076562289306))
[Interation 17] ('M_0_LRG', np.float64(12.492993713997464)) ('M_1_LRG', np.float64(13.741284761138187)) ('alpha_LRG', np.float64(1.1132895974810317)) ('f_sigv_LRG', np.float64(0.9376438673373083)) ('log_Mcent_LRG', np.float64(12.675400727250574)) ('sigma_M_LRG', np.float64(0.22841597031223965))
[Interation 17] ('M_0_LRG', np.float64(12.496484002623584)) ('M_1_LRG', np.float64(13.729048099896891)) ('alpha_LRG', np.float64(1.1195187944290539)) ('f_sigv_LRG', np.float64(0.9363905066913492)) ('log_Mcent_LRG', np.float64(12.660792132497408)) ('sigma_M_LRG', np.float64(0.19856989126738994))
[Interation 17] ('M_0_LRG', np.float64(12.511769700107585)) ('M_1_LRG', np.float64(13.719206710959252)) ('alpha_LRG', np.float64(1.1072082749149201)) ('f_sigv_LRG', np.float64(0.937367124453055)) ('log_Mcent_LRG', np.float64(12.649724862943438)) ('sigma_M_LRG', np.float64(0.1829008740079074))
[Interation 17] ('M_0_LRG', np.float64(12.498826674531237)) ('M_1_LRG', np.float64(13.727780551470289)) ('alpha_LRG', np.float64(1.1187419864720627)) ('f_sigv_LRG', np.float64(0.9350076378982438)) ('log_Mcent_LRG', np.float64(12.659185281804588)) ('sigma_M_LRG', np.float64(0.19580397263037946))
[Interation 17] chi2=351.4209786817111
[Interation 17] chi2=360.2055380233777
[Interation 17] chi2=348.2549613652382
[Interation 17] chi2=361.5418572945556
[Interation 17] chi2=375.0222295726774
[Interation 17] chi2=357.5611268678507
[Interation 17] chi2=319.12771953389506
[Interation 17] chi2=350.55822854456915
[Interation 17] chi2=326.19944953002926
[Interation 17] chi2=335.8233668119658
[Interation 17] chi2=369.23799071445524
[Interation 17] chi2=353.20190830614007
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_10.npy
Set number of threads to 32
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.506184400884543)) ('M_1_LRG', np.float64(13.72728604740911)) ('alpha_LRG', np.float64(1.1157062092285281)) ('f_sigv_LRG', np.float64(0.9397257858767132)) ('log_Mcent_LRG', np.float64(12.662807746862205)) ('sigma_M_LRG', np.float64(0.20122634247504967))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.29378676414489746
Start satellite assignement
Satellite assignement done 0.0750284194946289
LRG mock catalogue done 0.1515812873840332
611850 central galaxies, 87074 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6234674453735352
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_10.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:27
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:28
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:28
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:28
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:29
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:31
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:31
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:31
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:31
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.539700175780427)) ('M_1_LRG', np.float64(13.721205170167737)) ('alpha_LRG', np.float64(0.9856586411630265)) ('f_sigv_LRG', np.float64(0.974422447295715)) ('log_Mcent_LRG', np.float64(12.7863612764586)) ('sigma_M_LRG', np.float64(0.454859010164253))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.543576759334062)) ('M_1_LRG', np.float64(13.558520433471493)) ('alpha_LRG', np.float64(1.0126695762297175)) ('f_sigv_LRG', np.float64(1.0472643370712746)) ('log_Mcent_LRG', np.float64(12.769772842879542)) ('sigma_M_LRG', np.float64(0.4300413551639502))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.540086125138664)) ('M_1_LRG', np.float64(13.505475524529848)) ('alpha_LRG', np.float64(1.026053378877781)) ('f_sigv_LRG', np.float64(0.8403447202326384)) ('log_Mcent_LRG', np.float64(12.641573275578912)) ('sigma_M_LRG', np.float64(0.5230551237462945))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.432866791566042)) ('M_1_LRG', np.float64(13.735050826808978)) ('alpha_LRG', np.float64(0.9470303671452017)) ('f_sigv_LRG', np.float64(0.9480233600398404)) ('log_Mcent_LRG', np.float64(12.710412286681544)) ('sigma_M_LRG', np.float64(0.41248585148753425))
[Interation 18] chi2=924.0898861472377
[Interation 18] chi2=2923.617789527985
[Interation 18] chi2=4119.3045715175285
[Interation 18] chi2=1223.7695174825644
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.543571635292997)) ('M_1_LRG', np.float64(13.70492392548225)) ('alpha_LRG', np.float64(1.0795309603957146)) ('f_sigv_LRG', np.float64(0.9202319117477247)) ('log_Mcent_LRG', np.float64(12.642765657867619)) ('sigma_M_LRG', np.float64(0.16657311007494163))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.49028262402843)) ('M_1_LRG', np.float64(13.746098868991615)) ('alpha_LRG', np.float64(1.0743410543236203)) ('f_sigv_LRG', np.float64(0.95729271938616)) ('log_Mcent_LRG', np.float64(12.665682630125195)) ('sigma_M_LRG', np.float64(0.2000011198120042))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.621442632714151)) ('M_1_LRG', np.float64(13.686264827705392)) ('alpha_LRG', np.float64(1.0339095267008194)) ('f_sigv_LRG', np.float64(0.9504269894713748)) ('log_Mcent_LRG', np.float64(12.619075424534245)) ('sigma_M_LRG', np.float64(0.12489693270610547))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.511249579844987)) ('M_1_LRG', np.float64(13.751833637294933)) ('alpha_LRG', np.float64(1.0638782894152121)) ('f_sigv_LRG', np.float64(0.950688734266458)) ('log_Mcent_LRG', np.float64(12.680838477090195)) ('sigma_M_LRG', np.float64(0.23359229891745453))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.506961618612602)) ('M_1_LRG', np.float64(13.67887238381822)) ('alpha_LRG', np.float64(1.1851368105509348)) ('f_sigv_LRG', np.float64(0.916487375380165)) ('log_Mcent_LRG', np.float64(12.654018309376486)) ('sigma_M_LRG', np.float64(0.19338548495459668))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.613593282653158)) ('M_1_LRG', np.float64(13.703740067505253)) ('alpha_LRG', np.float64(1.0628863425928263)) ('f_sigv_LRG', np.float64(0.9395204176855293)) ('log_Mcent_LRG', np.float64(12.65749740977764)) ('sigma_M_LRG', np.float64(0.19361169964256575))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.563573970805841)) ('M_1_LRG', np.float64(13.770233566337671)) ('alpha_LRG', np.float64(1.0312458018197743)) ('f_sigv_LRG', np.float64(0.9171325234510324)) ('log_Mcent_LRG', np.float64(12.700359952257891)) ('sigma_M_LRG', np.float64(0.30742228288265316))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.457086028570952)) ('M_1_LRG', np.float64(13.713525432891899)) ('alpha_LRG', np.float64(1.1490131862711588)) ('f_sigv_LRG', np.float64(0.9462748066851553)) ('log_Mcent_LRG', np.float64(12.650149132308904)) ('sigma_M_LRG', np.float64(0.17882178899630236))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.44773968700697)) ('M_1_LRG', np.float64(13.73832245836852)) ('alpha_LRG', np.float64(1.1310709875101388)) ('f_sigv_LRG', np.float64(0.9584280468268586)) ('log_Mcent_LRG', np.float64(12.669023958291673)) ('sigma_M_LRG', np.float64(0.19762678204539869))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.621549894282827)) ('M_1_LRG', np.float64(13.779839851501665)) ('alpha_LRG', np.float64(0.9826475894593691)) ('f_sigv_LRG', np.float64(0.9627377691442676)) ('log_Mcent_LRG', np.float64(12.699641705408657)) ('sigma_M_LRG', np.float64(0.24823083578149252))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.517828975860601)) ('M_1_LRG', np.float64(13.771991949843423)) ('alpha_LRG', np.float64(1.0565464638961146)) ('f_sigv_LRG', np.float64(0.941778675117377)) ('log_Mcent_LRG', np.float64(12.686252138327022)) ('sigma_M_LRG', np.float64(0.23734029546108593))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.420222342674615)) ('M_1_LRG', np.float64(13.694585767760946)) ('alpha_LRG', np.float64(1.179608383900359)) ('f_sigv_LRG', np.float64(0.900928964709658)) ('log_Mcent_LRG', np.float64(12.624405696648527)) ('sigma_M_LRG', np.float64(0.14406488372968096))
[Interation 18] chi2=355.7652361084837
[Interation 18] chi2=359.62970146426096
[Interation 18] chi2=396.71007432831556
[Interation 18] chi2=396.49111678056005
[Interation 18] chi2=433.023096046337
[Interation 18] chi2=367.0403565648977
[Interation 18] chi2=417.18167497045135
[Interation 18] chi2=404.2841669105675
[Interation 18] chi2=346.82814593554446
[Interation 18] chi2=420.1506237435699
[Interation 18] chi2=427.6784344270859
[Interation 18] chi2=394.1193007493865
[Interation 19] ('M_0_LRG', np.float64(12.56265814784416)) ('M_1_LRG', np.float64(13.727683453765657)) ('alpha_LRG', np.float64(1.0784767501545907)) ('f_sigv_LRG', np.float64(0.916280835747086)) ('log_Mcent_LRG', np.float64(12.692927253213053)) ('sigma_M_LRG', np.float64(0.2814685751507609))
[Interation 19] ('M_0_LRG', np.float64(12.43857199549966)) ('M_1_LRG', np.float64(13.699063130518542)) ('alpha_LRG', np.float64(1.1491884442761882)) ('f_sigv_LRG', np.float64(0.9342939882954994)) ('log_Mcent_LRG', np.float64(12.63841125283098)) ('sigma_M_LRG', np.float64(0.15897035079435995))
[Interation 19] ('M_0_LRG', np.float64(12.433831728548673)) ('M_1_LRG', np.float64(13.712739936907708)) ('alpha_LRG', np.float64(1.147500104912592)) ('f_sigv_LRG', np.float64(0.9363108000562258)) ('log_Mcent_LRG', np.float64(12.632547572015127)) ('sigma_M_LRG', np.float64(0.1473105626375223))
[Interation 19] ('M_0_LRG', np.float64(12.42173962506611)) ('M_1_LRG', np.float64(13.738260668959684)) ('alpha_LRG', np.float64(1.1546962739857438)) ('f_sigv_LRG', np.float64(0.9296069960711567)) ('log_Mcent_LRG', np.float64(12.665699757119665)) ('sigma_M_LRG', np.float64(0.21023160154041542))
[Interation 19] chi2=402.5279566723669
[Interation 19] chi2=402.2663554765543
[Interation 19] chi2=333.43529925909365
[Interation 19] chi2=403.25318469175306
[Interation 19] ('M_0_LRG', np.float64(12.511269961966148)) ('M_1_LRG', np.float64(13.73738311427794)) ('alpha_LRG', np.float64(1.0864203967555097)) ('f_sigv_LRG', np.float64(0.9268617117453456)) ('log_Mcent_LRG', np.float64(12.666119292769123)) ('sigma_M_LRG', np.float64(0.21707860435338977))
[Interation 19] ('M_0_LRG', np.float64(12.535377021976837)) ('M_1_LRG', np.float64(13.710499050399648)) ('alpha_LRG', np.float64(1.0880615088983274)) ('f_sigv_LRG', np.float64(0.9376856082852736)) ('log_Mcent_LRG', np.float64(12.644951506456001)) ('sigma_M_LRG', np.float64(0.17294806213453007))
[Interation 19] ('M_0_LRG', np.float64(12.530941223099857)) ('M_1_LRG', np.float64(13.72154337281714)) ('alpha_LRG', np.float64(1.0873347742253285)) ('f_sigv_LRG', np.float64(0.9383194468059571)) ('log_Mcent_LRG', np.float64(12.651101770984345)) ('sigma_M_LRG', np.float64(0.17286307133091555))
[Interation 19] ('M_0_LRG', np.float64(12.602087280001562)) ('M_1_LRG', np.float64(13.691620808245501)) ('alpha_LRG', np.float64(1.0506494681734622)) ('f_sigv_LRG', np.float64(0.9282682568626862)) ('log_Mcent_LRG', np.float64(12.64275156021521)) ('sigma_M_LRG', np.float64(0.1766519091234528))
[Interation 19] ('M_0_LRG', np.float64(12.53406758151536)) ('M_1_LRG', np.float64(13.68121833144134)) ('alpha_LRG', np.float64(1.093760513390915)) ('f_sigv_LRG', np.float64(0.9301283396236782)) ('log_Mcent_LRG', np.float64(12.6221672971372)) ('sigma_M_LRG', np.float64(0.14064195482768266))
[Interation 19] ('M_0_LRG', np.float64(12.536348485726947)) ('M_1_LRG', np.float64(13.702981798303194)) ('alpha_LRG', np.float64(1.0936221555104555)) ('f_sigv_LRG', np.float64(0.9342300166296362)) ('log_Mcent_LRG', np.float64(12.647814829303918)) ('sigma_M_LRG', np.float64(0.19266783954953554))
[Interation 19] ('M_0_LRG', np.float64(12.52174968831833)) ('M_1_LRG', np.float64(13.70157134483976)) ('alpha_LRG', np.float64(1.0937718826163352)) ('f_sigv_LRG', np.float64(0.9443540293083658)) ('log_Mcent_LRG', np.float64(12.635609510458227)) ('sigma_M_LRG', np.float64(0.15155505213210513))
[Interation 19] ('M_0_LRG', np.float64(12.560108925859439)) ('M_1_LRG', np.float64(13.697675171596025)) ('alpha_LRG', np.float64(1.068955432881142)) ('f_sigv_LRG', np.float64(0.943578661335499)) ('log_Mcent_LRG', np.float64(12.637841590601061)) ('sigma_M_LRG', np.float64(0.1590532843716047))
[Interation 19] ('M_0_LRG', np.float64(12.58788555019846)) ('M_1_LRG', np.float64(13.690912738660744)) ('alpha_LRG', np.float64(1.0629959401786226)) ('f_sigv_LRG', np.float64(0.9309935204858556)) ('log_Mcent_LRG', np.float64(12.6421402868602)) ('sigma_M_LRG', np.float64(0.17847164262692194))
[Interation 19] ('M_0_LRG', np.float64(12.500764352023209)) ('M_1_LRG', np.float64(13.710121599358098)) ('alpha_LRG', np.float64(1.1095788195532437)) ('f_sigv_LRG', np.float64(0.9396420118149607)) ('log_Mcent_LRG', np.float64(12.637184040659925)) ('sigma_M_LRG', np.float64(0.15327932778985276))
[Interation 19] ('M_0_LRG', np.float64(12.588249011761324)) ('M_1_LRG', np.float64(13.706159881651175)) ('alpha_LRG', np.float64(1.0554215370398337)) ('f_sigv_LRG', np.float64(0.9358983960601277)) ('log_Mcent_LRG', np.float64(12.64712024103275)) ('sigma_M_LRG', np.float64(0.174789082442613))
[Interation 19] ('M_0_LRG', np.float64(12.537227145992098)) ('M_1_LRG', np.float64(13.684171818619689)) ('alpha_LRG', np.float64(1.090845484685874)) ('f_sigv_LRG', np.float64(0.937277440830349)) ('log_Mcent_LRG', np.float64(12.621512235834645)) ('sigma_M_LRG', np.float64(0.1331123848210342))
[Interation 19] chi2=355.3519074056182
[Interation 19] chi2=370.66498164577393
[Interation 19] chi2=378.5530729232733
[Interation 19] chi2=387.54622731731985
[Interation 19] chi2=423.25903722438386
[Interation 19] chi2=342.2829613800774
[Interation 19] chi2=306.8410146444753
[Interation 19] chi2=413.72654981535044
[Interation 19] chi2=362.0523910399441
[Interation 19] chi2=347.9328552638499
[Interation 19] chi2=367.1118145467163
[Interation 19] chi2=333.70984562939566
[Interation 20] ('M_0_LRG', np.float64(12.58164720733159)) ('M_1_LRG', np.float64(13.687803052867443)) ('alpha_LRG', np.float64(1.0669367330689186)) ('f_sigv_LRG', np.float64(0.9371715763171271)) ('log_Mcent_LRG', np.float64(12.627421854886617)) ('sigma_M_LRG', np.float64(0.13599948360072583))
[Interation 20] ('M_0_LRG', np.float64(12.583381695185013)) ('M_1_LRG', np.float64(13.697990336813335)) ('alpha_LRG', np.float64(1.0600653095826638)) ('f_sigv_LRG', np.float64(0.9359522072151649)) ('log_Mcent_LRG', np.float64(12.636383416154413)) ('sigma_M_LRG', np.float64(0.15292588315211825))
[Interation 20] ('M_0_LRG', np.float64(12.568195372850418)) ('M_1_LRG', np.float64(13.684914967005236)) ('alpha_LRG', np.float64(1.0730482389564302)) ('f_sigv_LRG', np.float64(0.938830577259084)) ('log_Mcent_LRG', np.float64(12.630839793232289)) ('sigma_M_LRG', np.float64(0.1515001233703266))
[Interation 20] ('M_0_LRG', np.float64(12.594960024587088)) ('M_1_LRG', np.float64(13.689334360200936)) ('alpha_LRG', np.float64(1.0618833745178333)) ('f_sigv_LRG', np.float64(0.9255585884314916)) ('log_Mcent_LRG', np.float64(12.631050939781066)) ('sigma_M_LRG', np.float64(0.1524415875602816))
[Interation 20] chi2=368.394110540519
[Interation 20] chi2=369.40571856874806
[Interation 20] chi2=360.7269354641605
[Interation 20] chi2=360.4331465985289
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_11.npy
Set number of threads to 32
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.5505963588145)) ('M_1_LRG', np.float64(13.706538968939883)) ('alpha_LRG', np.float64(1.0790164174336392)) ('f_sigv_LRG', np.float64(0.9361726474901574)) ('log_Mcent_LRG', np.float64(12.643419183433336)) ('sigma_M_LRG', np.float64(0.16762186695178521))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.32621192932128906
Start satellite assignement
Satellite assignement done 0.07448720932006836
LRG mock catalogue done 0.15121960639953613
611889 central galaxies, 87869 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6694395542144775
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_11.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:19
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:19
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:19
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:19
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:19
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:20
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:19
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:19
Load smu measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.381838511731198)) ('M_1_LRG', np.float64(13.616280787125955)) ('alpha_LRG', np.float64(0.9486523771836511)) ('f_sigv_LRG', np.float64(0.9490517262160013)) ('log_Mcent_LRG', np.float64(12.7654552595486)) ('sigma_M_LRG', np.float64(0.533311083685544))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.343967081917562)) ('M_1_LRG', np.float64(14.104834687025976)) ('alpha_LRG', np.float64(1.1302203196431804)) ('f_sigv_LRG', np.float64(0.979826930138719)) ('log_Mcent_LRG', np.float64(12.805547014826098)) ('sigma_M_LRG', np.float64(0.18217587642713878))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.756467983619212)) ('M_1_LRG', np.float64(14.03049428333562)) ('alpha_LRG', np.float64(0.925725442405134)) ('f_sigv_LRG', np.float64(0.7807693016360494)) ('log_Mcent_LRG', np.float64(12.745736123211579)) ('sigma_M_LRG', np.float64(0.3369558983767366))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.440316842788338)) ('M_1_LRG', np.float64(13.618547344108864)) ('alpha_LRG', np.float64(1.014370222210635)) ('f_sigv_LRG', np.float64(1.0496992423428848)) ('log_Mcent_LRG', np.float64(12.654884048408924)) ('sigma_M_LRG', np.float64(0.3516007214816883))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.624143196487612)) ('M_1_LRG', np.float64(13.448178182497996)) ('alpha_LRG', np.float64(0.8835179453222965)) ('f_sigv_LRG', np.float64(0.971584785161045)) ('log_Mcent_LRG', np.float64(12.660588522305964)) ('sigma_M_LRG', np.float64(0.5268262411961632))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.730612760850935)) ('M_1_LRG', np.float64(13.888627632611286)) ('alpha_LRG', np.float64(0.8791681784482482)) ('f_sigv_LRG', np.float64(1.0540464075439435)) ('log_Mcent_LRG', np.float64(12.930675906511912)) ('sigma_M_LRG', np.float64(0.5102672585515629))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.579555627145186)) ('M_1_LRG', np.float64(13.973080591787497)) ('alpha_LRG', np.float64(0.9202341807516374)) ('f_sigv_LRG', np.float64(0.7412445873526523)) ('log_Mcent_LRG', np.float64(12.711293316574622)) ('sigma_M_LRG', np.float64(0.15698178035343302))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.644409208912416)) ('M_1_LRG', np.float64(13.988921036366271)) ('alpha_LRG', np.float64(1.055351112317845)) ('f_sigv_LRG', np.float64(0.7709017505170161)) ('log_Mcent_LRG', np.float64(12.858103700224046)) ('sigma_M_LRG', np.float64(0.36044685249875263))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.582980128083907)) ('M_1_LRG', np.float64(14.052523554285472)) ('alpha_LRG', np.float64(1.1605769495302705)) ('f_sigv_LRG', np.float64(0.7250297143427316)) ('log_Mcent_LRG', np.float64(12.779347386351297)) ('sigma_M_LRG', np.float64(0.37846134989077895))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.530169850756502)) ('M_1_LRG', np.float64(13.526048310804494)) ('alpha_LRG', np.float64(0.9468731721857523)) ('f_sigv_LRG', np.float64(0.914828081501507)) ('log_Mcent_LRG', np.float64(12.679920311722753)) ('sigma_M_LRG', np.float64(0.5598039193706641))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.605566941954963)) ('M_1_LRG', np.float64(14.213046122008985)) ('alpha_LRG', np.float64(0.866648528508704)) ('f_sigv_LRG', np.float64(0.6999769247682429)) ('log_Mcent_LRG', np.float64(12.752814803120504)) ('sigma_M_LRG', np.float64(0.25250590364525183))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.432755595556436)) ('M_1_LRG', np.float64(14.191691710292377)) ('alpha_LRG', np.float64(0.832657939558146)) ('f_sigv_LRG', np.float64(0.9562921801080757)) ('log_Mcent_LRG', np.float64(12.951839984270379)) ('sigma_M_LRG', np.float64(0.4373930815258217))
[Interation 20] chi2=2969.5876350720996
[Interation 20] chi2=2595.070856076207
[Interation 20] chi2=1882.042401798622
[Interation 20] chi2=788.9832274482518
[Interation 20] chi2=1439.024684865035
[Interation 20] chi2=1646.0545335843897
[Interation 20] chi2=1844.8467718745478
[Interation 20] chi2=4220.967718555555
[Interation 20] chi2=1680.8080042130662
[Interation 20] chi2=2907.977016423802
[Interation 20] chi2=2206.7488679466746
[Interation 20] chi2=4761.719366628124
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 21] ('M_0_LRG', np.float64(12.70288691947569)) ('M_1_LRG', np.float64(13.731971373075751)) ('alpha_LRG', np.float64(0.9177120548077008)) ('f_sigv_LRG', np.float64(0.8942481306130234)) ('log_Mcent_LRG', np.float64(12.72008245513599)) ('sigma_M_LRG', np.float64(0.3216042158505038))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 21] ('M_0_LRG', np.float64(12.558522752118229)) ('M_1_LRG', np.float64(13.740201351107459)) ('alpha_LRG', np.float64(1.0700778559061852)) ('f_sigv_LRG', np.float64(0.9223075665481698)) ('log_Mcent_LRG', np.float64(12.7139442733179)) ('sigma_M_LRG', np.float64(0.31566258941875314))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 21] ('M_0_LRG', np.float64(12.520246438988108)) ('M_1_LRG', np.float64(13.759058247744829)) ('alpha_LRG', np.float64(1.0907622272068442)) ('f_sigv_LRG', np.float64(0.8845437488910922)) ('log_Mcent_LRG', np.float64(12.679014290573239)) ('sigma_M_LRG', np.float64(0.22157002373562623))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 21] ('M_0_LRG', np.float64(12.683359642551341)) ('M_1_LRG', np.float64(13.779118005670467)) ('alpha_LRG', np.float64(0.9789851714984188)) ('f_sigv_LRG', np.float64(0.9627218206403446)) ('log_Mcent_LRG', np.float64(12.71154622448772)) ('sigma_M_LRG', np.float64(0.2673852066795196))
[Interation 21] chi2=488.63537569019473
[Interation 21] chi2=425.1244957435098
[Interation 21] chi2=424.8262780093945
[Interation 21] chi2=415.33041430367837
[Interation 21] ('M_0_LRG', np.float64(12.431809736159053)) ('M_1_LRG', np.float64(13.693648689560519)) ('alpha_LRG', np.float64(1.1677127352142875)) ('f_sigv_LRG', np.float64(0.9247560412122097)) ('log_Mcent_LRG', np.float64(12.620104932510827)) ('sigma_M_LRG', np.float64(0.13160413948821081))
[Interation 21] ('M_0_LRG', np.float64(12.51147662733984)) ('M_1_LRG', np.float64(13.708072066528503)) ('alpha_LRG', np.float64(1.1091290010110797)) ('f_sigv_LRG', np.float64(0.938395327772125)) ('log_Mcent_LRG', np.float64(12.644495935253188)) ('sigma_M_LRG', np.float64(0.17195704876240175))
[Interation 21] ('M_0_LRG', np.float64(12.430916567331009)) ('M_1_LRG', np.float64(13.686473234077114)) ('alpha_LRG', np.float64(1.1549934079195465)) ('f_sigv_LRG', np.float64(0.9291906892258762)) ('log_Mcent_LRG', np.float64(12.607335825468816)) ('sigma_M_LRG', np.float64(0.10650479420434228))
[Interation 21] ('M_0_LRG', np.float64(12.545818042337476)) ('M_1_LRG', np.float64(13.721510390388092)) ('alpha_LRG', np.float64(1.1034367613776541)) ('f_sigv_LRG', np.float64(0.9252351779714733)) ('log_Mcent_LRG', np.float64(12.65607882691977)) ('sigma_M_LRG', np.float64(0.194602789283994))
[Interation 21] ('M_0_LRG', np.float64(12.558854032462929)) ('M_1_LRG', np.float64(13.71101162648042)) ('alpha_LRG', np.float64(1.0646707155463195)) ('f_sigv_LRG', np.float64(0.9618004486879407)) ('log_Mcent_LRG', np.float64(12.636854526884914)) ('sigma_M_LRG', np.float64(0.14727571929324051))
[Interation 21] ('M_0_LRG', np.float64(12.626016290755905)) ('M_1_LRG', np.float64(13.727423890275736)) ('alpha_LRG', np.float64(1.023536136455853)) ('f_sigv_LRG', np.float64(0.9308272348333304)) ('log_Mcent_LRG', np.float64(12.675795229817636)) ('sigma_M_LRG', np.float64(0.2376881317779801))
[Interation 21] ('M_0_LRG', np.float64(12.446088006687978)) ('M_1_LRG', np.float64(13.755410996445654)) ('alpha_LRG', np.float64(1.1247243119380357)) ('f_sigv_LRG', np.float64(0.9355862672229033)) ('log_Mcent_LRG', np.float64(12.672518982372784)) ('sigma_M_LRG', np.float64(0.21960380907589772))
[Interation 21] ('M_0_LRG', np.float64(12.508080246162397)) ('M_1_LRG', np.float64(13.718754906897711)) ('alpha_LRG', np.float64(1.0990614806226304)) ('f_sigv_LRG', np.float64(0.9538885733065822)) ('log_Mcent_LRG', np.float64(12.642568540164755)) ('sigma_M_LRG', np.float64(0.16628338382169833))
[Interation 21] ('M_0_LRG', np.float64(12.48285989476039)) ('M_1_LRG', np.float64(13.68487146929146)) ('alpha_LRG', np.float64(1.1309345563744286)) ('f_sigv_LRG', np.float64(0.9185676238026516)) ('log_Mcent_LRG', np.float64(12.612798049380167)) ('sigma_M_LRG', np.float64(0.11259684001660186))
[Interation 21] ('M_0_LRG', np.float64(12.560037988722073)) ('M_1_LRG', np.float64(13.712836561875472)) ('alpha_LRG', np.float64(1.0707067115490394)) ('f_sigv_LRG', np.float64(0.9372977633257662)) ('log_Mcent_LRG', np.float64(12.656875825548864)) ('sigma_M_LRG', np.float64(0.21247133817778252))
[Interation 21] ('M_0_LRG', np.float64(12.422525864322932)) ('M_1_LRG', np.float64(13.749359419223135)) ('alpha_LRG', np.float64(1.1118251377702746)) ('f_sigv_LRG', np.float64(0.9559840139165129)) ('log_Mcent_LRG', np.float64(12.648725592859405)) ('sigma_M_LRG', np.float64(0.18026625840201982))
[Interation 21] ('M_0_LRG', np.float64(12.481855783875893)) ('M_1_LRG', np.float64(13.703416204195662)) ('alpha_LRG', np.float64(1.1332149384874297)) ('f_sigv_LRG', np.float64(0.955795343944082)) ('log_Mcent_LRG', np.float64(12.630118326010873)) ('sigma_M_LRG', np.float64(0.13883929039583187))
[Interation 21] chi2=381.3153430639193
[Interation 21] chi2=333.89937821485023
[Interation 21] chi2=340.6584055064015
[Interation 21] chi2=435.36476700807344
[Interation 21] chi2=381.0806189845993
[Interation 21] chi2=378.7729871355291
[Interation 21] chi2=386.56551153618307
[Interation 21] chi2=367.4820553978878
[Interation 21] chi2=369.83838616599047
[Interation 21] chi2=364.83094587278805
[Interation 21] chi2=413.5342026201962
[Interation 21] chi2=366.66065694759084
[Interation 22] ('M_0_LRG', np.float64(12.528942978808127)) ('M_1_LRG', np.float64(13.702076456260924)) ('alpha_LRG', np.float64(1.1035915038122928)) ('f_sigv_LRG', np.float64(0.9402085277920628)) ('log_Mcent_LRG', np.float64(12.636208586145386)) ('sigma_M_LRG', np.float64(0.157763011864268))
[Interation 22] ('M_0_LRG', np.float64(12.476575155906385)) ('M_1_LRG', np.float64(13.702256739766355)) ('alpha_LRG', np.float64(1.1278216911859142)) ('f_sigv_LRG', np.float64(0.9397837249743598)) ('log_Mcent_LRG', np.float64(12.624281774514257)) ('sigma_M_LRG', np.float64(0.13058549766053362))
[Interation 22] ('M_0_LRG', np.float64(12.482524016151547)) ('M_1_LRG', np.float64(13.711406578157394)) ('alpha_LRG', np.float64(1.1266973565773566)) ('f_sigv_LRG', np.float64(0.9325094200452323)) ('log_Mcent_LRG', np.float64(12.632685995257027)) ('sigma_M_LRG', np.float64(0.14584069620716839))
[Interation 22] ('M_0_LRG', np.float64(12.46844980556333)) ('M_1_LRG', np.float64(13.715433562988865)) ('alpha_LRG', np.float64(1.1294183509338633)) ('f_sigv_LRG', np.float64(0.9192668026234787)) ('log_Mcent_LRG', np.float64(12.63168984492789)) ('sigma_M_LRG', np.float64(0.1401868812316281))
[Interation 22] chi2=364.92135362765043
[Interation 22] chi2=353.84918860979815
[Interation 22] chi2=396.43972627594417
[Interation 22] chi2=379.33919045947295
[Interation 22] ('M_0_LRG', np.float64(12.530334550313196)) ('M_1_LRG', np.float64(13.707138255238526)) ('alpha_LRG', np.float64(1.1001931807332554)) ('f_sigv_LRG', np.float64(0.9332449463184795)) ('log_Mcent_LRG', np.float64(12.644502203850031)) ('sigma_M_LRG', np.float64(0.1739905424937298))
[Interation 22] ('M_0_LRG', np.float64(12.516799563047046)) ('M_1_LRG', np.float64(13.712042407669236)) ('alpha_LRG', np.float64(1.0994053193675215)) ('f_sigv_LRG', np.float64(0.9343169211880921)) ('log_Mcent_LRG', np.float64(12.637694362109604)) ('sigma_M_LRG', np.float64(0.16077824370881716))
[Interation 22] ('M_0_LRG', np.float64(12.49128072134079)) ('M_1_LRG', np.float64(13.691084246675048)) ('alpha_LRG', np.float64(1.1193352636505205)) ('f_sigv_LRG', np.float64(0.9494824517053215)) ('log_Mcent_LRG', np.float64(12.617160854798732)) ('sigma_M_LRG', np.float64(0.11013652873860597))
[Interation 22] ('M_0_LRG', np.float64(12.557042795814974)) ('M_1_LRG', np.float64(13.686194918813378)) ('alpha_LRG', np.float64(1.096481586434382)) ('f_sigv_LRG', np.float64(0.918800461506742)) ('log_Mcent_LRG', np.float64(12.632218815260943)) ('sigma_M_LRG', np.float64(0.16034953963260778))
[Interation 22] ('M_0_LRG', np.float64(12.525618825067864)) ('M_1_LRG', np.float64(13.712671332660475)) ('alpha_LRG', np.float64(1.105076560538366)) ('f_sigv_LRG', np.float64(0.9369641133161669)) ('log_Mcent_LRG', np.float64(12.649875756151355)) ('sigma_M_LRG', np.float64(0.18280435113432908))
[Interation 22] ('M_0_LRG', np.float64(12.52417389549628)) ('M_1_LRG', np.float64(13.703826070219302)) ('alpha_LRG', np.float64(1.104965956622839)) ('f_sigv_LRG', np.float64(0.9240466243691631)) ('log_Mcent_LRG', np.float64(12.633761518858874)) ('sigma_M_LRG', np.float64(0.1481226236872616))
[Interation 22] ('M_0_LRG', np.float64(12.491078395251865)) ('M_1_LRG', np.float64(13.702517120375346)) ('alpha_LRG', np.float64(1.1193245440841282)) ('f_sigv_LRG', np.float64(0.9414062849100686)) ('log_Mcent_LRG', np.float64(12.623353166663454)) ('sigma_M_LRG', np.float64(0.12253287596296286))
[Interation 22] ('M_0_LRG', np.float64(12.533154013647271)) ('M_1_LRG', np.float64(13.700593041979142)) ('alpha_LRG', np.float64(1.0968459990863422)) ('f_sigv_LRG', np.float64(0.9375995475543959)) ('log_Mcent_LRG', np.float64(12.629734441682514)) ('sigma_M_LRG', np.float64(0.13640199429419403))
[Interation 22] ('M_0_LRG', np.float64(12.52795245540949)) ('M_1_LRG', np.float64(13.70662948444855)) ('alpha_LRG', np.float64(1.09385794474112)) ('f_sigv_LRG', np.float64(0.9249342588989516)) ('log_Mcent_LRG', np.float64(12.635975774368909)) ('sigma_M_LRG', np.float64(0.1581398495254253))
[Interation 22] ('M_0_LRG', np.float64(12.495521406616414)) ('M_1_LRG', np.float64(13.705496018219923)) ('alpha_LRG', np.float64(1.116830546853258)) ('f_sigv_LRG', np.float64(0.9275886290229916)) ('log_Mcent_LRG', np.float64(12.634015577230658)) ('sigma_M_LRG', np.float64(0.15880789170296827))
[Interation 22] ('M_0_LRG', np.float64(12.502565205545404)) ('M_1_LRG', np.float64(13.711188209601856)) ('alpha_LRG', np.float64(1.1001350200021887)) ('f_sigv_LRG', np.float64(0.9474282902654119)) ('log_Mcent_LRG', np.float64(12.632667081601356)) ('sigma_M_LRG', np.float64(0.14101802739358105))
[Interation 22] ('M_0_LRG', np.float64(12.504498347235618)) ('M_1_LRG', np.float64(13.687714805105637)) ('alpha_LRG', np.float64(1.1265893184561504)) ('f_sigv_LRG', np.float64(0.9378241027998256)) ('log_Mcent_LRG', np.float64(12.621178559873403)) ('sigma_M_LRG', np.float64(0.125976959676179))
[Interation 22] chi2=392.15036984597685
[Interation 22] chi2=333.763634153618
[Interation 22] chi2=363.2817423950764
[Interation 22] chi2=351.38118349213823
[Interation 22] chi2=376.784567265015
[Interation 22] chi2=323.7426256562793
[Interation 22] chi2=334.95839385033463
[Interation 22] chi2=414.0291999546015
[Interation 22] chi2=341.5848533356323
[Interation 22] chi2=381.9346381683562
[Interation 22] chi2=337.0469700612378
[Interation 22] chi2=363.1458381137313
[Interation 23] ('M_0_LRG', np.float64(12.524927846117548)) ('M_1_LRG', np.float64(13.717172180075458)) ('alpha_LRG', np.float64(1.1012196002891879)) ('f_sigv_LRG', np.float64(0.9303541210238402)) ('log_Mcent_LRG', np.float64(12.647125188288017)) ('sigma_M_LRG', np.float64(0.175727966064956))
[Interation 23] ('M_0_LRG', np.float64(12.486257244752851)) ('M_1_LRG', np.float64(13.71786319388976)) ('alpha_LRG', np.float64(1.1067679951524678)) ('f_sigv_LRG', np.float64(0.9471200589104002)) ('log_Mcent_LRG', np.float64(12.637208512024236)) ('sigma_M_LRG', np.float64(0.15092114944489377))
[Interation 23] ('M_0_LRG', np.float64(12.508891761927204)) ('M_1_LRG', np.float64(13.702128197179817)) ('alpha_LRG', np.float64(1.1085756545694023)) ('f_sigv_LRG', np.float64(0.9402324591429161)) ('log_Mcent_LRG', np.float64(12.631504833994809)) ('sigma_M_LRG', np.float64(0.14851994534929552))
[Interation 23] ('M_0_LRG', np.float64(12.492525611006977)) ('M_1_LRG', np.float64(13.697591789953728)) ('alpha_LRG', np.float64(1.132051440470081)) ('f_sigv_LRG', np.float64(0.9285494239805349)) ('log_Mcent_LRG', np.float64(12.631798598158907)) ('sigma_M_LRG', np.float64(0.15481046604547227))
[Interation 23] chi2=377.2357438779136
[Interation 23] chi2=379.5961707311454
[Interation 23] chi2=359.7839363901227
[Interation 23] chi2=390.8945255523604
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_12.npy
Set number of threads to 32
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.501018765225119)) ('M_1_LRG', np.float64(13.698548368392188)) ('alpha_LRG', np.float64(1.1159921355314706)) ('f_sigv_LRG', np.float64(0.9411248017363106)) ('log_Mcent_LRG', np.float64(12.624964224394883)) ('sigma_M_LRG', np.float64(0.1291897540565134))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3397862911224365
Start satellite assignement
Satellite assignement done 0.07424044609069824
LRG mock catalogue done 0.14827728271484375
610793 central galaxies, 88485 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6688494682312012
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_12.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:27
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:27
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Load smu measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.818328359508058)) ('M_1_LRG', np.float64(13.643928769188003)) ('alpha_LRG', np.float64(0.9238384461224652)) ('f_sigv_LRG', np.float64(0.8697070584658406)) ('log_Mcent_LRG', np.float64(12.63494965934061)) ('sigma_M_LRG', np.float64(0.2126909970286649))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.512920413027198)) ('M_1_LRG', np.float64(13.743000239008403)) ('alpha_LRG', np.float64(1.0880139736306869)) ('f_sigv_LRG', np.float64(0.940828833705817)) ('log_Mcent_LRG', np.float64(12.66705412775006)) ('sigma_M_LRG', np.float64(0.2146051258809375))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.566917884128765)) ('M_1_LRG', np.float64(13.724011255415563)) ('alpha_LRG', np.float64(1.0242871556499291)) ('f_sigv_LRG', np.float64(0.954596879917264)) ('log_Mcent_LRG', np.float64(12.699702178436409)) ('sigma_M_LRG', np.float64(0.2950261480049423))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.49440424021554)) ('M_1_LRG', np.float64(13.716264033721744)) ('alpha_LRG', np.float64(1.132150983106753)) ('f_sigv_LRG', np.float64(0.9602516903964003)) ('log_Mcent_LRG', np.float64(12.65068516377024)) ('sigma_M_LRG', np.float64(0.1951032096484081))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.558801882513059)) ('M_1_LRG', np.float64(13.666949604572256)) ('alpha_LRG', np.float64(1.102998521670154)) ('f_sigv_LRG', np.float64(0.9003207205739552)) ('log_Mcent_LRG', np.float64(12.63855517182606)) ('sigma_M_LRG', np.float64(0.19714123323488214))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.483456447790484)) ('M_1_LRG', np.float64(13.729492324405504)) ('alpha_LRG', np.float64(1.1564212956207647)) ('f_sigv_LRG', np.float64(0.9392540218385463)) ('log_Mcent_LRG', np.float64(12.706420290273396)) ('sigma_M_LRG', np.float64(0.28091110279210185))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.428510972544279)) ('M_1_LRG', np.float64(13.764567339744545)) ('alpha_LRG', np.float64(1.1993089864108786)) ('f_sigv_LRG', np.float64(0.8857432334685265)) ('log_Mcent_LRG', np.float64(12.698298004375443)) ('sigma_M_LRG', np.float64(0.2607162260717562))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.5552763804128)) ('M_1_LRG', np.float64(13.741447444109932)) ('alpha_LRG', np.float64(1.0587252399973046)) ('f_sigv_LRG', np.float64(0.9092776226473911)) ('log_Mcent_LRG', np.float64(12.644500689984863)) ('sigma_M_LRG', np.float64(0.19581040313695108))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.557833435937651)) ('M_1_LRG', np.float64(13.659411177145913)) ('alpha_LRG', np.float64(1.1000729728917853)) ('f_sigv_LRG', np.float64(0.9280787921731374)) ('log_Mcent_LRG', np.float64(12.632774160810643)) ('sigma_M_LRG', np.float64(0.1863794773376723))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.511104826152796)) ('M_1_LRG', np.float64(13.76431063237559)) ('alpha_LRG', np.float64(1.0821040205563888)) ('f_sigv_LRG', np.float64(0.9529709057596255)) ('log_Mcent_LRG', np.float64(12.713745542229024)) ('sigma_M_LRG', np.float64(0.2786570659385664))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.539207297245609)) ('M_1_LRG', np.float64(13.727386425362024)) ('alpha_LRG', np.float64(1.0948982891591577)) ('f_sigv_LRG', np.float64(0.9611136222800091)) ('log_Mcent_LRG', np.float64(12.643288875858518)) ('sigma_M_LRG', np.float64(0.179188388459956))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.486278005764403)) ('M_1_LRG', np.float64(13.769215953289047)) ('alpha_LRG', np.float64(1.12369071235091)) ('f_sigv_LRG', np.float64(0.9137106323869745)) ('log_Mcent_LRG', np.float64(12.733167371782416)) ('sigma_M_LRG', np.float64(0.3324156575953366))
[Interation 23] chi2=540.7782408398617
[Interation 23] chi2=346.07832683446566
[Interation 23] chi2=439.4319468618379
[Interation 23] chi2=372.31418973522227
[Interation 23] chi2=383.1196637365388
[Interation 23] chi2=415.6216860844923
[Interation 23] chi2=440.24465510370027
[Interation 23] chi2=436.68186368124793
[Interation 23] chi2=349.30214604534933
[Interation 23] chi2=482.7238585626879
[Interation 23] chi2=422.1929532476131
[Interation 23] chi2=449.5585503474444
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 24] ('M_0_LRG', np.float64(12.626192409616813)) ('M_1_LRG', np.float64(13.721289750459773)) ('alpha_LRG', np.float64(1.0138521964911669)) ('f_sigv_LRG', np.float64(0.9413586816437249)) ('log_Mcent_LRG', np.float64(12.662662478398948)) ('sigma_M_LRG', np.float64(0.2077740672241719))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 24] ('M_0_LRG', np.float64(12.43374720427378)) ('M_1_LRG', np.float64(13.724811311864453)) ('alpha_LRG', np.float64(1.168081132206588)) ('f_sigv_LRG', np.float64(0.9388147559636684)) ('log_Mcent_LRG', np.float64(12.66213083792396)) ('sigma_M_LRG', np.float64(0.21649248153734524))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 24] ('M_0_LRG', np.float64(12.45032587959666)) ('M_1_LRG', np.float64(13.755468559700288)) ('alpha_LRG', np.float64(1.1291824428095576)) ('f_sigv_LRG', np.float64(0.9459133434242429)) ('log_Mcent_LRG', np.float64(12.678162783870372)) ('sigma_M_LRG', np.float64(0.23571821258444525))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 24] ('M_0_LRG', np.float64(12.60177274679709)) ('M_1_LRG', np.float64(13.698444879733923)) ('alpha_LRG', np.float64(1.0330875117321605)) ('f_sigv_LRG', np.float64(0.9657467651850054)) ('log_Mcent_LRG', np.float64(12.623646430524717)) ('sigma_M_LRG', np.float64(0.14447178268163013))
[Interation 24] chi2=406.8103759798647
[Interation 24] chi2=382.21135182989747
[Interation 24] chi2=401.43787089793165
[Interation 24] chi2=390.86726617224815
[Interation 24] ('M_0_LRG', np.float64(12.539543416645706)) ('M_1_LRG', np.float64(13.724521880550984)) ('alpha_LRG', np.float64(1.0947421921116838)) ('f_sigv_LRG', np.float64(0.93649612729306)) ('log_Mcent_LRG', np.float64(12.661964922549469)) ('sigma_M_LRG', np.float64(0.208544303704293))
[Interation 24] ('M_0_LRG', np.float64(12.517130667042133)) ('M_1_LRG', np.float64(13.72458624740534)) ('alpha_LRG', np.float64(1.1064880628865048)) ('f_sigv_LRG', np.float64(0.936218625976969)) ('log_Mcent_LRG', np.float64(12.65973063911113)) ('sigma_M_LRG', np.float64(0.2078891946455535))
[Interation 24] ('M_0_LRG', np.float64(12.545843244392545)) ('M_1_LRG', np.float64(13.726538785988094)) ('alpha_LRG', np.float64(1.08093837157279)) ('f_sigv_LRG', np.float64(0.9541181680186539)) ('log_Mcent_LRG', np.float64(12.65738984998138)) ('sigma_M_LRG', np.float64(0.19076242130067544))
[Interation 24] ('M_0_LRG', np.float64(12.56014515410043)) ('M_1_LRG', np.float64(13.707825488774686)) ('alpha_LRG', np.float64(1.0688558035021234)) ('f_sigv_LRG', np.float64(0.927547656125122)) ('log_Mcent_LRG', np.float64(12.654169472505394)) ('sigma_M_LRG', np.float64(0.20804276671982874))
[Interation 24] ('M_0_LRG', np.float64(12.52834403936818)) ('M_1_LRG', np.float64(13.715330799451035)) ('alpha_LRG', np.float64(1.0859573887729295)) ('f_sigv_LRG', np.float64(0.9358154239103791)) ('log_Mcent_LRG', np.float64(12.646891188469905)) ('sigma_M_LRG', np.float64(0.18613652622706728))
[Interation 24] ('M_0_LRG', np.float64(12.540488353640688)) ('M_1_LRG', np.float64(13.74231725518125)) ('alpha_LRG', np.float64(1.069798839082762)) ('f_sigv_LRG', np.float64(0.9486280693764063)) ('log_Mcent_LRG', np.float64(12.670415682396845)) ('sigma_M_LRG', np.float64(0.2211810455962338))
[Interation 24] ('M_0_LRG', np.float64(12.548699003288897)) ('M_1_LRG', np.float64(13.717022003652199)) ('alpha_LRG', np.float64(1.0752546928878288)) ('f_sigv_LRG', np.float64(0.9469451854545573)) ('log_Mcent_LRG', np.float64(12.657731641260611)) ('sigma_M_LRG', np.float64(0.2055727689014727))
[Interation 24] ('M_0_LRG', np.float64(12.520583740383747)) ('M_1_LRG', np.float64(13.70839111400597)) ('alpha_LRG', np.float64(1.1136712859103648)) ('f_sigv_LRG', np.float64(0.9560783555035496)) ('log_Mcent_LRG', np.float64(12.648952371293607)) ('sigma_M_LRG', np.float64(0.1848206948804479))
[Interation 24] ('M_0_LRG', np.float64(12.547961772255741)) ('M_1_LRG', np.float64(13.69928062127473)) ('alpha_LRG', np.float64(1.0836559537448482)) ('f_sigv_LRG', np.float64(0.9140628047641852)) ('log_Mcent_LRG', np.float64(12.639177677810187)) ('sigma_M_LRG', np.float64(0.18151997732355696))
[Interation 24] ('M_0_LRG', np.float64(12.55695959744121)) ('M_1_LRG', np.float64(13.714099624975399)) ('alpha_LRG', np.float64(1.0792098853883547)) ('f_sigv_LRG', np.float64(0.9480586736380693)) ('log_Mcent_LRG', np.float64(12.661056275589006)) ('sigma_M_LRG', np.float64(0.21306515078359822))
[Interation 24] ('M_0_LRG', np.float64(12.514161262560648)) ('M_1_LRG', np.float64(13.731464189503628)) ('alpha_LRG', np.float64(1.0966700825292888)) ('f_sigv_LRG', np.float64(0.9513168204585671)) ('log_Mcent_LRG', np.float64(12.66368344846419)) ('sigma_M_LRG', np.float64(0.20847763188628843))
[Interation 24] ('M_0_LRG', np.float64(12.56370999120505)) ('M_1_LRG', np.float64(13.706909357434355)) ('alpha_LRG', np.float64(1.0631306977472348)) ('f_sigv_LRG', np.float64(0.9589134348203773)) ('log_Mcent_LRG', np.float64(12.650628328692484)) ('sigma_M_LRG', np.float64(0.18873488930812987))
[Interation 24] chi2=318.97432131618194
[Interation 24] chi2=311.470725917278
[Interation 24] chi2=371.190159833884
[Interation 24] chi2=410.3200258381077
[Interation 24] chi2=341.23238801197994
[Interation 24] chi2=375.71557626150394
[Interation 24] chi2=377.2847580829257
[Interation 24] chi2=443.2684626293799
[Interation 24] chi2=365.0713690694165
[Interation 24] chi2=333.3269554872387
[Interation 24] chi2=372.0377649701679
[Interation 24] chi2=385.6945596012028
[Interation 25] ('M_0_LRG', np.float64(12.531438786256123)) ('M_1_LRG', np.float64(13.733272508676807)) ('alpha_LRG', np.float64(1.0910226650255854)) ('f_sigv_LRG', np.float64(0.9409828178988507)) ('log_Mcent_LRG', np.float64(12.678067684603477)) ('sigma_M_LRG', np.float64(0.23870249623221884))
[Interation 25] ('M_0_LRG', np.float64(12.547566858595173)) ('M_1_LRG', np.float64(13.713906449070459)) ('alpha_LRG', np.float64(1.0830821592562188)) ('f_sigv_LRG', np.float64(0.9325311630896537)) ('log_Mcent_LRG', np.float64(12.645645398422385)) ('sigma_M_LRG', np.float64(0.17759958831872819))
[Interation 25] ('M_0_LRG', np.float64(12.538008539652319)) ('M_1_LRG', np.float64(13.719093145559583)) ('alpha_LRG', np.float64(1.089881455370505)) ('f_sigv_LRG', np.float64(0.937359814464163)) ('log_Mcent_LRG', np.float64(12.661954174287555)) ('sigma_M_LRG', np.float64(0.2116635678928691))
[Interation 25] ('M_0_LRG', np.float64(12.550266598965493)) ('M_1_LRG', np.float64(13.720361934808812)) ('alpha_LRG', np.float64(1.0724027237524698)) ('f_sigv_LRG', np.float64(0.9528738839469354)) ('log_Mcent_LRG', np.float64(12.658345536750407)) ('sigma_M_LRG', np.float64(0.20083286102444664))
[Interation 25] chi2=359.51373558065416
[Interation 25] chi2=315.7189572878544
[Interation 25] chi2=329.19497757986954
[Interation 25] chi2=314.2419309200554
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_13.npy
Set number of threads to 32
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.546759322216472)) ('M_1_LRG', np.float64(13.702885144485055)) ('alpha_LRG', np.float64(1.0722823624966686)) ('f_sigv_LRG', np.float64(0.9357027821386102)) ('log_Mcent_LRG', np.float64(12.639478410801853)) ('sigma_M_LRG', np.float64(0.17104867993700595))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3218200206756592
Start satellite assignement
Satellite assignement done 0.07440757751464844
LRG mock catalogue done 0.14737510681152344
611382 central galaxies, 88069 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6494829654693604
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_13.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:19
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Load correlation matrix for LRG at z0.95 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.716984805169176)) ('M_1_LRG', np.float64(13.757192153959915)) ('alpha_LRG', np.float64(0.8789752428880482)) ('f_sigv_LRG', np.float64(0.7932688962375629)) ('log_Mcent_LRG', np.float64(12.769160674854778)) ('sigma_M_LRG', np.float64(0.5746142283553991))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.625516354030136)) ('M_1_LRG', np.float64(13.357140686312807)) ('alpha_LRG', np.float64(1.1469404621474415)) ('f_sigv_LRG', np.float64(0.9090146404636981)) ('log_Mcent_LRG', np.float64(12.73591243181917)) ('sigma_M_LRG', np.float64(0.5447390763177626))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.146757498160943)) ('M_1_LRG', np.float64(13.494556835369044)) ('alpha_LRG', np.float64(1.2280183408811352)) ('f_sigv_LRG', np.float64(0.9342309094435426)) ('log_Mcent_LRG', np.float64(12.701461562159457)) ('sigma_M_LRG', np.float64(0.5217985127271757))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.458850245173675)) ('M_1_LRG', np.float64(13.965465460946929)) ('alpha_LRG', np.float64(1.049953988312258)) ('f_sigv_LRG', np.float64(1.0171053511280146)) ('log_Mcent_LRG', np.float64(12.729952410650322)) ('sigma_M_LRG', np.float64(0.1526342530913834))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.286682891349857)) ('M_1_LRG', np.float64(13.75208295701588)) ('alpha_LRG', np.float64(1.1469471186387534)) ('f_sigv_LRG', np.float64(1.0980297944770472)) ('log_Mcent_LRG', np.float64(12.67792719272786)) ('sigma_M_LRG', np.float64(0.3270408952487084))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.34999000203595)) ('M_1_LRG', np.float64(13.847723405591198)) ('alpha_LRG', np.float64(1.1309092112693504)) ('f_sigv_LRG', np.float64(0.9121674794176139)) ('log_Mcent_LRG', np.float64(12.802343609588009)) ('sigma_M_LRG', np.float64(0.4784501158406271))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.539288655513086)) ('M_1_LRG', np.float64(13.703868613560465)) ('alpha_LRG', np.float64(0.8156026225654484)) ('f_sigv_LRG', np.float64(0.9542094866761279)) ('log_Mcent_LRG', np.float64(12.651912251892714)) ('sigma_M_LRG', np.float64(0.3076979162962744))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.280599357983244)) ('M_1_LRG', np.float64(14.14161286721896)) ('alpha_LRG', np.float64(1.1783935125206026)) ('f_sigv_LRG', np.float64(0.9942759256173849)) ('log_Mcent_LRG', np.float64(12.854304041942575)) ('sigma_M_LRG', np.float64(0.2665448883003966))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.342769425465143)) ('M_1_LRG', np.float64(14.124631033796785)) ('alpha_LRG', np.float64(0.961164716152186)) ('f_sigv_LRG', np.float64(1.1349504324750919)) ('log_Mcent_LRG', np.float64(12.730731055905325)) ('sigma_M_LRG', np.float64(0.1810532125311634))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.646420573240896)) ('M_1_LRG', np.float64(13.922869026542857)) ('alpha_LRG', np.float64(0.8103081976314795)) ('f_sigv_LRG', np.float64(0.9744611179128435)) ('log_Mcent_LRG', np.float64(12.728203795905221)) ('sigma_M_LRG', np.float64(0.305405343077398))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.679664302342452)) ('M_1_LRG', np.float64(14.139826919067337)) ('alpha_LRG', np.float64(1.2305024346894868)) ('f_sigv_LRG', np.float64(1.0568443189446066)) ('log_Mcent_LRG', np.float64(12.817656449704746)) ('sigma_M_LRG', np.float64(0.18947387509887909))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.457846515849614)) ('M_1_LRG', np.float64(13.903983841045402)) ('alpha_LRG', np.float64(1.049076887758544)) ('f_sigv_LRG', np.float64(0.7995558250873624)) ('log_Mcent_LRG', np.float64(12.831126096782562)) ('sigma_M_LRG', np.float64(0.4589085527919269))
[Interation 25] chi2=1133.506369297631
[Interation 25] chi2=3914.803784717459
[Interation 25] chi2=3350.913718194396
[Interation 25] chi2=5316.003493187613
[Interation 25] chi2=3427.821351559592
[Interation 25] chi2=1276.8459853821282
[Interation 25] chi2=5830.0380197259055
[Interation 25] chi2=1341.3899430683657
[Interation 25] chi2=1418.9471733119565
[Interation 25] chi2=1136.3328436105467
[Interation 25] chi2=499.336335608412
[Interation 25] chi2=728.0884082059324
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 26] ('M_0_LRG', np.float64(12.264538256429715)) ('M_1_LRG', np.float64(13.818997610983665)) ('alpha_LRG', np.float64(1.1806285263220202)) ('f_sigv_LRG', np.float64(0.9112429930822078)) ('log_Mcent_LRG', np.float64(12.729812715436136)) ('sigma_M_LRG', np.float64(0.31084781083661017))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 26] ('M_0_LRG', np.float64(12.650687483295119)) ('M_1_LRG', np.float64(13.730851456101682)) ('alpha_LRG', np.float64(1.1067601938952125)) ('f_sigv_LRG', np.float64(0.8910053730310814)) ('log_Mcent_LRG', np.float64(12.694926902590307)) ('sigma_M_LRG', np.float64(0.26764273426373447))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 26] ('M_0_LRG', np.float64(12.422725811321497)) ('M_1_LRG', np.float64(13.912969172030063)) ('alpha_LRG', np.float64(1.1619062768683368)) ('f_sigv_LRG', np.float64(0.9630542491688924)) ('log_Mcent_LRG', np.float64(12.828602887215954)) ('sigma_M_LRG', np.float64(0.4034972172639887))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 26] ('M_0_LRG', np.float64(12.764004699539674)) ('M_1_LRG', np.float64(13.830030755606977)) ('alpha_LRG', np.float64(0.9864484410049421)) ('f_sigv_LRG', np.float64(0.9797102330122198)) ('log_Mcent_LRG', np.float64(12.855025728435884)) ('sigma_M_LRG', np.float64(0.44892651729673466))
[Interation 26] chi2=399.7694104798512
[Interation 26] chi2=615.1102602520798
[Interation 26] chi2=431.81487102906925
[Interation 26] chi2=579.5267863427481
[Interation 26] ('M_0_LRG', np.float64(12.611629760394855)) ('M_1_LRG', np.float64(13.713844346422452)) ('alpha_LRG', np.float64(1.0327371370595595)) ('f_sigv_LRG', np.float64(0.919032955089826)) ('log_Mcent_LRG', np.float64(12.658935913514725)) ('sigma_M_LRG', np.float64(0.2082771781742374))
[Interation 26] ('M_0_LRG', np.float64(12.559564295857863)) ('M_1_LRG', np.float64(13.716188613083686)) ('alpha_LRG', np.float64(1.0563804541091006)) ('f_sigv_LRG', np.float64(0.9539693373452818)) ('log_Mcent_LRG', np.float64(12.659232766424537)) ('sigma_M_LRG', np.float64(0.20365281058522366))
[Interation 26] ('M_0_LRG', np.float64(12.559878859090091)) ('M_1_LRG', np.float64(13.694430447986562)) ('alpha_LRG', np.float64(1.0845259872717368)) ('f_sigv_LRG', np.float64(0.9338267879734979)) ('log_Mcent_LRG', np.float64(12.635872112451716)) ('sigma_M_LRG', np.float64(0.16237193045126896))
[Interation 26] ('M_0_LRG', np.float64(12.579809817061857)) ('M_1_LRG', np.float64(13.702560335529927)) ('alpha_LRG', np.float64(1.056453894515464)) ('f_sigv_LRG', np.float64(0.9410833204478505)) ('log_Mcent_LRG', np.float64(12.651190095658754)) ('sigma_M_LRG', np.float64(0.1942499457306619))
[Interation 26] ('M_0_LRG', np.float64(12.493930611703236)) ('M_1_LRG', np.float64(13.703055925302701)) ('alpha_LRG', np.float64(1.1157353326090105)) ('f_sigv_LRG', np.float64(0.9208640624723857)) ('log_Mcent_LRG', np.float64(12.630705041334899)) ('sigma_M_LRG', np.float64(0.16467104480970024))
[Interation 26] ('M_0_LRG', np.float64(12.551115617604626)) ('M_1_LRG', np.float64(13.733377722255618)) ('alpha_LRG', np.float64(1.0649213128022217)) ('f_sigv_LRG', np.float64(0.9416593856521278)) ('log_Mcent_LRG', np.float64(12.67192272084255)) ('sigma_M_LRG', np.float64(0.2284085729484357))
[Interation 26] ('M_0_LRG', np.float64(12.485207968638939)) ('M_1_LRG', np.float64(13.723941556457255)) ('alpha_LRG', np.float64(1.1160293372697425)) ('f_sigv_LRG', np.float64(0.9246019934007652)) ('log_Mcent_LRG', np.float64(12.658563926195024)) ('sigma_M_LRG', np.float64(0.21727379627860433))
[Interation 26] ('M_0_LRG', np.float64(12.546461891012427)) ('M_1_LRG', np.float64(13.737283258366094)) ('alpha_LRG', np.float64(1.0911135728202987)) ('f_sigv_LRG', np.float64(0.9332892221929853)) ('log_Mcent_LRG', np.float64(12.665838628489404)) ('sigma_M_LRG', np.float64(0.20023925165120415))
[Interation 26] ('M_0_LRG', np.float64(12.509022546414778)) ('M_1_LRG', np.float64(13.734074666997161)) ('alpha_LRG', np.float64(1.1034065743296508)) ('f_sigv_LRG', np.float64(0.9299064674181717)) ('log_Mcent_LRG', np.float64(12.662054595644207)) ('sigma_M_LRG', np.float64(0.20419516887572497))
[Interation 26] ('M_0_LRG', np.float64(12.614193874168098)) ('M_1_LRG', np.float64(13.726318333188354)) ('alpha_LRG', np.float64(1.014449723618564)) ('f_sigv_LRG', np.float64(0.9503388992213108)) ('log_Mcent_LRG', np.float64(12.651704025603689)) ('sigma_M_LRG', np.float64(0.17477291212096524))
[Interation 26] ('M_0_LRG', np.float64(12.574590084450666)) ('M_1_LRG', np.float64(13.714804907947313)) ('alpha_LRG', np.float64(1.0487908047067682)) ('f_sigv_LRG', np.float64(0.9590963285085105)) ('log_Mcent_LRG', np.float64(12.642687225591105)) ('sigma_M_LRG', np.float64(0.1588426746799227))
[Interation 26] ('M_0_LRG', np.float64(12.566387054696218)) ('M_1_LRG', np.float64(13.676722788733846)) ('alpha_LRG', np.float64(1.0749710638120498)) ('f_sigv_LRG', np.float64(0.9294958636308464)) ('log_Mcent_LRG', np.float64(12.61470842774866)) ('sigma_M_LRG', np.float64(0.1260217344421108))
[Interation 26] chi2=339.1432630423408
[Interation 26] chi2=422.48672953408305
[Interation 26] chi2=428.91861316235224
[Interation 26] chi2=360.30104569082494
[Interation 26] chi2=342.0978660579034
[Interation 26] chi2=386.29469833353
[Interation 26] chi2=287.70927006657774
[Interation 26] chi2=333.3538630523936
[Interation 26] chi2=349.19360577121626
[Interation 26] chi2=367.312208027064
[Interation 26] chi2=398.0378863149255
[Interation 26] chi2=352.65558114299904
[Interation 27] ('M_0_LRG', np.float64(12.566128983149822)) ('M_1_LRG', np.float64(13.705995801530179)) ('alpha_LRG', np.float64(1.0612949284405524)) ('f_sigv_LRG', np.float64(0.9192567404559355)) ('log_Mcent_LRG', np.float64(12.6455737771598)) ('sigma_M_LRG', np.float64(0.18993041953586487))
[Interation 27] ('M_0_LRG', np.float64(12.612810381105554)) ('M_1_LRG', np.float64(13.685065366395948)) ('alpha_LRG', np.float64(1.0435685676045277)) ('f_sigv_LRG', np.float64(0.9523871273349825)) ('log_Mcent_LRG', np.float64(12.638368838606826)) ('sigma_M_LRG', np.float64(0.15602326354892032))
[Interation 27] ('M_0_LRG', np.float64(12.583721715619365)) ('M_1_LRG', np.float64(13.717152560820114)) ('alpha_LRG', np.float64(1.045371985505091)) ('f_sigv_LRG', np.float64(0.9518058523573951)) ('log_Mcent_LRG', np.float64(12.66284665792252)) ('sigma_M_LRG', np.float64(0.20997844349393002))
[Interation 27] ('M_0_LRG', np.float64(12.524550117805127)) ('M_1_LRG', np.float64(13.737230809951193)) ('alpha_LRG', np.float64(1.0947590315634266)) ('f_sigv_LRG', np.float64(0.9325986372398796)) ('log_Mcent_LRG', np.float64(12.67824930635463)) ('sigma_M_LRG', np.float64(0.2362115583404117))
[Interation 27] chi2=362.9536306911726
[Interation 27] chi2=344.83397780180053
[Interation 27] chi2=373.839144811992
[Interation 27] chi2=401.90555924949416
[Interation 27] ('M_0_LRG', np.float64(12.55294821762459)) ('M_1_LRG', np.float64(13.697824033373644)) ('alpha_LRG', np.float64(1.0954338425440588)) ('f_sigv_LRG', np.float64(0.9307322929861669)) ('log_Mcent_LRG', np.float64(12.63393139141654)) ('sigma_M_LRG', np.float64(0.14154279505195527))
[Interation 27] ('M_0_LRG', np.float64(12.572421294409454)) ('M_1_LRG', np.float64(13.683605576091)) ('alpha_LRG', np.float64(1.0753440944247061)) ('f_sigv_LRG', np.float64(0.9489049453368377)) ('log_Mcent_LRG', np.float64(12.620060706358585)) ('sigma_M_LRG', np.float64(0.11719787672832904))
[Interation 27] ('M_0_LRG', np.float64(12.544210584600158)) ('M_1_LRG', np.float64(13.713884025394758)) ('alpha_LRG', np.float64(1.0850153569940664)) ('f_sigv_LRG', np.float64(0.9365633566092331)) ('log_Mcent_LRG', np.float64(12.64480689111766)) ('sigma_M_LRG', np.float64(0.16582526955238158))
[Interation 27] ('M_0_LRG', np.float64(12.566015810736488)) ('M_1_LRG', np.float64(13.695327824939241)) ('alpha_LRG', np.float64(1.073424089173647)) ('f_sigv_LRG', np.float64(0.9288183904390988)) ('log_Mcent_LRG', np.float64(12.635482298210036)) ('sigma_M_LRG', np.float64(0.16111535595926574))
[Interation 27] ('M_0_LRG', np.float64(12.558474424395488)) ('M_1_LRG', np.float64(13.704462916577173)) ('alpha_LRG', np.float64(1.0811522266510694)) ('f_sigv_LRG', np.float64(0.927133882740516)) ('log_Mcent_LRG', np.float64(12.644006309070143)) ('sigma_M_LRG', np.float64(0.17842875064984687))
[Interation 27] ('M_0_LRG', np.float64(12.565697789335903)) ('M_1_LRG', np.float64(13.710615752341873)) ('alpha_LRG', np.float64(1.066677190232859)) ('f_sigv_LRG', np.float64(0.9352199513586003)) ('log_Mcent_LRG', np.float64(12.650861615731417)) ('sigma_M_LRG', np.float64(0.18895971913800091))
[Interation 27] ('M_0_LRG', np.float64(12.560504299878382)) ('M_1_LRG', np.float64(13.70494801123154)) ('alpha_LRG', np.float64(1.0657339027532022)) ('f_sigv_LRG', np.float64(0.9358469438444331)) ('log_Mcent_LRG', np.float64(12.640328844743523)) ('sigma_M_LRG', np.float64(0.16777909899308174))
[Interation 27] ('M_0_LRG', np.float64(12.573981797172827)) ('M_1_LRG', np.float64(13.699457473533183)) ('alpha_LRG', np.float64(1.0657754166623374)) ('f_sigv_LRG', np.float64(0.9339490090889176)) ('log_Mcent_LRG', np.float64(12.646216496152558)) ('sigma_M_LRG', np.float64(0.19034194176837205))
[Interation 27] ('M_0_LRG', np.float64(12.568661218798756)) ('M_1_LRG', np.float64(13.700281142335665)) ('alpha_LRG', np.float64(1.064667501126689)) ('f_sigv_LRG', np.float64(0.9390727530662917)) ('log_Mcent_LRG', np.float64(12.633928073027668)) ('sigma_M_LRG', np.float64(0.14810152079172917))
[Interation 27] ('M_0_LRG', np.float64(12.552187788268359)) ('M_1_LRG', np.float64(13.69272465245864)) ('alpha_LRG', np.float64(1.089815166685451)) ('f_sigv_LRG', np.float64(0.9448575682682864)) ('log_Mcent_LRG', np.float64(12.632271617595972)) ('sigma_M_LRG', np.float64(0.144359762726337))
[Interation 27] ('M_0_LRG', np.float64(12.562227202112394)) ('M_1_LRG', np.float64(13.68990960473936)) ('alpha_LRG', np.float64(1.0893939608688679)) ('f_sigv_LRG', np.float64(0.9268310039127029)) ('log_Mcent_LRG', np.float64(12.630818455922757)) ('sigma_M_LRG', np.float64(0.1463149200025654))
[Interation 27] ('M_0_LRG', np.float64(12.56383475774902)) ('M_1_LRG', np.float64(13.698389258442273)) ('alpha_LRG', np.float64(1.0714869150032438)) ('f_sigv_LRG', np.float64(0.9444827887835919)) ('log_Mcent_LRG', np.float64(12.626610687325355)) ('sigma_M_LRG', np.float64(0.12727387118519334))
[Interation 27] chi2=359.49149257723434
[Interation 27] chi2=346.8887477490949
[Interation 27] chi2=332.85566593842606
[Interation 27] chi2=356.7724876867213
[Interation 27] chi2=352.3661983905185
[Interation 27] chi2=347.73863328637816
[Interation 27] chi2=344.87703252809195
[Interation 27] chi2=382.3445258732417
[Interation 27] chi2=319.3232347404845
[Interation 27] chi2=361.82167056839563
[Interation 27] chi2=321.83613856999057
[Interation 27] chi2=395.2025217209502
[Interation 28] ('M_0_LRG', np.float64(12.573341000379257)) ('M_1_LRG', np.float64(13.690169630950734)) ('alpha_LRG', np.float64(1.0706772326775338)) ('f_sigv_LRG', np.float64(0.9212982350547195)) ('log_Mcent_LRG', np.float64(12.629077890738756)) ('sigma_M_LRG', np.float64(0.14685920822133341))
[Interation 28] ('M_0_LRG', np.float64(12.569176622129852)) ('M_1_LRG', np.float64(13.695036233000446)) ('alpha_LRG', np.float64(1.069005466628885)) ('f_sigv_LRG', np.float64(0.9441919520088667)) ('log_Mcent_LRG', np.float64(12.62359390520418)) ('sigma_M_LRG', np.float64(0.12035361594558736))
[Interation 28] ('M_0_LRG', np.float64(12.572250005873785)) ('M_1_LRG', np.float64(13.704526787369936)) ('alpha_LRG', np.float64(1.0586245672159396)) ('f_sigv_LRG', np.float64(0.9495216017665052)) ('log_Mcent_LRG', np.float64(12.629380345951875)) ('sigma_M_LRG', np.float64(0.12665834383373714))
[Interation 28] ('M_0_LRG', np.float64(12.580377075282822)) ('M_1_LRG', np.float64(13.696858101739279)) ('alpha_LRG', np.float64(1.0615932387484475)) ('f_sigv_LRG', np.float64(0.9440746942378815)) ('log_Mcent_LRG', np.float64(12.627749436704434)) ('sigma_M_LRG', np.float64(0.13081706841870638))
[Interation 28] chi2=374.21027472817207
[Interation 28] chi2=349.82312367213495
[Interation 28] chi2=308.20363042674546
[Interation 28] chi2=339.1937496088588
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_14.npy
Set number of threads to 32
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.566043638181814)) ('M_1_LRG', np.float64(13.7144405906863)) ('alpha_LRG', np.float64(1.0617245363449073)) ('f_sigv_LRG', np.float64(0.938210236491537)) ('log_Mcent_LRG', np.float64(12.64533443018249)) ('sigma_M_LRG', np.float64(0.1760642365456349))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3223273754119873
Start satellite assignement
Satellite assignement done 0.0734853744506836
LRG mock catalogue done 0.14968252182006836
612907 central galaxies, 86023 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6618804931640625
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_14.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:18
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:18
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:18
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:18
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:18
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:18
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:19
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:19
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:21
Load correlation matrix for LRG at z0.95 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:19
Load correlation matrix for LRG at z0.95 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.618682032695183)) ('M_1_LRG', np.float64(13.749281441180429)) ('alpha_LRG', np.float64(1.0071615666478542)) ('f_sigv_LRG', np.float64(0.9460847489027668)) ('log_Mcent_LRG', np.float64(12.69006711730143)) ('sigma_M_LRG', np.float64(0.24790298867492966))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.524080678221306)) ('M_1_LRG', np.float64(13.737586495981416)) ('alpha_LRG', np.float64(1.1478807992684805)) ('f_sigv_LRG', np.float64(0.9211066026232569)) ('log_Mcent_LRG', np.float64(12.721228857594323)) ('sigma_M_LRG', np.float64(0.3110126066055494))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.503221919045101)) ('M_1_LRG', np.float64(13.733294564116445)) ('alpha_LRG', np.float64(1.124047302643279)) ('f_sigv_LRG', np.float64(0.9556544465442817)) ('log_Mcent_LRG', np.float64(12.674951264987872)) ('sigma_M_LRG', np.float64(0.22201537213868366))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.61617246783279)) ('M_1_LRG', np.float64(13.725552575128626)) ('alpha_LRG', np.float64(1.0409045105634782)) ('f_sigv_LRG', np.float64(0.9296447258235803)) ('log_Mcent_LRG', np.float64(12.696864317105941)) ('sigma_M_LRG', np.float64(0.2824133338080013))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.415184408500362)) ('M_1_LRG', np.float64(13.740066334439382)) ('alpha_LRG', np.float64(1.1775899939840762)) ('f_sigv_LRG', np.float64(0.9020225842676661)) ('log_Mcent_LRG', np.float64(12.716593895218567)) ('sigma_M_LRG', np.float64(0.30409734977268366))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.428898035939163)) ('M_1_LRG', np.float64(13.754145367085387)) ('alpha_LRG', np.float64(1.1409148963815563)) ('f_sigv_LRG', np.float64(0.9277153884640558)) ('log_Mcent_LRG', np.float64(12.686463276629375)) ('sigma_M_LRG', np.float64(0.24275758531852448))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.51033429851685)) ('M_1_LRG', np.float64(13.776128003964336)) ('alpha_LRG', np.float64(1.1167280354992446)) ('f_sigv_LRG', np.float64(0.9236359518729459)) ('log_Mcent_LRG', np.float64(12.720833958846468)) ('sigma_M_LRG', np.float64(0.29476014637543935))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.473147803900835)) ('M_1_LRG', np.float64(13.762155548695562)) ('alpha_LRG', np.float64(1.0926961381409903)) ('f_sigv_LRG', np.float64(0.973415014496849)) ('log_Mcent_LRG', np.float64(12.666639304052985)) ('sigma_M_LRG', np.float64(0.20148486727155573))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.675891068635057)) ('M_1_LRG', np.float64(13.73120883861136)) ('alpha_LRG', np.float64(1.002352848825615)) ('f_sigv_LRG', np.float64(0.9535888054465173)) ('log_Mcent_LRG', np.float64(12.68444768616934)) ('sigma_M_LRG', np.float64(0.25536589095133977))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.392469117487654)) ('M_1_LRG', np.float64(13.785487263704777)) ('alpha_LRG', np.float64(1.1592526357184654)) ('f_sigv_LRG', np.float64(0.9443301947561169)) ('log_Mcent_LRG', np.float64(12.70735381343325)) ('sigma_M_LRG', np.float64(0.28351482600206246))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.527813153790225)) ('M_1_LRG', np.float64(13.735505591837647)) ('alpha_LRG', np.float64(1.118789093546168)) ('f_sigv_LRG', np.float64(0.9028207603690682)) ('log_Mcent_LRG', np.float64(12.700024204140592)) ('sigma_M_LRG', np.float64(0.29363142363141537))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.513671463567208)) ('M_1_LRG', np.float64(13.767305699424078)) ('alpha_LRG', np.float64(1.1058843451657916)) ('f_sigv_LRG', np.float64(0.9371362843396488)) ('log_Mcent_LRG', np.float64(12.707285071637427)) ('sigma_M_LRG', np.float64(0.27160082586019163))
[Interation 28] chi2=349.0871922850617
[Interation 28] chi2=446.08080304780214
[Interation 28] chi2=371.079903848932
[Interation 28] chi2=339.99591068053695
[Interation 28] chi2=440.00076813098053
[Interation 28] chi2=374.8073563952531
[Interation 28] chi2=400.57989945283794
[Interation 28] chi2=421.6153269200975
[Interation 28] chi2=356.38486605892786
[Interation 28] chi2=398.4238329535575
[Interation 28] chi2=415.78897573982886
[Interation 28] chi2=437.15856473268104
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 29] ('M_0_LRG', np.float64(12.440918258131052)) ('M_1_LRG', np.float64(13.778393466652679)) ('alpha_LRG', np.float64(1.1151623637664927)) ('f_sigv_LRG', np.float64(0.987681264184832)) ('log_Mcent_LRG', np.float64(12.695432361735648)) ('sigma_M_LRG', np.float64(0.24145689672162846))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 29] ('M_0_LRG', np.float64(12.441190820853773)) ('M_1_LRG', np.float64(13.768084336539532)) ('alpha_LRG', np.float64(1.1386104907007593)) ('f_sigv_LRG', np.float64(0.9272701976042571)) ('log_Mcent_LRG', np.float64(12.710698240303683)) ('sigma_M_LRG', np.float64(0.2783442648371954))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 29] ('M_0_LRG', np.float64(12.521357208082211)) ('M_1_LRG', np.float64(13.789093594381717)) ('alpha_LRG', np.float64(1.0670699834262982)) ('f_sigv_LRG', np.float64(0.903129055525606)) ('log_Mcent_LRG', np.float64(12.745800795906636)) ('sigma_M_LRG', np.float64(0.36525731131708744))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 29] ('M_0_LRG', np.float64(12.484590314274321)) ('M_1_LRG', np.float64(13.761771775647924)) ('alpha_LRG', np.float64(1.1170865180580916)) ('f_sigv_LRG', np.float64(0.9348921658368908)) ('log_Mcent_LRG', np.float64(12.684349457335932)) ('sigma_M_LRG', np.float64(0.24759183785105254))
[Interation 29] chi2=343.09058046479214
[Interation 29] chi2=388.24029985071843
[Interation 29] chi2=435.2533225608266
[Interation 29] chi2=413.786740417199
[Interation 29] ('M_0_LRG', np.float64(12.581928786703095)) ('M_1_LRG', np.float64(13.696666091765186)) ('alpha_LRG', np.float64(1.0623435205176461)) ('f_sigv_LRG', np.float64(0.9415123933009901)) ('log_Mcent_LRG', np.float64(12.64674271045827)) ('sigma_M_LRG', np.float64(0.19513289913431758))
[Interation 29] ('M_0_LRG', np.float64(12.484206294705004)) ('M_1_LRG', np.float64(13.737961861634702)) ('alpha_LRG', np.float64(1.0944917219611197)) ('f_sigv_LRG', np.float64(0.9664126819774992)) ('log_Mcent_LRG', np.float64(12.649950535044663)) ('sigma_M_LRG', np.float64(0.17828408630673914))
[Interation 29] ('M_0_LRG', np.float64(12.521903410985995)) ('M_1_LRG', np.float64(13.710553279484076)) ('alpha_LRG', np.float64(1.105507862603087)) ('f_sigv_LRG', np.float64(0.932826217079173)) ('log_Mcent_LRG', np.float64(12.646693096303112)) ('sigma_M_LRG', np.float64(0.1874807762590322))
[Interation 29] ('M_0_LRG', np.float64(12.485942940569089)) ('M_1_LRG', np.float64(13.731499365356077)) ('alpha_LRG', np.float64(1.1058296743483693)) ('f_sigv_LRG', np.float64(0.9421433679349714)) ('log_Mcent_LRG', np.float64(12.661345918107685)) ('sigma_M_LRG', np.float64(0.20536816865490104))
[Interation 29] ('M_0_LRG', np.float64(12.472636925466748)) ('M_1_LRG', np.float64(13.712171274709407)) ('alpha_LRG', np.float64(1.1359565710037063)) ('f_sigv_LRG', np.float64(0.9372233776779406)) ('log_Mcent_LRG', np.float64(12.644652464763615)) ('sigma_M_LRG', np.float64(0.17374058112763446))
[Interation 29] ('M_0_LRG', np.float64(12.52055788232207)) ('M_1_LRG', np.float64(13.725163209998279)) ('alpha_LRG', np.float64(1.0892516402746744)) ('f_sigv_LRG', np.float64(0.9449456813523336)) ('log_Mcent_LRG', np.float64(12.65432810347945)) ('sigma_M_LRG', np.float64(0.19239306657943034))
[Interation 29] ('M_0_LRG', np.float64(12.492705293285425)) ('M_1_LRG', np.float64(13.720563000289104)) ('alpha_LRG', np.float64(1.113884159371287)) ('f_sigv_LRG', np.float64(0.9505475993935678)) ('log_Mcent_LRG', np.float64(12.648600838327917)) ('sigma_M_LRG', np.float64(0.1735870495730964))
[Interation 29] ('M_0_LRG', np.float64(12.513109735519334)) ('M_1_LRG', np.float64(13.719320333273597)) ('alpha_LRG', np.float64(1.1127603081332955)) ('f_sigv_LRG', np.float64(0.9446709681086658)) ('log_Mcent_LRG', np.float64(12.65123556824126)) ('sigma_M_LRG', np.float64(0.17789228929719147))
[Interation 29] ('M_0_LRG', np.float64(12.515180634531264)) ('M_1_LRG', np.float64(13.71101407154077)) ('alpha_LRG', np.float64(1.0958110288208855)) ('f_sigv_LRG', np.float64(0.942185089934479)) ('log_Mcent_LRG', np.float64(12.642961858410784)) ('sigma_M_LRG', np.float64(0.1741081404546641))
[Interation 29] ('M_0_LRG', np.float64(12.516764201967382)) ('M_1_LRG', np.float64(13.713152062624014)) ('alpha_LRG', np.float64(1.1088676513586826)) ('f_sigv_LRG', np.float64(0.9371360243337828)) ('log_Mcent_LRG', np.float64(12.658730026500427)) ('sigma_M_LRG', np.float64(0.20368971209560838))
[Interation 29] ('M_0_LRG', np.float64(12.477699631705443)) ('M_1_LRG', np.float64(13.733219267829055)) ('alpha_LRG', np.float64(1.1070792097787545)) ('f_sigv_LRG', np.float64(0.9409644133225374)) ('log_Mcent_LRG', np.float64(12.663532251241838)) ('sigma_M_LRG', np.float64(0.20055690765352457))
[Interation 29] ('M_0_LRG', np.float64(12.51368278867406)) ('M_1_LRG', np.float64(13.700766564988834)) ('alpha_LRG', np.float64(1.0964124484105917)) ('f_sigv_LRG', np.float64(0.9450312513745115)) ('log_Mcent_LRG', np.float64(12.637463595164668)) ('sigma_M_LRG', np.float64(0.1657834362255966))
[Interation 29] chi2=412.3531133868757
[Interation 29] chi2=349.92195767137434
[Interation 29] chi2=410.20007651311505
[Interation 29] chi2=320.378468440219
[Interation 29] chi2=393.34693586291405
[Interation 29] chi2=313.55153624703405
[Interation 29] chi2=363.09524422545127
[Interation 29] chi2=341.3388348699751
[Interation 29] chi2=350.0118917627976
[Interation 29] chi2=370.64910667216304
[Interation 29] chi2=390.14440183755124
[Interation 29] chi2=329.10546466622037
[Interation 30] ('M_0_LRG', np.float64(12.492691222904767)) ('M_1_LRG', np.float64(13.730466803412014)) ('alpha_LRG', np.float64(1.121920062885411)) ('f_sigv_LRG', np.float64(0.931480321573247)) ('log_Mcent_LRG', np.float64(12.677306940423755)) ('sigma_M_LRG', np.float64(0.23409531181763893))
[Interation 30] ('M_0_LRG', np.float64(12.542201538660972)) ('M_1_LRG', np.float64(13.744865836800907)) ('alpha_LRG', np.float64(1.1002091300050694)) ('f_sigv_LRG', np.float64(0.9322335442167374)) ('log_Mcent_LRG', np.float64(12.691489907023268)) ('sigma_M_LRG', np.float64(0.25840404621782925))
[Interation 30] ('M_0_LRG', np.float64(12.511419095244394)) ('M_1_LRG', np.float64(13.705009214743129)) ('alpha_LRG', np.float64(1.1129752134616517)) ('f_sigv_LRG', np.float64(0.9485214431063306)) ('log_Mcent_LRG', np.float64(12.62447110506529)) ('sigma_M_LRG', np.float64(0.12682770241576907))
[Interation 30] ('M_0_LRG', np.float64(12.46011287305779)) ('M_1_LRG', np.float64(13.72325742391774)) ('alpha_LRG', np.float64(1.1275420324701908)) ('f_sigv_LRG', np.float64(0.9499399416630142)) ('log_Mcent_LRG', np.float64(12.649425127884042)) ('sigma_M_LRG', np.float64(0.1713165144812021))
[Interation 30] chi2=298.2536307419979
[Interation 30] chi2=353.73955975176625
[Interation 30] chi2=353.74760027264557
[Interation 30] chi2=377.6206301033946
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_15.npy
Set number of threads to 32
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.477353056313373)) ('M_1_LRG', np.float64(13.718974267033236)) ('alpha_LRG', np.float64(1.1278536864469588)) ('f_sigv_LRG', np.float64(0.9361400278828778)) ('log_Mcent_LRG', np.float64(12.649692207686606)) ('sigma_M_LRG', np.float64(0.17583277370926886))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3118324279785156
Start satellite assignement
Satellite assignement done 0.07524895668029785
LRG mock catalogue done 0.1507854461669922
610279 central galaxies, 88946 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6482198238372803
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_15.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:21
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:21
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:21
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:22
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:22
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Load smu measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:20
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:20
Load correlation matrix for LRG at z0.95 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.640954401821174)) ('M_1_LRG', np.float64(13.624545327750203)) ('alpha_LRG', np.float64(0.8664256135135708)) ('f_sigv_LRG', np.float64(1.1940903731256585)) ('log_Mcent_LRG', np.float64(12.763441693888474)) ('sigma_M_LRG', np.float64(0.4456238631061077))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.545506496770019)) ('M_1_LRG', np.float64(13.997885322057314)) ('alpha_LRG', np.float64(1.150776466905289)) ('f_sigv_LRG', np.float64(1.0740677857216325)) ('log_Mcent_LRG', np.float64(12.706489833522571)) ('sigma_M_LRG', np.float64(0.1825538822485837))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.562602636817743)) ('M_1_LRG', np.float64(13.862191367821838)) ('alpha_LRG', np.float64(0.846039537577663)) ('f_sigv_LRG', np.float64(1.0329767752135413)) ('log_Mcent_LRG', np.float64(12.772851149378216)) ('sigma_M_LRG', np.float64(0.36162886645969017))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.347693363138937)) ('M_1_LRG', np.float64(13.96155732114567)) ('alpha_LRG', np.float64(1.1029501181819532)) ('f_sigv_LRG', np.float64(1.1212917814634085)) ('log_Mcent_LRG', np.float64(12.75419984284453)) ('sigma_M_LRG', np.float64(0.2739318300836888))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.602312866552156)) ('M_1_LRG', np.float64(13.872650731195318)) ('alpha_LRG', np.float64(0.9479784333552203)) ('f_sigv_LRG', np.float64(0.9463073509231011)) ('log_Mcent_LRG', np.float64(12.671858523989563)) ('sigma_M_LRG', np.float64(0.27185517807109816))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.807219016197031)) ('M_1_LRG', np.float64(13.765634590373203)) ('alpha_LRG', np.float64(1.1428557715607577)) ('f_sigv_LRG', np.float64(1.002707467723453)) ('log_Mcent_LRG', np.float64(12.763361231181491)) ('sigma_M_LRG', np.float64(0.30178562037211326))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.839928600739846)) ('M_1_LRG', np.float64(13.643930541884703)) ('alpha_LRG', np.float64(0.9865096220534094)) ('f_sigv_LRG', np.float64(1.0739539570809227)) ('log_Mcent_LRG', np.float64(12.75233862902921)) ('sigma_M_LRG', np.float64(0.3980918508570977))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.493718387736642)) ('M_1_LRG', np.float64(13.922258222267201)) ('alpha_LRG', np.float64(1.3432286098133548)) ('f_sigv_LRG', np.float64(0.9092070879165031)) ('log_Mcent_LRG', np.float64(12.844644277904944)) ('sigma_M_LRG', np.float64(0.4062857135006456))
[Interation 30] chi2=2487.233794918567
[Interation 30] chi2=2358.1531940928135
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.446338461931937)) ('M_1_LRG', np.float64(13.879787463073969)) ('alpha_LRG', np.float64(0.8800994277626297)) ('f_sigv_LRG', np.float64(0.8677221750791893)) ('log_Mcent_LRG', np.float64(12.746390661456465)) ('sigma_M_LRG', np.float64(0.3654986334724631))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.701833167164239)) ('M_1_LRG', np.float64(13.46763463753149)) ('alpha_LRG', np.float64(1.1350163882734718)) ('f_sigv_LRG', np.float64(1.0373155965951169)) ('log_Mcent_LRG', np.float64(12.607131261795008)) ('sigma_M_LRG', np.float64(0.30538727641724095))
[Interation 30] chi2=887.4997940290951
[Interation 30] chi2=1003.1591598217873
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.585983119153566)) ('M_1_LRG', np.float64(13.516121152364818)) ('alpha_LRG', np.float64(1.1064226235685706)) ('f_sigv_LRG', np.float64(0.8964839080066337)) ('log_Mcent_LRG', np.float64(12.721111968702717)) ('sigma_M_LRG', np.float64(0.49941734485018047))
[Interation 30] chi2=1028.8195960507223
[Interation 30] chi2=949.6125978229538
[Interation 30] chi2=1310.9177969263271
[Interation 30] chi2=1446.4074214841921
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.813537179792016)) ('M_1_LRG', np.float64(13.517378551668541)) ('alpha_LRG', np.float64(0.981836194672293)) ('f_sigv_LRG', np.float64(0.891951776898738)) ('log_Mcent_LRG', np.float64(12.527247515588)) ('sigma_M_LRG', np.float64(0.22817923775882065))
[Interation 30] chi2=895.232918906555
[Interation 30] chi2=2183.8198033075096
[Interation 30] chi2=2039.143830874296
[Interation 30] chi2=2590.4341243329704
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 31] ('M_0_LRG', np.float64(12.391116318647077)) ('M_1_LRG', np.float64(13.86566679872498)) ('alpha_LRG', np.float64(1.155571998255967)) ('f_sigv_LRG', np.float64(0.8423302498152421)) ('log_Mcent_LRG', np.float64(12.862259522627975)) ('sigma_M_LRG', np.float64(0.4743027120730772))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 31] ('M_0_LRG', np.float64(12.461030387697763)) ('M_1_LRG', np.float64(13.813756271590233)) ('alpha_LRG', np.float64(0.9689968795798471)) ('f_sigv_LRG', np.float64(1.0426646447596388)) ('log_Mcent_LRG', np.float64(12.710470538582582)) ('sigma_M_LRG', np.float64(0.29223102048998273))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 31] ('M_0_LRG', np.float64(12.6096598497771)) ('M_1_LRG', np.float64(13.664859290444676)) ('alpha_LRG', np.float64(1.081602236560244)) ('f_sigv_LRG', np.float64(0.9362598194234103)) ('log_Mcent_LRG', np.float64(12.639203290189307)) ('sigma_M_LRG', np.float64(0.20695239357227946))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 31] ('M_0_LRG', np.float64(12.510626372439926)) ('M_1_LRG', np.float64(13.629869446072096)) ('alpha_LRG', np.float64(1.103486775243929)) ('f_sigv_LRG', np.float64(1.1005808998374516)) ('log_Mcent_LRG', np.float64(12.675169351889577)) ('sigma_M_LRG', np.float64(0.3032744231174783))
[Interation 31] chi2=563.8630616823831
[Interation 31] chi2=548.5980718431728
[Interation 31] chi2=418.0051470584419
[Interation 31] chi2=1195.2995041193665
[Interation 31] ('M_0_LRG', np.float64(12.568524796538487)) ('M_1_LRG', np.float64(13.694492163602728)) ('alpha_LRG', np.float64(1.0941889854748943)) ('f_sigv_LRG', np.float64(0.9166648434240053)) ('log_Mcent_LRG', np.float64(12.663334402148044)) ('sigma_M_LRG', np.float64(0.22682539208044944))
[Interation 31] ('M_0_LRG', np.float64(12.554766970464645)) ('M_1_LRG', np.float64(13.683208713212487)) ('alpha_LRG', np.float64(1.099119358965027)) ('f_sigv_LRG', np.float64(0.9118244949491061)) ('log_Mcent_LRG', np.float64(12.623613398778858)) ('sigma_M_LRG', np.float64(0.14976208950825737))
[Interation 31] ('M_0_LRG', np.float64(12.591861809032736)) ('M_1_LRG', np.float64(13.688083251207326)) ('alpha_LRG', np.float64(1.060167873797318)) ('f_sigv_LRG', np.float64(0.9089313019926332)) ('log_Mcent_LRG', np.float64(12.62840081581259)) ('sigma_M_LRG', np.float64(0.15496949309984276))
[Interation 31] ('M_0_LRG', np.float64(12.55224711140312)) ('M_1_LRG', np.float64(13.720250181213608)) ('alpha_LRG', np.float64(1.07912521228578)) ('f_sigv_LRG', np.float64(0.9326285576313088)) ('log_Mcent_LRG', np.float64(12.65019734813145)) ('sigma_M_LRG', np.float64(0.17838562896441107))
[Interation 31] ('M_0_LRG', np.float64(12.512119053085787)) ('M_1_LRG', np.float64(13.712841618106781)) ('alpha_LRG', np.float64(1.127083123926354)) ('f_sigv_LRG', np.float64(0.9003130202465847)) ('log_Mcent_LRG', np.float64(12.646163894429227)) ('sigma_M_LRG', np.float64(0.1828286170984822))
[Interation 31] ('M_0_LRG', np.float64(12.544334268747525)) ('M_1_LRG', np.float64(13.718094844370318)) ('alpha_LRG', np.float64(1.093596728872233)) ('f_sigv_LRG', np.float64(0.9292026251345906)) ('log_Mcent_LRG', np.float64(12.660068383157094)) ('sigma_M_LRG', np.float64(0.20484311114027337))
[Interation 31] ('M_0_LRG', np.float64(12.535161167326216)) ('M_1_LRG', np.float64(13.709518064860385)) ('alpha_LRG', np.float64(1.1024070542353894)) ('f_sigv_LRG', np.float64(0.9156607658984094)) ('log_Mcent_LRG', np.float64(12.652520140040158)) ('sigma_M_LRG', np.float64(0.19903384743634867))
[Interation 31] ('M_0_LRG', np.float64(12.51686551193201)) ('M_1_LRG', np.float64(13.73247525860177)) ('alpha_LRG', np.float64(1.1040406247298278)) ('f_sigv_LRG', np.float64(0.9500315962873818)) ('log_Mcent_LRG', np.float64(12.66823558891791)) ('sigma_M_LRG', np.float64(0.20868379305220358))
[Interation 31] ('M_0_LRG', np.float64(12.518146110739313)) ('M_1_LRG', np.float64(13.723576754507436)) ('alpha_LRG', np.float64(1.0947147388802752)) ('f_sigv_LRG', np.float64(0.9300493407513836)) ('log_Mcent_LRG', np.float64(12.655074850882107)) ('sigma_M_LRG', np.float64(0.19018202831304748))
[Interation 31] ('M_0_LRG', np.float64(12.530002644517094)) ('M_1_LRG', np.float64(13.721527049081665)) ('alpha_LRG', np.float64(1.1060472332265907)) ('f_sigv_LRG', np.float64(0.9022173682175326)) ('log_Mcent_LRG', np.float64(12.656218401824415)) ('sigma_M_LRG', np.float64(0.19961098842186376))
[Interation 31] ('M_0_LRG', np.float64(12.557536063173753)) ('M_1_LRG', np.float64(13.72277279787774)) ('alpha_LRG', np.float64(1.0786501692867627)) ('f_sigv_LRG', np.float64(0.9201831269102526)) ('log_Mcent_LRG', np.float64(12.674741503611493)) ('sigma_M_LRG', np.float64(0.23908776523367364))
[Interation 31] ('M_0_LRG', np.float64(12.542674622460176)) ('M_1_LRG', np.float64(13.719753610871521)) ('alpha_LRG', np.float64(1.0884590773633351)) ('f_sigv_LRG', np.float64(0.9294176255257072)) ('log_Mcent_LRG', np.float64(12.659457444532428)) ('sigma_M_LRG', np.float64(0.2074761350782665))
[Interation 31] chi2=419.0357475820548
[Interation 31] chi2=350.6136082448204
[Interation 31] chi2=367.2684227521548
[Interation 31] chi2=403.07069153415773
[Interation 31] chi2=367.64833069071284
[Interation 31] chi2=338.462867187287
[Interation 32] ('M_0_LRG', np.float64(12.575507378569746)) ('M_1_LRG', np.float64(13.711247616269516)) ('alpha_LRG', np.float64(1.0721652803130501)) ('f_sigv_LRG', np.float64(0.9423616323310788)) ('log_Mcent_LRG', np.float64(12.66524946073038)) ('sigma_M_LRG', np.float64(0.2084470183564186))
[Interation 32] ('M_0_LRG', np.float64(12.605614008394003)) ('M_1_LRG', np.float64(13.695054163201252)) ('alpha_LRG', np.float64(1.0628109135677477)) ('f_sigv_LRG', np.float64(0.9209689907223252)) ('log_Mcent_LRG', np.float64(12.640960205943385)) ('sigma_M_LRG', np.float64(0.16631429591110392))
[Interation 31] chi2=365.380397914405
[Interation 31] chi2=375.67358757361035
[Interation 32] ('M_0_LRG', np.float64(12.536978485032172)) ('M_1_LRG', np.float64(13.756066865562824)) ('alpha_LRG', np.float64(1.0707706625478528)) ('f_sigv_LRG', np.float64(0.9291553637658156)) ('log_Mcent_LRG', np.float64(12.681392374147444)) ('sigma_M_LRG', np.float64(0.2286803950109763))
[Interation 31] chi2=356.5301925814306
[Interation 31] chi2=336.3638510301637
[Interation 31] chi2=360.52866857069927
[Interation 32] ('M_0_LRG', np.float64(12.574204371662233)) ('M_1_LRG', np.float64(13.691371136423186)) ('alpha_LRG', np.float64(1.072120391087089)) ('f_sigv_LRG', np.float64(0.9317125469005891)) ('log_Mcent_LRG', np.float64(12.639524632260526)) ('sigma_M_LRG', np.float64(0.17710208502887786))
[Interation 31] chi2=363.68622191156817
[Interation 32] chi2=374.9204914105621
[Interation 32] chi2=383.9342257347282
[Interation 32] chi2=360.6054378000487
[Interation 32] chi2=358.08965072503594
[Interation 33] ('M_0_LRG', np.float64(12.542434856506315)) ('M_1_LRG', np.float64(13.708575545674277)) ('alpha_LRG', np.float64(1.0946671155508516)) ('f_sigv_LRG', np.float64(0.9321585657193162)) ('log_Mcent_LRG', np.float64(12.642753940604395)) ('sigma_M_LRG', np.float64(0.16594704703685464))
[Interation 33] ('M_0_LRG', np.float64(12.561282051134052)) ('M_1_LRG', np.float64(13.707340291261604)) ('alpha_LRG', np.float64(1.0889436268213728)) ('f_sigv_LRG', np.float64(0.9293357101924867)) ('log_Mcent_LRG', np.float64(12.637441442788568)) ('sigma_M_LRG', np.float64(0.15239897634494332))
[Interation 33] ('M_0_LRG', np.float64(12.564474223267794)) ('M_1_LRG', np.float64(13.702070425003782)) ('alpha_LRG', np.float64(1.0847061736082573)) ('f_sigv_LRG', np.float64(0.9203626744610995)) ('log_Mcent_LRG', np.float64(12.638483651259529)) ('sigma_M_LRG', np.float64(0.16791035424922957))
[Interation 33] ('M_0_LRG', np.float64(12.569115802856842)) ('M_1_LRG', np.float64(13.707214438645398)) ('alpha_LRG', np.float64(1.076856958224107)) ('f_sigv_LRG', np.float64(0.9373104986447324)) ('log_Mcent_LRG', np.float64(12.642811615808421)) ('sigma_M_LRG', np.float64(0.16586422392901767))
[Interation 33] chi2=336.7392631714562
[Interation 33] chi2=320.84365812119705
[Interation 33] chi2=344.1047329442101
[Interation 33] chi2=387.04052675404625
[Interation 32] ('M_0_LRG', np.float64(12.543365406578182)) ('M_1_LRG', np.float64(13.698620480025507)) ('alpha_LRG', np.float64(1.1029212059089708)) ('f_sigv_LRG', np.float64(0.9191977384371162)) ('log_Mcent_LRG', np.float64(12.64603155804205)) ('sigma_M_LRG', np.float64(0.18899562755026883))
[Interation 32] ('M_0_LRG', np.float64(12.535605966170758)) ('M_1_LRG', np.float64(13.70771602310384)) ('alpha_LRG', np.float64(1.0994245627107297)) ('f_sigv_LRG', np.float64(0.9284657615984981)) ('log_Mcent_LRG', np.float64(12.645463001983439)) ('sigma_M_LRG', np.float64(0.1785292319436813))
[Interation 32] ('M_0_LRG', np.float64(12.554941839600984)) ('M_1_LRG', np.float64(13.711502226901993)) ('alpha_LRG', np.float64(1.0856726097786256)) ('f_sigv_LRG', np.float64(0.9287811246267501)) ('log_Mcent_LRG', np.float64(12.647041862643528)) ('sigma_M_LRG', np.float64(0.17851294332627565))
[Interation 32] ('M_0_LRG', np.float64(12.555516466151449)) ('M_1_LRG', np.float64(13.700501330618062)) ('alpha_LRG', np.float64(1.1037666204259615)) ('f_sigv_LRG', np.float64(0.9411978027798078)) ('log_Mcent_LRG', np.float64(12.634505482153383)) ('sigma_M_LRG', np.float64(0.13694969168467197))
[Interation 32] ('M_0_LRG', np.float64(12.557465918620268)) ('M_1_LRG', np.float64(13.711655375290787)) ('alpha_LRG', np.float64(1.0876431447034756)) ('f_sigv_LRG', np.float64(0.9351119662996175)) ('log_Mcent_LRG', np.float64(12.648893824011527)) ('sigma_M_LRG', np.float64(0.17601286138556937))
[Interation 32] ('M_0_LRG', np.float64(12.567297887894313)) ('M_1_LRG', np.float64(13.696821101998037)) ('alpha_LRG', np.float64(1.0837059756221328)) ('f_sigv_LRG', np.float64(0.9265806539722128)) ('log_Mcent_LRG', np.float64(12.633552691284923)) ('sigma_M_LRG', np.float64(0.14959778729523399))
[Interation 32] ('M_0_LRG', np.float64(12.587209914883271)) ('M_1_LRG', np.float64(13.700367740033114)) ('alpha_LRG', np.float64(1.0664864806978407)) ('f_sigv_LRG', np.float64(0.9160194257896352)) ('log_Mcent_LRG', np.float64(12.64847502871562)) ('sigma_M_LRG', np.float64(0.18855776311394074))
[Interation 32] ('M_0_LRG', np.float64(12.534831506993164)) ('M_1_LRG', np.float64(13.713326099579522)) ('alpha_LRG', np.float64(1.0919457410730666)) ('f_sigv_LRG', np.float64(0.9234649116309215)) ('log_Mcent_LRG', np.float64(12.64960727392524)) ('sigma_M_LRG', np.float64(0.18980348393196134))
[Interation 32] ('M_0_LRG', np.float64(12.570915444289142)) ('M_1_LRG', np.float64(13.710753897997828)) ('alpha_LRG', np.float64(1.0652765337245838)) ('f_sigv_LRG', np.float64(0.9296538109187592)) ('log_Mcent_LRG', np.float64(12.653721896805223)) ('sigma_M_LRG', np.float64(0.19584743993858583))
[Interation 32] ('M_0_LRG', np.float64(12.550685082613068)) ('M_1_LRG', np.float64(13.702209374457203)) ('alpha_LRG', np.float64(1.0905314540733833)) ('f_sigv_LRG', np.float64(0.9272006134307349)) ('log_Mcent_LRG', np.float64(12.63829300618217)) ('sigma_M_LRG', np.float64(0.16460687609810443))
[Interation 32] ('M_0_LRG', np.float64(12.56128798699554)) ('M_1_LRG', np.float64(13.70199880428805)) ('alpha_LRG', np.float64(1.0852381513681497)) ('f_sigv_LRG', np.float64(0.9192738971113728)) ('log_Mcent_LRG', np.float64(12.641087458225815)) ('sigma_M_LRG', np.float64(0.1751200343673031))
[Interation 32] ('M_0_LRG', np.float64(12.562455278722943)) ('M_1_LRG', np.float64(13.691666239806239)) ('alpha_LRG', np.float64(1.101769404736256)) ('f_sigv_LRG', np.float64(0.9250613771809321)) ('log_Mcent_LRG', np.float64(12.629657858930704)) ('sigma_M_LRG', np.float64(0.14173708985380035))
[Interation 32] chi2=290.0998876017809
[Interation 32] chi2=341.02410185720873
[Interation 32] chi2=357.709167534824
[Interation 32] chi2=350.1792712162111
[Interation 32] chi2=409.55759500552546
[Interation 32] chi2=337.5415059590058
[Interation 32] chi2=294.16770697748166
[Interation 32] chi2=345.76410570632174
[Interation 32] chi2=373.85041705270885
[Interation 32] chi2=408.58088529597075
[Interation 32] chi2=333.15524352301696
[Interation 32] chi2=322.7583424244082
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_16.npy
Set number of threads to 32
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.535444687301009)) ('M_1_LRG', np.float64(13.704324931153987)) ('alpha_LRG', np.float64(1.1036204143734016)) ('f_sigv_LRG', np.float64(0.9254951591765687)) ('log_Mcent_LRG', np.float64(12.645272101308755)) ('sigma_M_LRG', np.float64(0.1834059022497358))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3186941146850586
Start satellite assignement
Satellite assignement done 0.07423210144042969
LRG mock catalogue done 0.14819955825805664
612994 central galaxies, 87618 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6534621715545654
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_16.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:19
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:19
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:19
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:19
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:21
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:22
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Load correlation matrix for LRG at z0.95 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 34] ('M_0_LRG', np.float64(12.437584424056139)) ('M_1_LRG', np.float64(13.774235138042409)) ('alpha_LRG', np.float64(1.1750081714006355)) ('f_sigv_LRG', np.float64(0.9081321862894278)) ('log_Mcent_LRG', np.float64(12.713679688778125)) ('sigma_M_LRG', np.float64(0.2842134707538301))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 34] ('M_0_LRG', np.float64(12.273110085168343)) ('M_1_LRG', np.float64(13.748224703426821)) ('alpha_LRG', np.float64(1.2442663138770145)) ('f_sigv_LRG', np.float64(0.9419039223821313)) ('log_Mcent_LRG', np.float64(12.676030198511015)) ('sigma_M_LRG', np.float64(0.2265965721419882))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 34] ('M_0_LRG', np.float64(12.482366014787837)) ('M_1_LRG', np.float64(13.757129766559123)) ('alpha_LRG', np.float64(1.1002364585853097)) ('f_sigv_LRG', np.float64(0.9077475564137476)) ('log_Mcent_LRG', np.float64(12.695277887591288)) ('sigma_M_LRG', np.float64(0.27533382215474744))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 34] ('M_0_LRG', np.float64(12.584855771585982)) ('M_1_LRG', np.float64(13.777751318764377)) ('alpha_LRG', np.float64(1.0418070132038557)) ('f_sigv_LRG', np.float64(0.9210970082958732)) ('log_Mcent_LRG', np.float64(12.721587156806885)) ('sigma_M_LRG', np.float64(0.28313262236678116))
[Interation 34] chi2=395.1727502419828
[Interation 34] chi2=428.33841009678287
[Interation 34] chi2=423.79124699239986
[Interation 34] chi2=391.3425629657617
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.515361055381376)) ('M_1_LRG', np.float64(13.709218954913478)) ('alpha_LRG', np.float64(1.1427448060709673)) ('f_sigv_LRG', np.float64(0.9565039140259624)) ('log_Mcent_LRG', np.float64(12.648242155735913)) ('sigma_M_LRG', np.float64(0.18349615200905522))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.323984484215394)) ('M_1_LRG', np.float64(13.712034085986042)) ('alpha_LRG', np.float64(1.1737028005269605)) ('f_sigv_LRG', np.float64(0.9765410964945043)) ('log_Mcent_LRG', np.float64(12.630016928245727)) ('sigma_M_LRG', np.float64(0.14292372379212542))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.38143329294887)) ('M_1_LRG', np.float64(13.73132583022586)) ('alpha_LRG', np.float64(1.1671936537982415)) ('f_sigv_LRG', np.float64(0.9664243834708062)) ('log_Mcent_LRG', np.float64(12.651155600161404)) ('sigma_M_LRG', np.float64(0.1966312429814937))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.430308496047816)) ('M_1_LRG', np.float64(13.694525973233139)) ('alpha_LRG', np.float64(1.1748867293859298)) ('f_sigv_LRG', np.float64(0.9337533359408)) ('log_Mcent_LRG', np.float64(12.640799716356549)) ('sigma_M_LRG', np.float64(0.1709829499561299))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.430563305359671)) ('M_1_LRG', np.float64(13.768215934919665)) ('alpha_LRG', np.float64(1.1707789495496435)) ('f_sigv_LRG', np.float64(0.8902344520063203)) ('log_Mcent_LRG', np.float64(12.722749893285618)) ('sigma_M_LRG', np.float64(0.31985175665493))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.394478888604993)) ('M_1_LRG', np.float64(13.777668796086157)) ('alpha_LRG', np.float64(1.182723141692071)) ('f_sigv_LRG', np.float64(0.950681469702865)) ('log_Mcent_LRG', np.float64(12.73404455310502)) ('sigma_M_LRG', np.float64(0.3110183090664339))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.482529282722355)) ('M_1_LRG', np.float64(13.725411356781516)) ('alpha_LRG', np.float64(1.1767815139270852)) ('f_sigv_LRG', np.float64(0.8909454728793987)) ('log_Mcent_LRG', np.float64(12.661869603194619)) ('sigma_M_LRG', np.float64(0.2174427019482879))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.346210188542534)) ('M_1_LRG', np.float64(13.735306049674167)) ('alpha_LRG', np.float64(1.2246247543488047)) ('f_sigv_LRG', np.float64(0.929929737267123)) ('log_Mcent_LRG', np.float64(12.654667280628873)) ('sigma_M_LRG', np.float64(0.18631670289412788))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.395192183252277)) ('M_1_LRG', np.float64(13.744306384771143)) ('alpha_LRG', np.float64(1.2045806290560563)) ('f_sigv_LRG', np.float64(0.9203536632738016)) ('log_Mcent_LRG', np.float64(12.69373486951215)) ('sigma_M_LRG', np.float64(0.25396327417309456))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.36420658360644)) ('M_1_LRG', np.float64(13.740060865991898)) ('alpha_LRG', np.float64(1.1881316878458865)) ('f_sigv_LRG', np.float64(0.9207620539028203)) ('log_Mcent_LRG', np.float64(12.656162596175918)) ('sigma_M_LRG', np.float64(0.1970554312709365))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.30396830135749)) ('M_1_LRG', np.float64(13.745759303251534)) ('alpha_LRG', np.float64(1.2114521079482397)) ('f_sigv_LRG', np.float64(0.9425919943280443)) ('log_Mcent_LRG', np.float64(12.669364390525892)) ('sigma_M_LRG', np.float64(0.22602165007879194))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.383671554452041)) ('M_1_LRG', np.float64(13.717967483838356)) ('alpha_LRG', np.float64(1.190046639092557)) ('f_sigv_LRG', np.float64(0.929269043184868)) ('log_Mcent_LRG', np.float64(12.647126691871811)) ('sigma_M_LRG', np.float64(0.1990769075255836))
[Interation 33] chi2=416.52233965341156
[Interation 33] chi2=392.9229099017447
[Interation 33] chi2=441.30092931168286
[Interation 33] chi2=438.6813592236668
[Interation 33] chi2=411.1870998159627
[Interation 33] chi2=423.76926632014073
[Interation 33] chi2=398.66360267111276
[Interation 33] chi2=351.4658424197871
[Interation 33] chi2=397.95848014165824
[Interation 33] chi2=419.8652854572224
[Interation 33] chi2=399.1094104429934
[Interation 33] chi2=330.3608346914383
[Interation 35] ('M_0_LRG', np.float64(12.486725050214957)) ('M_1_LRG', np.float64(13.72428357058727)) ('alpha_LRG', np.float64(1.1082359030889488)) ('f_sigv_LRG', np.float64(0.9242188881813579)) ('log_Mcent_LRG', np.float64(12.649776448590892)) ('sigma_M_LRG', np.float64(0.18658016644253217))
[Interation 35] ('M_0_LRG', np.float64(12.590681760742557)) ('M_1_LRG', np.float64(13.746060119239713)) ('alpha_LRG', np.float64(1.037035516808468)) ('f_sigv_LRG', np.float64(0.9347577792449754)) ('log_Mcent_LRG', np.float64(12.676103196083599)) ('sigma_M_LRG', np.float64(0.22841207769753624))
[Interation 35] ('M_0_LRG', np.float64(12.471512386946978)) ('M_1_LRG', np.float64(13.72897264992899)) ('alpha_LRG', np.float64(1.1208463134127187)) ('f_sigv_LRG', np.float64(0.9325841216926238)) ('log_Mcent_LRG', np.float64(12.657173915652471)) ('sigma_M_LRG', np.float64(0.19581586596639183))
[Interation 35] ('M_0_LRG', np.float64(12.452001526653264)) ('M_1_LRG', np.float64(13.731569579976696)) ('alpha_LRG', np.float64(1.1387721813611555)) ('f_sigv_LRG', np.float64(0.9466178502075622)) ('log_Mcent_LRG', np.float64(12.657794317126992)) ('sigma_M_LRG', np.float64(0.19310190962787815))
[Interation 35] chi2=348.0093916498236
[Interation 35] chi2=352.47104471737384
[Interation 35] chi2=383.9418863848869
[Interation 35] chi2=369.8547278060735
[Interation 34] ('M_0_LRG', np.float64(12.493317128609592)) ('M_1_LRG', np.float64(13.729333040630104)) ('alpha_LRG', np.float64(1.105118859119288)) ('f_sigv_LRG', np.float64(0.9264419827863277)) ('log_Mcent_LRG', np.float64(12.65860185268939)) ('sigma_M_LRG', np.float64(0.20271593571336866))
[Interation 34] ('M_0_LRG', np.float64(12.4527842222771)) ('M_1_LRG', np.float64(13.726480952169885)) ('alpha_LRG', np.float64(1.1476383754152528)) ('f_sigv_LRG', np.float64(0.9268650430904561)) ('log_Mcent_LRG', np.float64(12.656886464533724)) ('sigma_M_LRG', np.float64(0.19355716172859944))
[Interation 34] ('M_0_LRG', np.float64(12.46461639132188)) ('M_1_LRG', np.float64(13.729793827743169)) ('alpha_LRG', np.float64(1.1174491621358558)) ('f_sigv_LRG', np.float64(0.9564154025200452)) ('log_Mcent_LRG', np.float64(12.65072209277321)) ('sigma_M_LRG', np.float64(0.1751730742354058))
[Interation 34] ('M_0_LRG', np.float64(12.411185195946059)) ('M_1_LRG', np.float64(13.722344628708312)) ('alpha_LRG', np.float64(1.152615147764471)) ('f_sigv_LRG', np.float64(0.9301275662551876)) ('log_Mcent_LRG', np.float64(12.637759027842057)) ('sigma_M_LRG', np.float64(0.15309614934188598))
[Interation 34] ('M_0_LRG', np.float64(12.465527857188091)) ('M_1_LRG', np.float64(13.727268890795996)) ('alpha_LRG', np.float64(1.1307740625445157)) ('f_sigv_LRG', np.float64(0.9337372863938246)) ('log_Mcent_LRG', np.float64(12.654680855811094)) ('sigma_M_LRG', np.float64(0.19084759485081143))
[Interation 34] ('M_0_LRG', np.float64(12.499590538208444)) ('M_1_LRG', np.float64(13.74420959894789)) ('alpha_LRG', np.float64(1.1000468958220593)) ('f_sigv_LRG', np.float64(0.9471806193852067)) ('log_Mcent_LRG', np.float64(12.668296684151555)) ('sigma_M_LRG', np.float64(0.21120237259077645))
[Interation 34] ('M_0_LRG', np.float64(12.470347069827879)) ('M_1_LRG', np.float64(13.739855782537186)) ('alpha_LRG', np.float64(1.1178882841654132)) ('f_sigv_LRG', np.float64(0.9585606721565084)) ('log_Mcent_LRG', np.float64(12.666977832499486)) ('sigma_M_LRG', np.float64(0.20039572891612095))
[Interation 34] ('M_0_LRG', np.float64(12.490642137572264)) ('M_1_LRG', np.float64(13.728652842867739)) ('alpha_LRG', np.float64(1.093819969523482)) ('f_sigv_LRG', np.float64(0.953452865717734)) ('log_Mcent_LRG', np.float64(12.644909185408252)) ('sigma_M_LRG', np.float64(0.16428067620637088))
[Interation 34] ('M_0_LRG', np.float64(12.530344961197134)) ('M_1_LRG', np.float64(13.724579762706545)) ('alpha_LRG', np.float64(1.0782211234148393)) ('f_sigv_LRG', np.float64(0.9342560049155738)) ('log_Mcent_LRG', np.float64(12.650158695953346)) ('sigma_M_LRG', np.float64(0.18087356519440567))
[Interation 34] ('M_0_LRG', np.float64(12.490082275637041)) ('M_1_LRG', np.float64(13.728577386805723)) ('alpha_LRG', np.float64(1.1137385652436596)) ('f_sigv_LRG', np.float64(0.9407263717147767)) ('log_Mcent_LRG', np.float64(12.659306782382712)) ('sigma_M_LRG', np.float64(0.19752265854518425))
[Interation 34] ('M_0_LRG', np.float64(12.591041133034082)) ('M_1_LRG', np.float64(13.729815667059162)) ('alpha_LRG', np.float64(1.057185199042831)) ('f_sigv_LRG', np.float64(0.9346478976018868)) ('log_Mcent_LRG', np.float64(12.6665030477754)) ('sigma_M_LRG', np.float64(0.21756699177434607))
[Interation 34] ('M_0_LRG', np.float64(12.571470169485037)) ('M_1_LRG', np.float64(13.723484776001197)) ('alpha_LRG', np.float64(1.0675474052559184)) ('f_sigv_LRG', np.float64(0.9323213237916355)) ('log_Mcent_LRG', np.float64(12.66157755224565)) ('sigma_M_LRG', np.float64(0.20706626594131666))
[Interation 34] chi2=332.3514302384641
[Interation 34] chi2=376.75138898956465
[Interation 34] chi2=303.4790138095493
[Interation 34] chi2=325.9517617028412
[Interation 34] chi2=403.6652238012057
[Interation 34] chi2=342.89184734492886
[Interation 34] chi2=386.9121118893963
[Interation 34] chi2=411.0031586604645
[Interation 34] chi2=372.31924616091067
[Interation 34] chi2=402.11256433155125
[Interation 34] chi2=318.9951235992805
[Interation 34] chi2=350.13888579465635
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_17.npy
Set number of threads to 32
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.616974798904172)) ('M_1_LRG', np.float64(13.708331692408777)) ('alpha_LRG', np.float64(1.0413919276057104)) ('f_sigv_LRG', np.float64(0.9270859639645057)) ('log_Mcent_LRG', np.float64(12.65370914110355)) ('sigma_M_LRG', np.float64(0.19102429123992054))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3139495849609375
Start satellite assignement
Satellite assignement done 0.0721292495727539
LRG mock catalogue done 0.14935660362243652
614300 central galaxies, 85122 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6424727439880371
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_17.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:21
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 36] ('M_0_LRG', np.float64(12.656169529527695)) ('M_1_LRG', np.float64(13.401659612285902)) ('alpha_LRG', np.float64(1.0450826846363357)) ('f_sigv_LRG', np.float64(1.2323390982091476)) ('log_Mcent_LRG', np.float64(12.767325509742527)) ('sigma_M_LRG', np.float64(0.5581078759407434))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 36] ('M_0_LRG', np.float64(12.797158777687745)) ('M_1_LRG', np.float64(13.724222311776)) ('alpha_LRG', np.float64(1.0598385597933442)) ('f_sigv_LRG', np.float64(0.7632968589386555)) ('log_Mcent_LRG', np.float64(12.588822258430637)) ('sigma_M_LRG', np.float64(0.2639092282822166))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 36] ('M_0_LRG', np.float64(12.734542734633731)) ('M_1_LRG', np.float64(13.399793585269775)) ('alpha_LRG', np.float64(1.1097739351772846)) ('f_sigv_LRG', np.float64(0.818730740152845)) ('log_Mcent_LRG', np.float64(12.702615452760272)) ('sigma_M_LRG', np.float64(0.5351095220172871))
[Interation 36] chi2=6565.699970098506
[Interation 36] chi2=2866.5867586490203
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 36] ('M_0_LRG', np.float64(12.66649173866812)) ('M_1_LRG', np.float64(13.953621735074773)) ('alpha_LRG', np.float64(0.9335251892084623)) ('f_sigv_LRG', np.float64(0.8999395174660003)) ('log_Mcent_LRG', np.float64(12.878382478548597)) ('sigma_M_LRG', np.float64(0.5297836129225152))
[Interation 36] chi2=3130.7952446137388
[Interation 36] chi2=1318.569061297788
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.699193312738263)) ('M_1_LRG', np.float64(13.720147354711635)) ('alpha_LRG', np.float64(1.2028929279974554)) ('f_sigv_LRG', np.float64(1.0413791516104904)) ('log_Mcent_LRG', np.float64(12.806350319197271)) ('sigma_M_LRG', np.float64(0.32595479192533017))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.462860190889145)) ('M_1_LRG', np.float64(13.464127708974752)) ('alpha_LRG', np.float64(1.2485886908141575)) ('f_sigv_LRG', np.float64(0.9724476387072198)) ('log_Mcent_LRG', np.float64(12.639992820304323)) ('sigma_M_LRG', np.float64(0.3203384837355804))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.541275102592003)) ('M_1_LRG', np.float64(13.892943196260303)) ('alpha_LRG', np.float64(0.9722339017491219)) ('f_sigv_LRG', np.float64(0.8941029854946814)) ('log_Mcent_LRG', np.float64(12.789975803221449)) ('sigma_M_LRG', np.float64(0.4484718663744851))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.178145223164604)) ('M_1_LRG', np.float64(13.610297638653249)) ('alpha_LRG', np.float64(1.1809953989010193)) ('f_sigv_LRG', np.float64(0.8173916413896523)) ('log_Mcent_LRG', np.float64(12.586910241848111)) ('sigma_M_LRG', np.float64(0.28672456358904774))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.45317562656391)) ('M_1_LRG', np.float64(13.72980526165205)) ('alpha_LRG', np.float64(0.9658760319048527)) ('f_sigv_LRG', np.float64(0.9743490454364908)) ('log_Mcent_LRG', np.float64(12.671376639038348)) ('sigma_M_LRG', np.float64(0.29253285251703487))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.47974783693268)) ('M_1_LRG', np.float64(13.57926508182013)) ('alpha_LRG', np.float64(1.2775946241288647)) ('f_sigv_LRG', np.float64(0.7860625315087982)) ('log_Mcent_LRG', np.float64(12.55057708109002)) ('sigma_M_LRG', np.float64(0.21247387216734864))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.508370559910453)) ('M_1_LRG', np.float64(13.595519451016843)) ('alpha_LRG', np.float64(1.1323580046658495)) ('f_sigv_LRG', np.float64(1.1020045182689802)) ('log_Mcent_LRG', np.float64(12.579719423941073)) ('sigma_M_LRG', np.float64(0.1467092624394144))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.687404323594185)) ('M_1_LRG', np.float64(13.97498448707557)) ('alpha_LRG', np.float64(0.7627986610380824)) ('f_sigv_LRG', np.float64(0.9525342936954685)) ('log_Mcent_LRG', np.float64(12.7292269390102)) ('sigma_M_LRG', np.float64(0.28889087074070796))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.506657979079238)) ('M_1_LRG', np.float64(13.964422905219656)) ('alpha_LRG', np.float64(1.2774494031126102)) ('f_sigv_LRG', np.float64(0.9466465843050375)) ('log_Mcent_LRG', np.float64(12.843809059215133)) ('sigma_M_LRG', np.float64(0.3630705820777903))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.611758265096467)) ('M_1_LRG', np.float64(13.882981420373019)) ('alpha_LRG', np.float64(0.9698790261720737)) ('f_sigv_LRG', np.float64(1.0540367668485968)) ('log_Mcent_LRG', np.float64(12.725043795433578)) ('sigma_M_LRG', np.float64(0.22010107349720492))
[Interation 35] chi2=1681.9014919223825
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.614546335178634)) ('M_1_LRG', np.float64(13.881675929266923)) ('alpha_LRG', np.float64(0.8594187133740421)) ('f_sigv_LRG', np.float64(0.8583469698448892)) ('log_Mcent_LRG', np.float64(12.731866170516168)) ('sigma_M_LRG', np.float64(0.3357416125647398))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.380338248170169)) ('M_1_LRG', np.float64(14.158327303831314)) ('alpha_LRG', np.float64(1.088202914180128)) ('f_sigv_LRG', np.float64(1.1858646801372978)) ('log_Mcent_LRG', np.float64(12.951492176456737)) ('sigma_M_LRG', np.float64(0.393064472466665))
[Interation 35] chi2=3437.805629083845
[Interation 35] chi2=1002.0837014104267
[Interation 35] chi2=756.8126247258675
[Interation 35] chi2=1254.888477255587
[Interation 35] chi2=1516.1825855551658
[Interation 35] chi2=535.1641340729416
[Interation 35] chi2=1142.478844038302
[Interation 35] chi2=1134.7894104390552
[Interation 35] chi2=2082.698689749323
[Interation 35] chi2=584.9087674731252
[Interation 35] chi2=589.4559351675356
[Interation 37] ('M_0_LRG', np.float64(12.627482753545337)) ('M_1_LRG', np.float64(13.734683870128942)) ('alpha_LRG', np.float64(1.0225493372319463)) ('f_sigv_LRG', np.float64(0.9239703864888169)) ('log_Mcent_LRG', np.float64(12.690373662145797)) ('sigma_M_LRG', np.float64(0.27132300258198605))
[Interation 37] ('M_0_LRG', np.float64(12.551135532197941)) ('M_1_LRG', np.float64(13.712535244634761)) ('alpha_LRG', np.float64(1.0695490659556213)) ('f_sigv_LRG', np.float64(0.9239242760461122)) ('log_Mcent_LRG', np.float64(12.640720764758214)) ('sigma_M_LRG', np.float64(0.1636813168362407))
[Interation 37] ('M_0_LRG', np.float64(12.538955275757008)) ('M_1_LRG', np.float64(13.736750997614708)) ('alpha_LRG', np.float64(1.0819528251336206)) ('f_sigv_LRG', np.float64(0.9358683103598076)) ('log_Mcent_LRG', np.float64(12.665890802825482)) ('sigma_M_LRG', np.float64(0.21233800412110687))
[Interation 37] ('M_0_LRG', np.float64(12.495511678712782)) ('M_1_LRG', np.float64(13.726953401044595)) ('alpha_LRG', np.float64(1.121858823638015)) ('f_sigv_LRG', np.float64(0.9399341199972658)) ('log_Mcent_LRG', np.float64(12.660399953238755)) ('sigma_M_LRG', np.float64(0.20044958212543929))
[Interation 37] chi2=399.6699571884093
[Interation 37] chi2=375.52453421077786
[Interation 37] chi2=365.0987077407741
[Interation 37] chi2=392.1392683131172
[Interation 36] ('M_0_LRG', np.float64(12.559979008008924)) ('M_1_LRG', np.float64(13.707054186447358)) ('alpha_LRG', np.float64(1.0821716784481428)) ('f_sigv_LRG', np.float64(0.9224107160843684)) ('log_Mcent_LRG', np.float64(12.660611812797772)) ('sigma_M_LRG', np.float64(0.22757971896027124))
[Interation 36] ('M_0_LRG', np.float64(12.48720281363961)) ('M_1_LRG', np.float64(13.729635417184369)) ('alpha_LRG', np.float64(1.1453549746856837)) ('f_sigv_LRG', np.float64(0.902933243085268)) ('log_Mcent_LRG', np.float64(12.669171945527474)) ('sigma_M_LRG', np.float64(0.2275840022137235))
[Interation 36] ('M_0_LRG', np.float64(12.48207420903017)) ('M_1_LRG', np.float64(13.725651093794355)) ('alpha_LRG', np.float64(1.115294788335677)) ('f_sigv_LRG', np.float64(0.9352095245497778)) ('log_Mcent_LRG', np.float64(12.659028556969945)) ('sigma_M_LRG', np.float64(0.2138684581652805))
[Interation 36] ('M_0_LRG', np.float64(12.551901890459233)) ('M_1_LRG', np.float64(13.734589168224687)) ('alpha_LRG', np.float64(1.0999939375684278)) ('f_sigv_LRG', np.float64(0.9331416817175224)) ('log_Mcent_LRG', np.float64(12.674731884616612)) ('sigma_M_LRG', np.float64(0.22804532831086743))
[Interation 36] ('M_0_LRG', np.float64(12.594418583411562)) ('M_1_LRG', np.float64(13.672834368052623)) ('alpha_LRG', np.float64(1.0830619784018265)) ('f_sigv_LRG', np.float64(0.9090826057370727)) ('log_Mcent_LRG', np.float64(12.618691309531194)) ('sigma_M_LRG', np.float64(0.14609612850762993))
[Interation 36] ('M_0_LRG', np.float64(12.54120345845633)) ('M_1_LRG', np.float64(13.734282831193743)) ('alpha_LRG', np.float64(1.0771898611258641)) ('f_sigv_LRG', np.float64(0.9082335368251038)) ('log_Mcent_LRG', np.float64(12.670946345807067)) ('sigma_M_LRG', np.float64(0.23645935035499227))
[Interation 36] ('M_0_LRG', np.float64(12.549583298426896)) ('M_1_LRG', np.float64(13.709730935577227)) ('alpha_LRG', np.float64(1.0839161768382792)) ('f_sigv_LRG', np.float64(0.9200024655926157)) ('log_Mcent_LRG', np.float64(12.656945239793915)) ('sigma_M_LRG', np.float64(0.21483854522328882))
[Interation 36] ('M_0_LRG', np.float64(12.532857062789242)) ('M_1_LRG', np.float64(13.729772387136395)) ('alpha_LRG', np.float64(1.1029190583046253)) ('f_sigv_LRG', np.float64(0.9135346868451306)) ('log_Mcent_LRG', np.float64(12.666543127919585)) ('sigma_M_LRG', np.float64(0.22162503222077795))
[Interation 36] ('M_0_LRG', np.float64(12.500800938867133)) ('M_1_LRG', np.float64(13.708197275343547)) ('alpha_LRG', np.float64(1.098961960050132)) ('f_sigv_LRG', np.float64(0.9165063585294497)) ('log_Mcent_LRG', np.float64(12.628556881583966)) ('sigma_M_LRG', np.float64(0.1506678464348229))
[Interation 36] ('M_0_LRG', np.float64(12.489413695381867)) ('M_1_LRG', np.float64(13.729674676764484)) ('alpha_LRG', np.float64(1.1309038326451488)) ('f_sigv_LRG', np.float64(0.910385802570288)) ('log_Mcent_LRG', np.float64(12.67220693676306)) ('sigma_M_LRG', np.float64(0.24500743790838136))
[Interation 36] ('M_0_LRG', np.float64(12.574546050089307)) ('M_1_LRG', np.float64(13.69521629848697)) ('alpha_LRG', np.float64(1.0700728626761948)) ('f_sigv_LRG', np.float64(0.9331945164247886)) ('log_Mcent_LRG', np.float64(12.642450347996311)) ('sigma_M_LRG', np.float64(0.18890812213738228))
[Interation 36] ('M_0_LRG', np.float64(12.566171035355366)) ('M_1_LRG', np.float64(13.715437042737815)) ('alpha_LRG', np.float64(1.0988553609742207)) ('f_sigv_LRG', np.float64(0.9314698383707513)) ('log_Mcent_LRG', np.float64(12.66370121683524)) ('sigma_M_LRG', np.float64(0.20439315326639096))
[Interation 36] chi2=368.016087847058
[Interation 36] chi2=401.61095405397134
[Interation 36] chi2=369.349687698322
[Interation 36] chi2=366.59738162672636
[Interation 36] chi2=390.4451557072612
[Interation 36] chi2=402.9494184396288
[Interation 36] chi2=390.00169960990866
[Interation 36] chi2=360.5727050817813
[Interation 36] chi2=348.83035592876456
[Interation 36] chi2=359.4937315537933
[Interation 36] chi2=403.2682772939025
[Interation 36] chi2=382.5459837140954
[Interation 38] ('M_0_LRG', np.float64(12.547897951643769)) ('M_1_LRG', np.float64(13.699911628150712)) ('alpha_LRG', np.float64(1.0942968641258908)) ('f_sigv_LRG', np.float64(0.9294511426594602)) ('log_Mcent_LRG', np.float64(12.628665424472198)) ('sigma_M_LRG', np.float64(0.13615234965737266))
[Interation 38] ('M_0_LRG', np.float64(12.5793658339108)) ('M_1_LRG', np.float64(13.67673584869939)) ('alpha_LRG', np.float64(1.0801223995228153)) ('f_sigv_LRG', np.float64(0.950890372482106)) ('log_Mcent_LRG', np.float64(12.61819436468397)) ('sigma_M_LRG', np.float64(0.12300479820248872))
[Interation 38] ('M_0_LRG', np.float64(12.546061099045032)) ('M_1_LRG', np.float64(13.69874604633211)) ('alpha_LRG', np.float64(1.0951400246082388)) ('f_sigv_LRG', np.float64(0.9398430195985027)) ('log_Mcent_LRG', np.float64(12.6390390928808)) ('sigma_M_LRG', np.float64(0.1640098106036194))
[Interation 38] ('M_0_LRG', np.float64(12.499694222783262)) ('M_1_LRG', np.float64(13.735339303425569)) ('alpha_LRG', np.float64(1.1049948907228238)) ('f_sigv_LRG', np.float64(0.9360949127754801)) ('log_Mcent_LRG', np.float64(12.654499692540012)) ('sigma_M_LRG', np.float64(0.19116287245674035))
[Interation 38] chi2=422.12624409082184
[Interation 38] chi2=338.2324965367369
[Interation 38] chi2=331.1204933705633
[Interation 38] chi2=444.8895562054191
[Interation 37] ('M_0_LRG', np.float64(12.523050859544178)) ('M_1_LRG', np.float64(13.699581326796785)) ('alpha_LRG', np.float64(1.1117778335723023)) ('f_sigv_LRG', np.float64(0.942746759816429)) ('log_Mcent_LRG', np.float64(12.629713035641604)) ('sigma_M_LRG', np.float64(0.13182072957977492))
[Interation 37] ('M_0_LRG', np.float64(12.537796304414782)) ('M_1_LRG', np.float64(13.701987257222592)) ('alpha_LRG', np.float64(1.1096991063352688)) ('f_sigv_LRG', np.float64(0.9436887851783403)) ('log_Mcent_LRG', np.float64(12.635277430081542)) ('sigma_M_LRG', np.float64(0.13527175081266313))
[Interation 37] ('M_0_LRG', np.float64(12.555615745283854)) ('M_1_LRG', np.float64(13.715952573145378)) ('alpha_LRG', np.float64(1.0754887939506905)) ('f_sigv_LRG', np.float64(0.9368267056459716)) ('log_Mcent_LRG', np.float64(12.649998350858471)) ('sigma_M_LRG', np.float64(0.18114203813195895))
[Interation 37] ('M_0_LRG', np.float64(12.592372159399508)) ('M_1_LRG', np.float64(13.717515769860382)) ('alpha_LRG', np.float64(1.0504817944318192)) ('f_sigv_LRG', np.float64(0.9467379382396583)) ('log_Mcent_LRG', np.float64(12.651574992698697)) ('sigma_M_LRG', np.float64(0.17780258027954982))
[Interation 37] ('M_0_LRG', np.float64(12.515125674546946)) ('M_1_LRG', np.float64(13.714134853902529)) ('alpha_LRG', np.float64(1.0991848207221395)) ('f_sigv_LRG', np.float64(0.946368541311275)) ('log_Mcent_LRG', np.float64(12.645722920621699)) ('sigma_M_LRG', np.float64(0.17509312605404997))
[Interation 37] ('M_0_LRG', np.float64(12.553491785364736)) ('M_1_LRG', np.float64(13.698173877038558)) ('alpha_LRG', np.float64(1.1004594194068538)) ('f_sigv_LRG', np.float64(0.9406038949378157)) ('log_Mcent_LRG', np.float64(12.632594634984478)) ('sigma_M_LRG', np.float64(0.13724129103965088))
[Interation 37] ('M_0_LRG', np.float64(12.565024758789212)) ('M_1_LRG', np.float64(13.71220210039238)) ('alpha_LRG', np.float64(1.063566343506981)) ('f_sigv_LRG', np.float64(0.9322418155660083)) ('log_Mcent_LRG', np.float64(12.661664887359468)) ('sigma_M_LRG', np.float64(0.2226998871710712))
[Interation 37] ('M_0_LRG', np.float64(12.58259495396229)) ('M_1_LRG', np.float64(13.712737843418477)) ('alpha_LRG', np.float64(1.0647052374918222)) ('f_sigv_LRG', np.float64(0.9506256183783287)) ('log_Mcent_LRG', np.float64(12.651658248171701)) ('sigma_M_LRG', np.float64(0.1844247368356166))
[Interation 37] ('M_0_LRG', np.float64(12.538500082560297)) ('M_1_LRG', np.float64(13.720203286519945)) ('alpha_LRG', np.float64(1.0810164576679073)) ('f_sigv_LRG', np.float64(0.9445680422399358)) ('log_Mcent_LRG', np.float64(12.655270901281801)) ('sigma_M_LRG', np.float64(0.19377760036087194))
[Interation 37] ('M_0_LRG', np.float64(12.541324532888128)) ('M_1_LRG', np.float64(13.719650766953581)) ('alpha_LRG', np.float64(1.0950478302530249)) ('f_sigv_LRG', np.float64(0.9414778365989137)) ('log_Mcent_LRG', np.float64(12.647349321535158)) ('sigma_M_LRG', np.float64(0.16834856558356415))
[Interation 37] ('M_0_LRG', np.float64(12.511951878657237)) ('M_1_LRG', np.float64(13.727552314180997)) ('alpha_LRG', np.float64(1.1085935113342835)) ('f_sigv_LRG', np.float64(0.9413176156786593)) ('log_Mcent_LRG', np.float64(12.658809397294466)) ('sigma_M_LRG', np.float64(0.20058596995019295))
[Interation 37] ('M_0_LRG', np.float64(12.52002235776736)) ('M_1_LRG', np.float64(13.711125440099465)) ('alpha_LRG', np.float64(1.1081552544076898)) ('f_sigv_LRG', np.float64(0.9362781862322371)) ('log_Mcent_LRG', np.float64(12.642793221638055)) ('sigma_M_LRG', np.float64(0.1649713242894033))
[Interation 37] chi2=359.20006536430856
[Interation 37] chi2=344.46826512239585
[Interation 37] chi2=358.21430643310026
[Interation 37] chi2=408.4078458294567
[Interation 37] chi2=321.6287357637425
[Interation 37] chi2=337.579217890757
[Interation 37] chi2=406.2448432459503
[Interation 37] chi2=355.2464481874181
[Interation 37] chi2=340.9688992419094
[Interation 37] chi2=338.2939260079726
[Interation 37] chi2=349.3810119129592
[Interation 37] chi2=359.2881865814385
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_18.npy
Set number of threads to 32
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.5806128093925)) ('M_1_LRG', np.float64(13.688725894157805)) ('alpha_LRG', np.float64(1.084469435900969)) ('f_sigv_LRG', np.float64(0.9432085274374836)) ('log_Mcent_LRG', np.float64(12.63377785310216)) ('sigma_M_LRG', np.float64(0.14669408330053058))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3355746269226074
Start satellite assignement
Satellite assignement done 0.07410097122192383
LRG mock catalogue done 0.14731073379516602
613249 central galaxies, 86623 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6701748371124268
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_18.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:21
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:21
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 39] ('M_0_LRG', np.float64(12.509198334057217)) ('M_1_LRG', np.float64(13.75937979547942)) ('alpha_LRG', np.float64(1.0789216828520967)) ('f_sigv_LRG', np.float64(0.9374153283654157)) ('log_Mcent_LRG', np.float64(12.666311980642503)) ('sigma_M_LRG', np.float64(0.20240179273476883))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 39] ('M_0_LRG', np.float64(12.395940585813426)) ('M_1_LRG', np.float64(13.784310741641338)) ('alpha_LRG', np.float64(1.1817666914827645)) ('f_sigv_LRG', np.float64(0.959466223135713)) ('log_Mcent_LRG', np.float64(12.73709709774129)) ('sigma_M_LRG', np.float64(0.3052526625857832))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 39] ('M_0_LRG', np.float64(12.5215211375445)) ('M_1_LRG', np.float64(13.707341586933808)) ('alpha_LRG', np.float64(1.1442055989029003)) ('f_sigv_LRG', np.float64(0.9395554773598043)) ('log_Mcent_LRG', np.float64(12.677994979660614)) ('sigma_M_LRG', np.float64(0.24580971169252663))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 39] ('M_0_LRG', np.float64(12.572670134253922)) ('M_1_LRG', np.float64(13.708840175669092)) ('alpha_LRG', np.float64(1.1079538116926666)) ('f_sigv_LRG', np.float64(0.9287582343686882)) ('log_Mcent_LRG', np.float64(12.693338375047311)) ('sigma_M_LRG', np.float64(0.2649451619337642))
[Interation 39] chi2=360.0316928425907
[Interation 39] chi2=387.02706430305204
[Interation 39] chi2=403.9469351812916
[Interation 39] chi2=412.6659685210106
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.578837179145678)) ('M_1_LRG', np.float64(13.752227075259373)) ('alpha_LRG', np.float64(1.0648192784795651)) ('f_sigv_LRG', np.float64(0.9645545399542212)) ('log_Mcent_LRG', np.float64(12.711618765914485)) ('sigma_M_LRG', np.float64(0.29060377881720395))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.47404714375723)) ('M_1_LRG', np.float64(13.751172166524336)) ('alpha_LRG', np.float64(1.0903598777126127)) ('f_sigv_LRG', np.float64(0.9439840299282334)) ('log_Mcent_LRG', np.float64(12.665051663552973)) ('sigma_M_LRG', np.float64(0.20540107335741992))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.515479594011687)) ('M_1_LRG', np.float64(13.692366880276339)) ('alpha_LRG', np.float64(1.1202061346566041)) ('f_sigv_LRG', np.float64(0.9405012666763158)) ('log_Mcent_LRG', np.float64(12.648308903867099)) ('sigma_M_LRG', np.float64(0.2043280908154343))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.49719090662797)) ('M_1_LRG', np.float64(13.766443465878998)) ('alpha_LRG', np.float64(1.0959718430939407)) ('f_sigv_LRG', np.float64(0.9332787097588551)) ('log_Mcent_LRG', np.float64(12.70610775910851)) ('sigma_M_LRG', np.float64(0.26680847862401286))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.58930415338789)) ('M_1_LRG', np.float64(13.767589660124957)) ('alpha_LRG', np.float64(1.0025248697364377)) ('f_sigv_LRG', np.float64(0.9248311300865882)) ('log_Mcent_LRG', np.float64(12.699447483302219)) ('sigma_M_LRG', np.float64(0.2630406806523493))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.556102345509721)) ('M_1_LRG', np.float64(13.717430094929064)) ('alpha_LRG', np.float64(1.118994984838713)) ('f_sigv_LRG', np.float64(0.9335080387860062)) ('log_Mcent_LRG', np.float64(12.674023222122425)) ('sigma_M_LRG', np.float64(0.22954491659030263))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.440985908532596)) ('M_1_LRG', np.float64(13.793742901102533)) ('alpha_LRG', np.float64(1.1287692902610655)) ('f_sigv_LRG', np.float64(0.9623413851775465)) ('log_Mcent_LRG', np.float64(12.697804939664481)) ('sigma_M_LRG', np.float64(0.2511777013999992))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.442754674870399)) ('M_1_LRG', np.float64(13.707161139802912)) ('alpha_LRG', np.float64(1.1575101636515237)) ('f_sigv_LRG', np.float64(0.9127159646588298)) ('log_Mcent_LRG', np.float64(12.623169672153388)) ('sigma_M_LRG', np.float64(0.1569971207203391))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.410857477312478)) ('M_1_LRG', np.float64(13.756441229564741)) ('alpha_LRG', np.float64(1.1722180582219268)) ('f_sigv_LRG', np.float64(0.9162965128723236)) ('log_Mcent_LRG', np.float64(12.681040857490833)) ('sigma_M_LRG', np.float64(0.23663830408496017))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.464655517465767)) ('M_1_LRG', np.float64(13.74630922817256)) ('alpha_LRG', np.float64(1.1762661191689376)) ('f_sigv_LRG', np.float64(0.9607462306189128)) ('log_Mcent_LRG', np.float64(12.718718854241107)) ('sigma_M_LRG', np.float64(0.2975468695845771))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.613496268281798)) ('M_1_LRG', np.float64(13.72965669610733)) ('alpha_LRG', np.float64(1.0527520662835514)) ('f_sigv_LRG', np.float64(0.9578347509402093)) ('log_Mcent_LRG', np.float64(12.687479767411174)) ('sigma_M_LRG', np.float64(0.2411280546819194))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.514780609173396)) ('M_1_LRG', np.float64(13.772039679379036)) ('alpha_LRG', np.float64(1.0510328241404363)) ('f_sigv_LRG', np.float64(0.9521509067086958)) ('log_Mcent_LRG', np.float64(12.671931505060277)) ('sigma_M_LRG', np.float64(0.21813987847831556))
[Interation 38] chi2=375.67934203974045
[Interation 38] chi2=339.7051008106434
[Interation 38] chi2=355.6119889637301
[Interation 38] chi2=354.6603362888621
[Interation 38] chi2=336.44769317247307
[Interation 38] chi2=393.3114089053731
[Interation 38] chi2=414.2060820156836
[Interation 38] chi2=334.985470123649
[Interation 38] chi2=354.5113654430021
[Interation 38] chi2=451.02734663143127
[Interation 38] chi2=378.67215183801864
[Interation 38] chi2=354.8813194033631
[Interation 40] ('M_0_LRG', np.float64(12.515578348261931)) ('M_1_LRG', np.float64(13.752060728241789)) ('alpha_LRG', np.float64(1.0944506708608899)) ('f_sigv_LRG', np.float64(0.9371059086613105)) ('log_Mcent_LRG', np.float64(12.690126448631538)) ('sigma_M_LRG', np.float64(0.2548406397244185))
[Interation 40] ('M_0_LRG', np.float64(12.517147556056619)) ('M_1_LRG', np.float64(13.722007104981369)) ('alpha_LRG', np.float64(1.1036160167992075)) ('f_sigv_LRG', np.float64(0.9351438914762334)) ('log_Mcent_LRG', np.float64(12.664132477254583)) ('sigma_M_LRG', np.float64(0.21962065605870457))
[Interation 40] ('M_0_LRG', np.float64(12.472430535839568)) ('M_1_LRG', np.float64(13.730065721836633)) ('alpha_LRG', np.float64(1.1305301913988464)) ('f_sigv_LRG', np.float64(0.9317843520908526)) ('log_Mcent_LRG', np.float64(12.659346852372776)) ('sigma_M_LRG', np.float64(0.20634455132362745))
[Interation 40] ('M_0_LRG', np.float64(12.528424361010776)) ('M_1_LRG', np.float64(13.728232284293462)) ('alpha_LRG', np.float64(1.0983610753723614)) ('f_sigv_LRG', np.float64(0.9391197868752836)) ('log_Mcent_LRG', np.float64(12.663911165182286)) ('sigma_M_LRG', np.float64(0.21192695348248752))
[Interation 40] chi2=394.08662415285715
[Interation 40] chi2=390.9478566875635
[Interation 40] chi2=382.86762856673005
[Interation 40] chi2=341.36291802276844
[Interation 39] ('M_0_LRG', np.float64(12.499593609906274)) ('M_1_LRG', np.float64(13.748612745762244)) ('alpha_LRG', np.float64(1.1076773248011422)) ('f_sigv_LRG', np.float64(0.9493615012566164)) ('log_Mcent_LRG', np.float64(12.67964682761808)) ('sigma_M_LRG', np.float64(0.23103666629931963))
[Interation 39] ('M_0_LRG', np.float64(12.516266381487236)) ('M_1_LRG', np.float64(13.728948564186537)) ('alpha_LRG', np.float64(1.1052563042953663)) ('f_sigv_LRG', np.float64(0.9437592858851568)) ('log_Mcent_LRG', np.float64(12.660258266714738)) ('sigma_M_LRG', np.float64(0.2006791819061602))
[Interation 39] ('M_0_LRG', np.float64(12.503599999993673)) ('M_1_LRG', np.float64(13.75915436073888)) ('alpha_LRG', np.float64(1.0962096429076986)) ('f_sigv_LRG', np.float64(0.9437145169840203)) ('log_Mcent_LRG', np.float64(12.690575585499966)) ('sigma_M_LRG', np.float64(0.2490570951646523))
[Interation 39] ('M_0_LRG', np.float64(12.57828124099802)) ('M_1_LRG', np.float64(13.73930036805137)) ('alpha_LRG', np.float64(1.0659347081719255)) ('f_sigv_LRG', np.float64(0.93199273711309)) ('log_Mcent_LRG', np.float64(12.678985859630483)) ('sigma_M_LRG', np.float64(0.23768342113139562))
[Interation 39] ('M_0_LRG', np.float64(12.505643449306032)) ('M_1_LRG', np.float64(13.713873020350798)) ('alpha_LRG', np.float64(1.113352528273124)) ('f_sigv_LRG', np.float64(0.9363528872336327)) ('log_Mcent_LRG', np.float64(12.648266875803953)) ('sigma_M_LRG', np.float64(0.1873941961074067))
[Interation 39] ('M_0_LRG', np.float64(12.48357322702144)) ('M_1_LRG', np.float64(13.745047242693298)) ('alpha_LRG', np.float64(1.1109996549516543)) ('f_sigv_LRG', np.float64(0.9367131769165723)) ('log_Mcent_LRG', np.float64(12.673281180337984)) ('sigma_M_LRG', np.float64(0.221050195628527))
[Interation 39] ('M_0_LRG', np.float64(12.483580902956621)) ('M_1_LRG', np.float64(13.725492511590904)) ('alpha_LRG', np.float64(1.117935613003007)) ('f_sigv_LRG', np.float64(0.9410544885566667)) ('log_Mcent_LRG', np.float64(12.656195210724322)) ('sigma_M_LRG', np.float64(0.19926456172441703))
[Interation 39] ('M_0_LRG', np.float64(12.52632468722208)) ('M_1_LRG', np.float64(13.723910365750639)) ('alpha_LRG', np.float64(1.0990573263318522)) ('f_sigv_LRG', np.float64(0.9399031610957002)) ('log_Mcent_LRG', np.float64(12.662690549349696)) ('sigma_M_LRG', np.float64(0.21234411176906587))
[Interation 39] ('M_0_LRG', np.float64(12.501428731520422)) ('M_1_LRG', np.float64(13.733551066381072)) ('alpha_LRG', np.float64(1.1108667751137102)) ('f_sigv_LRG', np.float64(0.9386756200693575)) ('log_Mcent_LRG', np.float64(12.669846758111015)) ('sigma_M_LRG', np.float64(0.21974583610940585))
[Interation 39] ('M_0_LRG', np.float64(12.519469175868716)) ('M_1_LRG', np.float64(13.73130079683824)) ('alpha_LRG', np.float64(1.0863294156900507)) ('f_sigv_LRG', np.float64(0.9332728026592473)) ('log_Mcent_LRG', np.float64(12.66456421429408)) ('sigma_M_LRG', np.float64(0.21639086824603493))
[Interation 39] ('M_0_LRG', np.float64(12.510403711079356)) ('M_1_LRG', np.float64(13.72022771482258)) ('alpha_LRG', np.float64(1.0928269080711486)) ('f_sigv_LRG', np.float64(0.9382992337725008)) ('log_Mcent_LRG', np.float64(12.657222134092475)) ('sigma_M_LRG', np.float64(0.20677899359250063))
[Interation 39] ('M_0_LRG', np.float64(12.46624917034577)) ('M_1_LRG', np.float64(13.741876415440363)) ('alpha_LRG', np.float64(1.124450244248595)) ('f_sigv_LRG', np.float64(0.9373802942270429)) ('log_Mcent_LRG', np.float64(12.665213606597451)) ('sigma_M_LRG', np.float64(0.21256010685882687))
[Interation 39] chi2=383.91108223745135
[Interation 39] chi2=304.6717932419902
[Interation 39] chi2=342.2601055658602
[Interation 39] chi2=399.3826642774416
[Interation 39] chi2=345.1995540590231
[Interation 39] chi2=345.4308830429299
[Interation 39] chi2=361.43368485803506
[Interation 39] chi2=374.3935046278333
[Interation 39] chi2=347.86439653869996
[Interation 39] chi2=367.41055533453243
[Interation 39] chi2=316.85413996473983
[Interation 39] chi2=378.1548209189906
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_19.npy
Set number of threads to 32
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.519062358645758)) ('M_1_LRG', np.float64(13.71175115124799)) ('alpha_LRG', np.float64(1.104469357362813)) ('f_sigv_LRG', np.float64(0.9351365828068532)) ('log_Mcent_LRG', np.float64(12.65918636266224)) ('sigma_M_LRG', np.float64(0.21222569193650653))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3289604187011719
Start satellite assignement
Satellite assignement done 0.07486867904663086
LRG mock catalogue done 0.15009021759033203
610175 central galaxies, 88951 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6650083065032959
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.8-1.1_dv-obs_19.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:28
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:28
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:28
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:28
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:28
Load rppi measurements at z0.8-1.1 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.950 ...
Done took 00:00:24
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.95 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load correlation matrix for LRG at z0.95 ...
Load smu measurements at z0.8-1.1 for LRG...
Load correlation matrix for LRG at z0.95 ...
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 41] ('M_0_LRG', np.float64(12.550817980562435)) ('M_1_LRG', np.float64(13.567252994209925)) ('alpha_LRG', np.float64(1.0324953537815902)) ('f_sigv_LRG', np.float64(1.0796577831016938)) ('log_Mcent_LRG', np.float64(12.721319601115608)) ('sigma_M_LRG', np.float64(0.5474560062581566))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 41] ('M_0_LRG', np.float64(12.471392364642563)) ('M_1_LRG', np.float64(13.4802446675893)) ('alpha_LRG', np.float64(1.0259823060331832)) ('f_sigv_LRG', np.float64(0.9353126788584596)) ('log_Mcent_LRG', np.float64(12.839968533153723)) ('sigma_M_LRG', np.float64(0.4784162145191265))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 41] ('M_0_LRG', np.float64(12.43538702169176)) ('M_1_LRG', np.float64(13.447676394435383)) ('alpha_LRG', np.float64(0.975579781315131)) ('f_sigv_LRG', np.float64(1.0285902992499578)) ('log_Mcent_LRG', np.float64(12.804041750575683)) ('sigma_M_LRG', np.float64(0.5913552893605486))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 41] ('M_0_LRG', np.float64(12.446899567974718)) ('M_1_LRG', np.float64(13.499345774413495)) ('alpha_LRG', np.float64(0.9728353104425932)) ('f_sigv_LRG', np.float64(1.0503173662227319)) ('log_Mcent_LRG', np.float64(12.691425509119734)) ('sigma_M_LRG', np.float64(0.45618238555133106))
[Interation 41] chi2=4613.488635339078
[Interation 41] chi2=10174.24450672548
[Interation 41] chi2=4560.1446285880065
[Interation 41] chi2=2916.021361434024
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.7546041798986)) ('M_1_LRG', np.float64(13.741171119888605)) ('alpha_LRG', np.float64(0.9425962504102783)) ('f_sigv_LRG', np.float64(0.91208701979418)) ('log_Mcent_LRG', np.float64(12.632475000758873)) ('sigma_M_LRG', np.float64(0.21828209571730128))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.470466250462318)) ('M_1_LRG', np.float64(13.913710397718896)) ('alpha_LRG', np.float64(1.0048614689193016)) ('f_sigv_LRG', np.float64(0.943677406086946)) ('log_Mcent_LRG', np.float64(12.760480237573283)) ('sigma_M_LRG', np.float64(0.31295891081038457))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.595732266744905)) ('M_1_LRG', np.float64(13.733501634899739)) ('alpha_LRG', np.float64(1.0374424829273918)) ('f_sigv_LRG', np.float64(0.9573912306996839)) ('log_Mcent_LRG', np.float64(12.714829909689113)) ('sigma_M_LRG', np.float64(0.34257149463075887))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.363108173864672)) ('M_1_LRG', np.float64(14.053769238571974)) ('alpha_LRG', np.float64(1.027072926908368)) ('f_sigv_LRG', np.float64(1.0601176681304565)) ('log_Mcent_LRG', np.float64(12.841058246749347)) ('sigma_M_LRG', np.float64(0.4061823030661246))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.518383298903684)) ('M_1_LRG', np.float64(13.869809746077271)) ('alpha_LRG', np.float64(1.0171958576092208)) ('f_sigv_LRG', np.float64(1.1274317459834815)) ('log_Mcent_LRG', np.float64(12.874277430905078)) ('sigma_M_LRG', np.float64(0.48249151751901076))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.613284668943875)) ('M_1_LRG', np.float64(13.797340415640457)) ('alpha_LRG', np.float64(1.0075690958283547)) ('f_sigv_LRG', np.float64(1.090928810046184)) ('log_Mcent_LRG', np.float64(12.672537065345685)) ('sigma_M_LRG', np.float64(0.22650961773462713))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.615391049749675)) ('M_1_LRG', np.float64(13.897888645739906)) ('alpha_LRG', np.float64(1.0913489853148295)) ('f_sigv_LRG', np.float64(1.0317931071628004)) ('log_Mcent_LRG', np.float64(12.96025159299317)) ('sigma_M_LRG', np.float64(0.5780723799381692))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.487435672121789)) ('M_1_LRG', np.float64(13.893415814867353)) ('alpha_LRG', np.float64(0.9635506626859989)) ('f_sigv_LRG', np.float64(1.0567367083711876)) ('log_Mcent_LRG', np.float64(12.655630280726408)) ('sigma_M_LRG', np.float64(0.14786302468300705))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.684001978428483)) ('M_1_LRG', np.float64(13.727972881438388)) ('alpha_LRG', np.float64(0.9949346110120524)) ('f_sigv_LRG', np.float64(0.8346490839924354)) ('log_Mcent_LRG', np.float64(12.751104726914646)) ('sigma_M_LRG', np.float64(0.34255489753014934))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.669385233541089)) ('M_1_LRG', np.float64(14.082407500375119)) ('alpha_LRG', np.float64(0.8257821549951361)) ('f_sigv_LRG', np.float64(0.9308448632531429)) ('log_Mcent_LRG', np.float64(12.817534689317425)) ('sigma_M_LRG', np.float64(0.35765127087538173))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.423843897767528)) ('M_1_LRG', np.float64(13.921956739471685)) ('alpha_LRG', np.float64(1.1280668413308206)) ('f_sigv_LRG', np.float64(0.9676015303002876)) ('log_Mcent_LRG', np.float64(12.793423009110663)) ('sigma_M_LRG', np.float64(0.32256710911449826))
Apply vsmear for LRG at z0.8-1.1
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.299489995486521)) ('M_1_LRG', np.float64(13.938731645796)) ('alpha_LRG', np.float64(1.1520815102815958)) ('f_sigv_LRG', np.float64(1.1345255975974657)) ('log_Mcent_LRG', np.float64(12.82135179642511)) ('sigma_M_LRG', np.float64(0.35086225598398557))
[Interation 40] chi2=586.1638541408682
[Interation 40] chi2=1008.6869120804206
[Interation 40] chi2=949.8626564868835
[Interation 40] chi2=964.3989798146235
[Interation 40] chi2=1305.087330009695
[Interation 40] chi2=536.967355486176
[Interation 40] chi2=838.1578035369598
[Interation 40] chi2=679.9536749259084
[Interation 40] chi2=701.0696110174844
[Interation 40] chi2=575.4427892029036
[Interation 40] chi2=856.779718541759
[Interation 40] chi2=882.2408176436265
[Interation 42] ('M_0_LRG', np.float64(12.436006172390046)) ('M_1_LRG', np.float64(13.744889751297599)) ('alpha_LRG', np.float64(1.1511041327036429)) ('f_sigv_LRG', np.float64(0.925816839315446)) ('log_Mcent_LRG', np.float64(12.679437656156598)) ('sigma_M_LRG', np.float64(0.24881520739729873))
[Interation 42] ('M_0_LRG', np.float64(12.479388801323202)) ('M_1_LRG', np.float64(13.758911199636545)) ('alpha_LRG', np.float64(1.1297788510476616)) ('f_sigv_LRG', np.float64(0.9708068211553098)) ('log_Mcent_LRG', np.float64(12.712955543045023)) ('sigma_M_LRG', np.float64(0.2904714166364073))
[Interation 42] ('M_0_LRG', np.float64(12.467311271387068)) ('M_1_LRG', np.float64(13.737733337315069)) ('alpha_LRG', np.float64(1.146143010862121)) ('f_sigv_LRG', np.float64(0.9362512268258032)) ('log_Mcent_LRG', np.float64(12.671602560845697)) ('sigma_M_LRG', np.float64(0.2327144845130082))
[Interation 42] ('M_0_LRG', np.float64(12.530175719734036)) ('M_1_LRG', np.float64(13.726619132597339)) ('alpha_LRG', np.float64(1.0883933422224479)) ('f_sigv_LRG', np.float64(0.94965683876148)) ('log_Mcent_LRG', np.float64(12.662850671766002)) ('sigma_M_LRG', np.float64(0.21004713980180323))
[Interation 42] chi2=400.4515230264597
[Interation 42] chi2=297.4137621683817
[Interation 42] chi2=372.639152052538
[Interation 42] chi2=417.3243836041591
[Interation 41] ('M_0_LRG', np.float64(12.626325835779278)) ('M_1_LRG', np.float64(13.725068407233433)) ('alpha_LRG', np.float64(1.0631088846511605)) ('f_sigv_LRG', np.float64(0.9287780260428782)) ('log_Mcent_LRG', np.float64(12.687550527020248)) ('sigma_M_LRG', np.float64(0.25277538427444723))
[Interation 41] ('M_0_LRG', np.float64(12.421214610839002)) ('M_1_LRG', np.float64(13.759556488959452)) ('alpha_LRG', np.float64(1.143881375499756)) ('f_sigv_LRG', np.float64(0.9201997008429134)) ('log_Mcent_LRG', np.float64(12.666341037672368)) ('sigma_M_LRG', np.float64(0.1987797698092612))
[Interation 41] ('M_0_LRG', np.float64(12.536439041455436)) ('M_1_LRG', np.float64(13.684315369509493)) ('alpha_LRG', np.float64(1.1208244627005954)) ('f_sigv_LRG', np.float64(0.9259525621649246)) ('log_Mcent_LRG', np.float64(12.628805125019278)) ('sigma_M_LRG', np.float64(0.15470275713083292))
[Interation 41] ('M_0_LRG', np.float64(12.44711267945411)) ('M_1_LRG', np.float64(13.739062357880409)) ('alpha_LRG', np.float64(1.1506056112934624)) ('f_sigv_LRG', np.float64(0.9199334649477114)) ('log_Mcent_LRG', np.float64(12.663817570299177)) ('sigma_M_LRG', np.float64(0.2131197873381328))
[Interation 41] ('M_0_LRG', np.float64(12.510002844119755)) ('M_1_LRG', np.float64(13.71367876804662)) ('alpha_LRG', np.float64(1.108778761492414)) ('f_sigv_LRG', np.float64(0.9363816903767872)) ('log_Mcent_LRG', np.float64(12.647214137564687)) ('sigma_M_LRG', np.float64(0.18089243544875833))
[Interation 41] ('M_0_LRG', np.float64(12.415762135185092)) ('M_1_LRG', np.float64(13.756537119629531)) ('alpha_LRG', np.float64(1.1695295568854827)) ('f_sigv_LRG', np.float64(0.923688263388358)) ('log_Mcent_LRG', np.float64(12.6828545752181)) ('sigma_M_LRG', np.float64(0.23781961964909304))
[Interation 41] ('M_0_LRG', np.float64(12.442988231237276)) ('M_1_LRG', np.float64(13.754159210393487)) ('alpha_LRG', np.float64(1.1277005684812462)) ('f_sigv_LRG', np.float64(0.9403461972958189)) ('log_Mcent_LRG', np.float64(12.664582264347327)) ('sigma_M_LRG', np.float64(0.20863825116881612))
[Interation 41] ('M_0_LRG', np.float64(12.494979754227964)) ('M_1_LRG', np.float64(13.718118599536533)) ('alpha_LRG', np.float64(1.110787615928923)) ('f_sigv_LRG', np.float64(0.9404704776732141)) ('log_Mcent_LRG', np.float64(12.642497359358273)) ('sigma_M_LRG', np.float64(0.17576944316893056))
[Interation 41] ('M_0_LRG', np.float64(12.485517842116217)) ('M_1_LRG', np.float64(13.734145635687142)) ('alpha_LRG', np.float64(1.127628056399664)) ('f_sigv_LRG', np.float64(0.9284221914326881)) ('log_Mcent_LRG', np.float64(12.664254674116652)) ('sigma_M_LRG', np.float64(0.2061864601147052))
[Interation 41] ('M_0_LRG', np.float64(12.467983118729986)) ('M_1_LRG', np.float64(13.748796654409562)) ('alpha_LRG', np.float64(1.1440928504446748)) ('f_sigv_LRG', np.float64(0.9147227536560519)) ('log_Mcent_LRG', np.float64(12.681202851154076)) ('sigma_M_LRG', np.float64(0.24600894358781866))
[Interation 41] ('M_0_LRG', np.float64(12.41848589357119)) ('M_1_LRG', np.float64(13.73643050164835)) ('alpha_LRG', np.float64(1.1637620313771937)) ('f_sigv_LRG', np.float64(0.9175451346672846)) ('log_Mcent_LRG', np.float64(12.655198183263328)) ('sigma_M_LRG', np.float64(0.18932550971397788))
[Interation 41] ('M_0_LRG', np.float64(12.463411117012397)) ('M_1_LRG', np.float64(13.727921478341088)) ('alpha_LRG', np.float64(1.142139438210037)) ('f_sigv_LRG', np.float64(0.928777750939193)) ('log_Mcent_LRG', np.float64(12.659691149270637)) ('sigma_M_LRG', np.float64(0.20716951543294843))
[Interation 41] chi2=309.51259003278847
[Interation 41] chi2=379.49132833355077
[Interation 41] chi2=360.4252189499425
[Interation 41] chi2=372.5152344962435
[Interation 41] chi2=334.6356500293742
[Interation 41] chi2=414.65297988329934
[Interation 41] chi2=346.3252176452323
[Interation 41] chi2=330.63379578130076
[Interation 41] chi2=321.07744189409163
[Interation 41] chi2=405.4007557554471
[Interation 41] chi2=373.9302620188317
[Interation 41] chi2=359.561613758494
[Interation 43] ('M_0_LRG', np.float64(12.504742167200225)) ('M_1_LRG', np.float64(13.730317413126802)) ('alpha_LRG', np.float64(1.1216491278745173)) ('f_sigv_LRG', np.float64(0.9287232626000983)) ('log_Mcent_LRG', np.float64(12.67222561202266)) ('sigma_M_LRG', np.float64(0.23890706384017574))
[Interation 43] ('M_0_LRG', np.float64(12.475559833395351)) ('M_1_LRG', np.float64(13.729732762094756)) ('alpha_LRG', np.float64(1.1280001935632955)) ('f_sigv_LRG', np.float64(0.9407233802872094)) ('log_Mcent_LRG', np.float64(12.659709619305684)) ('sigma_M_LRG', np.float64(0.20715789965860631))
[Interation 43] ('M_0_LRG', np.float64(12.485756396818052)) ('M_1_LRG', np.float64(13.716240874592144)) ('alpha_LRG', np.float64(1.1314104227983985)) ('f_sigv_LRG', np.float64(0.9350902858907109)) ('log_Mcent_LRG', np.float64(12.641628923910869)) ('sigma_M_LRG', np.float64(0.17081863023976573))
[Interation 43] ('M_0_LRG', np.float64(12.461994956018073)) ('M_1_LRG', np.float64(13.735387039288117)) ('alpha_LRG', np.float64(1.1520504991571985)) ('f_sigv_LRG', np.float64(0.938790987032599)) ('log_Mcent_LRG', np.float64(12.664876941276507)) ('sigma_M_LRG', np.float64(0.21068329450452405))
[Interation 43] chi2=424.62678136371073
[Interation 43] chi2=399.0964314123208
[Interation 43] chi2=296.1254570847418
[Interation 43] chi2=364.47655949626363
[Interation 42] ('M_0_LRG', np.float64(12.5005465954897)) ('M_1_LRG', np.float64(13.71278654661973)) ('alpha_LRG', np.float64(1.1254642791046892)) ('f_sigv_LRG', np.float64(0.9259358570883531)) ('log_Mcent_LRG', np.float64(12.644495280242847)) ('sigma_M_LRG', np.float64(0.1745134162384167))
[Interation 42] ('M_0_LRG', np.float64(12.523277476108186)) ('M_1_LRG', np.float64(13.72279542518023)) ('alpha_LRG', np.float64(1.1189077307298603)) ('f_sigv_LRG', np.float64(0.9366834410044672)) ('log_Mcent_LRG', np.float64(12.659178434730446)) ('sigma_M_LRG', np.float64(0.202919842068238))
[Interation 42] ('M_0_LRG', np.float64(12.498883346496333)) ('M_1_LRG', np.float64(13.719816897436399)) ('alpha_LRG', np.float64(1.127416926928758)) ('f_sigv_LRG', np.float64(0.9529946038607654)) ('log_Mcent_LRG', np.float64(12.651864071641851)) ('sigma_M_LRG', np.float64(0.18121090570351395))
[Interation 42] ('M_0_LRG', np.float64(12.446831588669436)) ('M_1_LRG', np.float64(13.728340527349925)) ('alpha_LRG', np.float64(1.1427510153465494)) ('f_sigv_LRG', np.float64(0.9469673580843103)) ('log_Mcent_LRG', np.float64(12.644359557262044)) ('sigma_M_LRG', np.float64(0.16627127220736526))
[Interation 42] ('M_0_LRG', np.float64(12.448637974565722)) ('M_1_LRG', np.float64(13.727083801546497)) ('alpha_LRG', np.float64(1.1473396488751446)) ('f_sigv_LRG', np.float64(0.9508608662346796)) ('log_Mcent_LRG', np.float64(12.647811840527053)) ('sigma_M_LRG', np.float64(0.1703622108870042))
[Interation 42] ('M_0_LRG', np.float64(12.489449142022247)) ('M_1_LRG', np.float64(13.708190737038926)) ('alpha_LRG', np.float64(1.1248432748461252)) ('f_sigv_LRG', np.float64(0.9424769494210103)) ('log_Mcent_LRG', np.float64(12.639896477852712)) ('sigma_M_LRG', np.float64(0.1683943479142626))
[Interation 42] ('M_0_LRG', np.float64(12.499350039695944)) ('M_1_LRG', np.float64(13.725429613338576)) ('alpha_LRG', np.float64(1.111464060026155)) ('f_sigv_LRG', np.float64(0.9461076091067178)) ('log_Mcent_LRG', np.float64(12.655684421566045)) ('sigma_M_LRG', np.float64(0.19148334480213036))
[Interation 42] ('M_0_LRG', np.float64(12.434554319991562)) ('M_1_LRG', np.float64(13.719962159076234)) ('alpha_LRG', np.float64(1.1691312033352648)) ('f_sigv_LRG', np.float64(0.9311126238680802)) ('log_Mcent_LRG', np.float64(12.64608809807207)) ('sigma_M_LRG', np.float64(0.1776227969038049))
[Interation 42] ('M_0_LRG', np.float64(12.51627264598328)) ('M_1_LRG', np.float64(13.702454865711132)) ('alpha_LRG', np.float64(1.1389442043938083)) ('f_sigv_LRG', np.float64(0.9440107267174533)) ('log_Mcent_LRG', np.float64(12.650136525228481)) ('sigma_M_LRG', np.float64(0.1865786396488484))
[Interation 42] ('M_0_LRG', np.float64(12.488385942746774)) ('M_1_LRG', np.float64(13.725401516992846)) ('alpha_LRG', np.float64(1.1204964713353824)) ('f_sigv_LRG', np.float64(0.9354210596790058)) ('log_Mcent_LRG', np.float64(12.65420187197318)) ('sigma_M_LRG', np.float64(0.18937316393056902))
[Interation 42] ('M_0_LRG', np.float64(12.48039374410746)) ('M_1_LRG', np.float64(13.72018597294146)) ('alpha_LRG', np.float64(1.1240304679992017)) ('f_sigv_LRG', np.float64(0.9393084594049688)) ('log_Mcent_LRG', np.float64(12.644631369049439)) ('sigma_M_LRG', np.float64(0.1753160677936184))
[Interation 42] ('M_0_LRG', np.float64(12.485307190651838)) ('M_1_LRG', np.float64(13.71334035191754)) ('alpha_LRG', np.float64(1.129321710910075)) ('f_sigv_LRG', np.float64(0.9308304405814801)) ('log_Mcent_LRG', np.float64(12.645489066131697)) ('sigma_M_LRG', np.float64(0.1772423047145067))
[Interation 42] chi2=336.45337782201244
[Interation 42] chi2=394.75663952377124
[Interation 42] chi2=331.6164087739038
[Interation 42] chi2=356.8322839149469
[Interation 42] chi2=366.85620373824304
[Interation 42] chi2=340.36378336420233
[Interation 42] chi2=317.9446814987298
[Interation 42] chi2=383.3129810153234
[Interation 42] chi2=428.5922013230352
[Interation 42] chi2=369.6392191537928
[Interation 42] chi2=323.7669653296249
[Interation 42] chi2=314.00194016085237
Load data vector for LRG
Load rppi measurements at z0.8-1.1 for LRG...
Load smu measurements at z0.8-1.1 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.476534190863088)) ('M_1_LRG', np.float64(13.719191074498347)) ('alpha_LRG', np.float64(1.117062979669075)) ('f_sigv_LRG', np.float64(0.9412428111356211)) ('log_Mcent_LRG', np.float64(12.638001139307935)) ('sigma_M_LRG', np.float64(0.15688661460854703))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.297940731048584
Start satellite assignement
Satellite assignement done 0.07422494888305664
LRG mock catalogue done 0.14687061309814453
611455 central galaxies, 88401 satellites, fraction of satellite 0.13 
Done overall time  LRG 0.6153409481048584
