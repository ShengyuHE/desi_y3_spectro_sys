[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_03.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_03.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:16
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:17
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:18
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:19
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:21
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Load smu measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:26
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Load smu measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:26
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:01
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Load smu measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py:499: NumbaPerformanceWarning: 
The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.

To find out why, try turning on parallel diagnostics, see https://numba.readthedocs.io/en/stable/user/parallel.html#diagnostics for help.

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 415:
@njit(fastmath=True)
def get_etavir_nfw(c): 
^

  etaVir = get_etavir_nfw(c[i])*nfw_rescale
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.761838992990533)) ('M_1_LRG', np.float64(13.905430128666032)) ('alpha_LRG', np.float64(1.05984096072923)) ('f_sigv_LRG', np.float64(0.8555179196181633)) ('log_Mcent_LRG', np.float64(12.78793425629149)) ('sigma_M_LRG', np.float64(0.311306553083072))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.712903092526822)) ('M_1_LRG', np.float64(13.913567987143386)) ('alpha_LRG', np.float64(1.0413573029986356)) ('f_sigv_LRG', np.float64(0.8651525266769068)) ('log_Mcent_LRG', np.float64(12.794944509196968)) ('sigma_M_LRG', np.float64(0.3128762564906393))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.681042121488606)) ('M_1_LRG', np.float64(13.878917013571456)) ('alpha_LRG', np.float64(1.0891859908698636)) ('f_sigv_LRG', np.float64(0.8727073398095753)) ('log_Mcent_LRG', np.float64(12.763638667863512)) ('sigma_M_LRG', np.float64(0.278378097850021))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.709911493600513)) ('M_1_LRG', np.float64(13.885444998906294)) ('alpha_LRG', np.float64(1.104637447844473)) ('f_sigv_LRG', np.float64(0.8375708877863914)) ('log_Mcent_LRG', np.float64(12.774652713152003)) ('sigma_M_LRG', np.float64(0.3110534757638233))
[Interation 1] chi2=416.2461031155484
[Interation 1] chi2=296.4553163707891
[Interation 1] chi2=318.0341589626958
[Interation 1] chi2=361.6701075066546
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.621076104226411)) ('M_1_LRG', np.float64(13.893227870961493)) ('alpha_LRG', np.float64(1.1351174987975567)) ('f_sigv_LRG', np.float64(0.851943209465669)) ('log_Mcent_LRG', np.float64(12.756889106852839)) ('sigma_M_LRG', np.float64(0.27894965189840953))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.807029201411057)) ('M_1_LRG', np.float64(13.902781352601103)) ('alpha_LRG', np.float64(1.0299448842307346)) ('f_sigv_LRG', np.float64(0.8535168760250247)) ('log_Mcent_LRG', np.float64(12.778210721284943)) ('sigma_M_LRG', np.float64(0.28887385918105535))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.778226228111716)) ('M_1_LRG', np.float64(13.880992710000463)) ('alpha_LRG', np.float64(1.05135762124911)) ('f_sigv_LRG', np.float64(0.8527117140018843)) ('log_Mcent_LRG', np.float64(12.789295066319001)) ('sigma_M_LRG', np.float64(0.3317038016667344))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.673502207342102)) ('M_1_LRG', np.float64(13.90335165289123)) ('alpha_LRG', np.float64(1.0972175678729388)) ('f_sigv_LRG', np.float64(0.8611994213660064)) ('log_Mcent_LRG', np.float64(12.773752390016329)) ('sigma_M_LRG', np.float64(0.2944387847861909))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.631119158449783)) ('M_1_LRG', np.float64(13.868370897760867)) ('alpha_LRG', np.float64(1.0905449837216306)) ('f_sigv_LRG', np.float64(0.8988553938645027)) ('log_Mcent_LRG', np.float64(12.743922559236253)) ('sigma_M_LRG', np.float64(0.2516599616451497))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.657736872795613)) ('M_1_LRG', np.float64(13.906439344494123)) ('alpha_LRG', np.float64(1.1077688647974)) ('f_sigv_LRG', np.float64(0.8558659171323053)) ('log_Mcent_LRG', np.float64(12.78483388637867)) ('sigma_M_LRG', np.float64(0.30633234652431185))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.634039858511494)) ('M_1_LRG', np.float64(13.879916259238776)) ('alpha_LRG', np.float64(1.130897383632753)) ('f_sigv_LRG', np.float64(0.8685246188935608)) ('log_Mcent_LRG', np.float64(12.741675349621719)) ('sigma_M_LRG', np.float64(0.2556658404044501))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.678561256251605)) ('M_1_LRG', np.float64(13.893523542466102)) ('alpha_LRG', np.float64(1.0957729092020776)) ('f_sigv_LRG', np.float64(0.8716480720546438)) ('log_Mcent_LRG', np.float64(12.775424832887127)) ('sigma_M_LRG', np.float64(0.29303002197120115))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.734683041941357)) ('M_1_LRG', np.float64(13.917315379206128)) ('alpha_LRG', np.float64(1.0940500366929358)) ('f_sigv_LRG', np.float64(0.8548153193602688)) ('log_Mcent_LRG', np.float64(12.796567892351781)) ('sigma_M_LRG', np.float64(0.31832051459615096))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.698967741249358)) ('M_1_LRG', np.float64(13.871003100958747)) ('alpha_LRG', np.float64(1.0901182904558606)) ('f_sigv_LRG', np.float64(0.8662569349980271)) ('log_Mcent_LRG', np.float64(12.745989589212172)) ('sigma_M_LRG', np.float64(0.256508374344292))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.723586952609578)) ('M_1_LRG', np.float64(13.862209158900765)) ('alpha_LRG', np.float64(1.1106406315804083)) ('f_sigv_LRG', np.float64(0.845333004338186)) ('log_Mcent_LRG', np.float64(12.767472737756828)) ('sigma_M_LRG', np.float64(0.3087682752889319))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 1] ('M_0_LRG', np.float64(12.679768713170564)) ('M_1_LRG', np.float64(13.8939676908856)) ('alpha_LRG', np.float64(1.120270817488548)) ('f_sigv_LRG', np.float64(0.8535082657761636)) ('log_Mcent_LRG', np.float64(12.76807987551161)) ('sigma_M_LRG', np.float64(0.28880382824391687))
[Interation 1] chi2=337.1761709638145
[Interation 1] chi2=382.83434334956365
[Interation 1] chi2=292.48189577235604
[Interation 1] chi2=374.3570650749041
[Interation 1] chi2=327.81743225728917
[Interation 1] chi2=316.20981939067747
[Interation 1] chi2=297.0364481026033
[Interation 1] chi2=340.00829637121916
[Interation 1] chi2=325.5270949785899
[Interation 1] chi2=353.32767276183023
[Interation 1] chi2=293.12593889204885
[Interation 1] chi2=303.8339005123473
[Interation 2] ('M_0_LRG', np.float64(12.789838334998718)) ('M_1_LRG', np.float64(13.862207295334775)) ('alpha_LRG', np.float64(1.0195348723797157)) ('f_sigv_LRG', np.float64(0.8712808423972846)) ('log_Mcent_LRG', np.float64(12.748820978660431)) ('sigma_M_LRG', np.float64(0.26192854699045015))
[Interation 2] ('M_0_LRG', np.float64(12.754845758433826)) ('M_1_LRG', np.float64(13.870179201960019)) ('alpha_LRG', np.float64(1.048412722251963)) ('f_sigv_LRG', np.float64(0.8678447698038915)) ('log_Mcent_LRG', np.float64(12.748844835687644)) ('sigma_M_LRG', np.float64(0.2660056395828241))
[Interation 2] ('M_0_LRG', np.float64(12.743907528172432)) ('M_1_LRG', np.float64(13.893978868984977)) ('alpha_LRG', np.float64(1.0535787623465518)) ('f_sigv_LRG', np.float64(0.8782963015932512)) ('log_Mcent_LRG', np.float64(12.77278907520858)) ('sigma_M_LRG', np.float64(0.2902194193801393))
[Interation 2] ('M_0_LRG', np.float64(12.769324608118152)) ('M_1_LRG', np.float64(13.848685186196048)) ('alpha_LRG', np.float64(1.0583048291646475)) ('f_sigv_LRG', np.float64(0.8492515873345154)) ('log_Mcent_LRG', np.float64(12.73479749603403)) ('sigma_M_LRG', np.float64(0.2451246673934056))
[Interation 2] chi2=312.84310701476755
[Interation 2] chi2=263.5493619056628
[Interation 2] chi2=296.48702305357875
[Interation 2] chi2=274.8254573544182
[Interation 2] ('M_0_LRG', np.float64(12.822180123499475)) ('M_1_LRG', np.float64(13.865856792538944)) ('alpha_LRG', np.float64(1.0120603758651272)) ('f_sigv_LRG', np.float64(0.8715437158805319)) ('log_Mcent_LRG', np.float64(12.756940592748702)) ('sigma_M_LRG', np.float64(0.2698577678559661))
[Interation 2] ('M_0_LRG', np.float64(12.790598331816243)) ('M_1_LRG', np.float64(13.8555111115712)) ('alpha_LRG', np.float64(1.0180870715845463)) ('f_sigv_LRG', np.float64(0.8776428687719954)) ('log_Mcent_LRG', np.float64(12.74287547257891)) ('sigma_M_LRG', np.float64(0.25284213595983246))
[Interation 2] ('M_0_LRG', np.float64(12.873749602873325)) ('M_1_LRG', np.float64(13.83904169954284)) ('alpha_LRG', np.float64(0.9772765198030858)) ('f_sigv_LRG', np.float64(0.869752135118544)) ('log_Mcent_LRG', np.float64(12.730036266048183)) ('sigma_M_LRG', np.float64(0.2216029517236548))
[Interation 2] ('M_0_LRG', np.float64(12.859990654180901)) ('M_1_LRG', np.float64(13.848201007300181)) ('alpha_LRG', np.float64(0.9820378356005994)) ('f_sigv_LRG', np.float64(0.8722223801227698)) ('log_Mcent_LRG', np.float64(12.748036875704493)) ('sigma_M_LRG', np.float64(0.2570566087269605))
[Interation 2] ('M_0_LRG', np.float64(12.785615824739324)) ('M_1_LRG', np.float64(13.863496547796613)) ('alpha_LRG', np.float64(1.0323659839233903)) ('f_sigv_LRG', np.float64(0.8648486374329376)) ('log_Mcent_LRG', np.float64(12.753679345455224)) ('sigma_M_LRG', np.float64(0.27391040679456924))
[Interation 2] ('M_0_LRG', np.float64(12.801328382972494)) ('M_1_LRG', np.float64(13.853792457015981)) ('alpha_LRG', np.float64(1.0268034813549378)) ('f_sigv_LRG', np.float64(0.8631532184773101)) ('log_Mcent_LRG', np.float64(12.740596334895738)) ('sigma_M_LRG', np.float64(0.25013794099570097))
[Interation 2] ('M_0_LRG', np.float64(12.754896833864452)) ('M_1_LRG', np.float64(13.882467995783973)) ('alpha_LRG', np.float64(1.0521704458074828)) ('f_sigv_LRG', np.float64(0.8626636917963943)) ('log_Mcent_LRG', np.float64(12.76349273084702)) ('sigma_M_LRG', np.float64(0.272968690374413))
[Interation 2] ('M_0_LRG', np.float64(12.796897665086703)) ('M_1_LRG', np.float64(13.860621058024586)) ('alpha_LRG', np.float64(1.0276213425167855)) ('f_sigv_LRG', np.float64(0.8596912214779451)) ('log_Mcent_LRG', np.float64(12.74077256316363)) ('sigma_M_LRG', np.float64(0.237697485159862))
[Interation 2] ('M_0_LRG', np.float64(12.796073020247162)) ('M_1_LRG', np.float64(13.865793197318565)) ('alpha_LRG', np.float64(1.0157085324078423)) ('f_sigv_LRG', np.float64(0.8834188334300278)) ('log_Mcent_LRG', np.float64(12.746814449237576)) ('sigma_M_LRG', np.float64(0.24963127994141543))
[Interation 2] ('M_0_LRG', np.float64(12.811237436193332)) ('M_1_LRG', np.float64(13.855029464056532)) ('alpha_LRG', np.float64(1.0191005174786827)) ('f_sigv_LRG', np.float64(0.8707620411518628)) ('log_Mcent_LRG', np.float64(12.746268700480247)) ('sigma_M_LRG', np.float64(0.2590393420373801))
[Interation 2] ('M_0_LRG', np.float64(12.81137106838056)) ('M_1_LRG', np.float64(13.860729593793607)) ('alpha_LRG', np.float64(1.0195556242969668)) ('f_sigv_LRG', np.float64(0.8583570720912487)) ('log_Mcent_LRG', np.float64(12.755500511485156)) ('sigma_M_LRG', np.float64(0.27667183448632227))
[Interation 2] ('M_0_LRG', np.float64(12.80230915379003)) ('M_1_LRG', np.float64(13.85271457496665)) ('alpha_LRG', np.float64(1.0343805025349726)) ('f_sigv_LRG', np.float64(0.8667768139836455)) ('log_Mcent_LRG', np.float64(12.74813292183007)) ('sigma_M_LRG', np.float64(0.27048607120731116))
[Interation 2] chi2=307.0369665474548
[Interation 2] chi2=312.416670726049
[Interation 2] chi2=321.08377970344594
[Interation 2] chi2=325.76695851822177
[Interation 2] chi2=350.3398312643596
[Interation 2] chi2=293.2077975481712
[Interation 2] chi2=302.07657989191085
[Interation 2] chi2=284.9899716027919
[Interation 2] chi2=327.56567963161933
[Interation 2] chi2=297.0173091536715
[Interation 2] chi2=287.2913720198859
[Interation 2] chi2=328.28253867489826
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_04.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_04.npy
Set number of threads to 32
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.827420046203123)) ('M_1_LRG', np.float64(13.847691074766079)) ('alpha_LRG', np.float64(1.014806785404942)) ('f_sigv_LRG', np.float64(0.861281633585443)) ('log_Mcent_LRG', np.float64(12.748092320197633)) ('sigma_M_LRG', np.float64(0.27221073224763254))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 1.427191972732544
Start satellite assignement
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/numba/parfors/parfor.py:2395: NumbaPerformanceWarning: 
prange or pndindex loop will not be executed in parallel due to there being more than one entry to or exit from the loop (e.g., an assertion).

File "../../../../../../../homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/utils.py", line 487:
def compute_fast_NFW(x_h, y_h, z_h, vx_h, vy_h, vz_h, c, M, Rvir, rd_pos, rd_vel, exp_frac=0, exp_scale=1, nfw_rescale=1, vrms_h=None, f_sigv=None, v_infall=None, vel_sat='NFW', Nthread=32, seed=None):
    <source elided>
    hstart = np.rint(np.linspace(0, x_h.size, Nthread + 1))
    for tid in numba.prange(Nthread):
    ^

  warnings.warn(
Satellite assignement done 2.115475654602051
LRG mock catalogue done 2.192206382751465
616069 central galaxies, 84560 satellites, fraction of satellite 0.12 
Done overall time  LRG 3.8213698863983154
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_04.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:20
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:20
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:21
Load rppi measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Load correlation matrix for LRG at z0.5 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Load smu measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:17
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:17
Load correlation matrix for LRG at z0.5 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
/global/homes/s/shengyu/.conda/envs/hod_env/lib/python3.11/site-packages/HODDIES/hod.py:526: UserWarning: Ac=1.0 or As=1.0 is > 1, the density is not fixed to 0.0007
  warnings.warn(f'Ac={hod_list_param_cen[0]} or As={hod_list_param_cen[0]} is > 1, the density is not fixed to {self.args[tracer]["density"]}')
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.227271798036092)) ('M_1_LRG', np.float64(13.850818096331185)) ('alpha_LRG', np.float64(1.3746358056645418)) ('f_sigv_LRG', np.float64(0.8030104990376958)) ('log_Mcent_LRG', np.float64(12.73298258846081)) ('sigma_M_LRG', np.float64(0.2528589894524094))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.39260377740762)) ('M_1_LRG', np.float64(14.065611921999727)) ('alpha_LRG', np.float64(1.1116500374901142)) ('f_sigv_LRG', np.float64(0.9558101941434288)) ('log_Mcent_LRG', np.float64(12.965084836763253)) ('sigma_M_LRG', np.float64(0.4605927048678563))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.446476111879951)) ('M_1_LRG', np.float64(14.045205934180222)) ('alpha_LRG', np.float64(1.2408844011729576)) ('f_sigv_LRG', np.float64(0.8346127652865991)) ('log_Mcent_LRG', np.float64(12.868576704901127)) ('sigma_M_LRG', np.float64(0.32063337566675865))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.636610202462467)) ('M_1_LRG', np.float64(13.874207403128455)) ('alpha_LRG', np.float64(1.1895967093397837)) ('f_sigv_LRG', np.float64(0.9037638864929075)) ('log_Mcent_LRG', np.float64(12.913569942493835)) ('sigma_M_LRG', np.float64(0.45833318629068054))
[Interation 3] chi2=929.7651818778803
[Interation 3] chi2=551.8184975383248
[Interation 3] chi2=796.8365300531914
[Interation 3] chi2=1442.160455313779
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.714352806985943)) ('M_1_LRG', np.float64(13.896161139118275)) ('alpha_LRG', np.float64(0.9929349554671794)) ('f_sigv_LRG', np.float64(0.9559252218948491)) ('log_Mcent_LRG', np.float64(12.756269944758236)) ('sigma_M_LRG', np.float64(0.2464754836807067))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(13.178613173946438)) ('M_1_LRG', np.float64(13.811909545498901)) ('alpha_LRG', np.float64(0.8266354970684837)) ('f_sigv_LRG', np.float64(0.8625943162467672)) ('log_Mcent_LRG', np.float64(12.730832224984592)) ('sigma_M_LRG', np.float64(0.2829564017185376))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.413045378762158)) ('M_1_LRG', np.float64(14.094937134213769)) ('alpha_LRG', np.float64(1.1808125893902153)) ('f_sigv_LRG', np.float64(0.8566720869383837)) ('log_Mcent_LRG', np.float64(12.999943512228846)) ('sigma_M_LRG', np.float64(0.5559535696479181))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.518702642337061)) ('M_1_LRG', np.float64(13.952475329124773)) ('alpha_LRG', np.float64(1.129235168779764)) ('f_sigv_LRG', np.float64(0.9317290374715119)) ('log_Mcent_LRG', np.float64(12.815800039190377)) ('sigma_M_LRG', np.float64(0.34361369891000954))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.590345467498189)) ('M_1_LRG', np.float64(13.958856974582844)) ('alpha_LRG', np.float64(0.9873745719241172)) ('f_sigv_LRG', np.float64(0.9115237472592437)) ('log_Mcent_LRG', np.float64(12.842138915535223)) ('sigma_M_LRG', np.float64(0.41240046074883246))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.457407522581365)) ('M_1_LRG', np.float64(13.876584234677939)) ('alpha_LRG', np.float64(1.2202093914926802)) ('f_sigv_LRG', np.float64(0.8598578080378413)) ('log_Mcent_LRG', np.float64(12.795538580354355)) ('sigma_M_LRG', np.float64(0.3626408946340667))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.579017631924275)) ('M_1_LRG', np.float64(13.859249051139631)) ('alpha_LRG', np.float64(1.2322199365593391)) ('f_sigv_LRG', np.float64(0.8158375005551438)) ('log_Mcent_LRG', np.float64(12.713551876307564)) ('sigma_M_LRG', np.float64(0.2452993228965828))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.651854027259379)) ('M_1_LRG', np.float64(13.98786841332122)) ('alpha_LRG', np.float64(0.9952054798544117)) ('f_sigv_LRG', np.float64(0.8919653807828203)) ('log_Mcent_LRG', np.float64(12.848635397857114)) ('sigma_M_LRG', np.float64(0.3978734948437231))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.567761400973263)) ('M_1_LRG', np.float64(13.914636997627179)) ('alpha_LRG', np.float64(1.1802507839090846)) ('f_sigv_LRG', np.float64(0.8473016380904022)) ('log_Mcent_LRG', np.float64(12.775129065401057)) ('sigma_M_LRG', np.float64(0.2950109242943013))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.398854947295911)) ('M_1_LRG', np.float64(14.022433140238691)) ('alpha_LRG', np.float64(1.128288701051023)) ('f_sigv_LRG', np.float64(0.8909602639998542)) ('log_Mcent_LRG', np.float64(12.857666587108417)) ('sigma_M_LRG', np.float64(0.39342449733283225))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.514490050833992)) ('M_1_LRG', np.float64(14.062107776292304)) ('alpha_LRG', np.float64(1.1208308644144231)) ('f_sigv_LRG', np.float64(0.8828355432982644)) ('log_Mcent_LRG', np.float64(12.940032727062938)) ('sigma_M_LRG', np.float64(0.45265312410196695))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 3] ('M_0_LRG', np.float64(12.789928386478035)) ('M_1_LRG', np.float64(13.827260108855542)) ('alpha_LRG', np.float64(1.1359875565835)) ('f_sigv_LRG', np.float64(0.8413606922933079)) ('log_Mcent_LRG', np.float64(12.794223218930089)) ('sigma_M_LRG', np.float64(0.33324110087290215))
[Interation 3] chi2=366.9693955415928
[Interation 3] chi2=615.0383377767577
[Interation 3] chi2=1539.1631719157385
[Interation 3] chi2=376.7781904829944
[Interation 3] chi2=588.1753374831504
[Interation 3] chi2=472.0616866610441
[Interation 3] chi2=310.07470748828973
[Interation 3] chi2=451.46546812416375
[Interation 3] chi2=331.9194068646464
[Interation 3] chi2=425.3264027450452
[Interation 3] chi2=398.23677794200677
[Interation 3] chi2=505.85744690337236
[Interation 4] ('M_0_LRG', np.float64(12.791897451562617)) ('M_1_LRG', np.float64(13.868867089747306)) ('alpha_LRG', np.float64(1.036126748792706)) ('f_sigv_LRG', np.float64(0.86745004104909)) ('log_Mcent_LRG', np.float64(12.763895112281391)) ('sigma_M_LRG', np.float64(0.28231610974406873))
[Interation 4] ('M_0_LRG', np.float64(12.72921141413956)) ('M_1_LRG', np.float64(13.858172210362744)) ('alpha_LRG', np.float64(1.083190075096793)) ('f_sigv_LRG', np.float64(0.8667578156238025)) ('log_Mcent_LRG', np.float64(12.740694032498196)) ('sigma_M_LRG', np.float64(0.24499859463124513))
[Interation 4] ('M_0_LRG', np.float64(12.72233758583102)) ('M_1_LRG', np.float64(13.884924044659886)) ('alpha_LRG', np.float64(1.0770936782410439)) ('f_sigv_LRG', np.float64(0.8645388572740935)) ('log_Mcent_LRG', np.float64(12.770266796826522)) ('sigma_M_LRG', np.float64(0.29038294680932564))
[Interation 4] ('M_0_LRG', np.float64(12.797496957807866)) ('M_1_LRG', np.float64(13.855685445902237)) ('alpha_LRG', np.float64(1.0330665149960703)) ('f_sigv_LRG', np.float64(0.8790931147136692)) ('log_Mcent_LRG', np.float64(12.723343645955538)) ('sigma_M_LRG', np.float64(0.21244585005649935))
[Interation 4] chi2=294.32829093029005
[Interation 4] chi2=311.13378001353846
[Interation 4] chi2=369.5569206716895
[Interation 4] chi2=350.98092218553444
[Interation 4] ('M_0_LRG', np.float64(12.777129171589577)) ('M_1_LRG', np.float64(13.864556431624251)) ('alpha_LRG', np.float64(1.048200800796924)) ('f_sigv_LRG', np.float64(0.8614584977635618)) ('log_Mcent_LRG', np.float64(12.752993972850833)) ('sigma_M_LRG', np.float64(0.2685409335786074))
[Interation 4] ('M_0_LRG', np.float64(12.74625578710979)) ('M_1_LRG', np.float64(13.88956510593692)) ('alpha_LRG', np.float64(1.0655809711942468)) ('f_sigv_LRG', np.float64(0.8620834008521925)) ('log_Mcent_LRG', np.float64(12.772613280097028)) ('sigma_M_LRG', np.float64(0.29490970693950813))
[Interation 4] ('M_0_LRG', np.float64(12.821020785939666)) ('M_1_LRG', np.float64(13.849795788664604)) ('alpha_LRG', np.float64(1.0056638931602613)) ('f_sigv_LRG', np.float64(0.8841025493786143)) ('log_Mcent_LRG', np.float64(12.740519645348781)) ('sigma_M_LRG', np.float64(0.24138942725713525))
[Interation 4] ('M_0_LRG', np.float64(12.71473571445697)) ('M_1_LRG', np.float64(13.892208620261124)) ('alpha_LRG', np.float64(1.081563827966786)) ('f_sigv_LRG', np.float64(0.8606193914659431)) ('log_Mcent_LRG', np.float64(12.76984321939984)) ('sigma_M_LRG', np.float64(0.2868838220571477))
[Interation 4] ('M_0_LRG', np.float64(12.739028487243804)) ('M_1_LRG', np.float64(13.874353953971934)) ('alpha_LRG', np.float64(1.0841403893991994)) ('f_sigv_LRG', np.float64(0.8578691825893248)) ('log_Mcent_LRG', np.float64(12.761978785927953)) ('sigma_M_LRG', np.float64(0.278056806562933))
[Interation 4] ('M_0_LRG', np.float64(12.733866142692673)) ('M_1_LRG', np.float64(13.872762357304449)) ('alpha_LRG', np.float64(1.0744973801191935)) ('f_sigv_LRG', np.float64(0.882470402612593)) ('log_Mcent_LRG', np.float64(12.741707270544056)) ('sigma_M_LRG', np.float64(0.23192192225072894))
[Interation 4] ('M_0_LRG', np.float64(12.830217421816009)) ('M_1_LRG', np.float64(13.846842133082752)) ('alpha_LRG', np.float64(1.014054754423958)) ('f_sigv_LRG', np.float64(0.87698533713557)) ('log_Mcent_LRG', np.float64(12.74414522023219)) ('sigma_M_LRG', np.float64(0.24148494965448025))
[Interation 4] ('M_0_LRG', np.float64(12.843870700232303)) ('M_1_LRG', np.float64(13.859306432191206)) ('alpha_LRG', np.float64(1.0052627851942548)) ('f_sigv_LRG', np.float64(0.8752446149466702)) ('log_Mcent_LRG', np.float64(12.749090473802625)) ('sigma_M_LRG', np.float64(0.25336189587046815))
[Interation 4] ('M_0_LRG', np.float64(12.77172901851532)) ('M_1_LRG', np.float64(13.868453287471043)) ('alpha_LRG', np.float64(1.0515885265724576)) ('f_sigv_LRG', np.float64(0.8587533303915835)) ('log_Mcent_LRG', np.float64(12.764970865483079)) ('sigma_M_LRG', np.float64(0.2895369294891819))
[Interation 4] ('M_0_LRG', np.float64(12.726884774666075)) ('M_1_LRG', np.float64(13.868481923094416)) ('alpha_LRG', np.float64(1.0559803681104114)) ('f_sigv_LRG', np.float64(0.8878615472599045)) ('log_Mcent_LRG', np.float64(12.745759944952074)) ('sigma_M_LRG', np.float64(0.24950907545598716))
[Interation 4] ('M_0_LRG', np.float64(12.718304928671632)) ('M_1_LRG', np.float64(13.880515655081929)) ('alpha_LRG', np.float64(1.0672430036681653)) ('f_sigv_LRG', np.float64(0.8744885636011862)) ('log_Mcent_LRG', np.float64(12.753944688714283)) ('sigma_M_LRG', np.float64(0.2705177800654735))
[Interation 4] ('M_0_LRG', np.float64(12.760418793550222)) ('M_1_LRG', np.float64(13.892500325500805)) ('alpha_LRG', np.float64(1.060030627700914)) ('f_sigv_LRG', np.float64(0.8722151695074322)) ('log_Mcent_LRG', np.float64(12.772753920344654)) ('sigma_M_LRG', np.float64(0.28478342569961157))
[Interation 4] chi2=277.540237690263
[Interation 4] chi2=336.0058914067628
[Interation 4] chi2=253.57664256415816
[Interation 4] chi2=322.21298985469645
[Interation 4] chi2=323.55190971824914
[Interation 4] chi2=340.26441580875047
[Interation 4] chi2=318.4325137971323
[Interation 4] chi2=339.1691269245824
[Interation 4] chi2=317.59997957791575
[Interation 4] chi2=357.28242257170086
[Interation 4] chi2=310.3046357590311
[Interation 4] chi2=382.5835820007971
[Interation 5] ('M_0_LRG', np.float64(12.778642289622754)) ('M_1_LRG', np.float64(13.85065762653361)) ('alpha_LRG', np.float64(1.0453662101441177)) ('f_sigv_LRG', np.float64(0.8690231202786792)) ('log_Mcent_LRG', np.float64(12.736114606322671)) ('sigma_M_LRG', np.float64(0.23935552595470644))
[Interation 5] ('M_0_LRG', np.float64(12.777219445272978)) ('M_1_LRG', np.float64(13.870440134102529)) ('alpha_LRG', np.float64(1.0352113577618451)) ('f_sigv_LRG', np.float64(0.874816741543614)) ('log_Mcent_LRG', np.float64(12.748293587578427)) ('sigma_M_LRG', np.float64(0.2381773681364544))
[Interation 5] ('M_0_LRG', np.float64(12.76626801072542)) ('M_1_LRG', np.float64(13.856996054014063)) ('alpha_LRG', np.float64(1.050513994328245)) ('f_sigv_LRG', np.float64(0.8625443220010963)) ('log_Mcent_LRG', np.float64(12.735856223521775)) ('sigma_M_LRG', np.float64(0.22440005537677))
[Interation 5] ('M_0_LRG', np.float64(12.773314931386185)) ('M_1_LRG', np.float64(13.854212723626377)) ('alpha_LRG', np.float64(1.0389229459247316)) ('f_sigv_LRG', np.float64(0.872542528802815)) ('log_Mcent_LRG', np.float64(12.72568764993868)) ('sigma_M_LRG', np.float64(0.20106344554015726))
[Interation 5] chi2=283.40205027113825
[Interation 5] chi2=302.29686854283113
[Interation 5] chi2=346.11680139125957
[Interation 5] chi2=350.87254627726116
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_05.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_05.npy
Set number of threads to 32
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.765994066027384)) ('M_1_LRG', np.float64(13.844004428564753)) ('alpha_LRG', np.float64(1.0461356257749337)) ('f_sigv_LRG', np.float64(0.8723396749475076)) ('log_Mcent_LRG', np.float64(12.727202503046536)) ('sigma_M_LRG', np.float64(0.23084320111394946))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.35488319396972656
Start satellite assignement
Satellite assignement done 0.07539892196655273
LRG mock catalogue done 0.14870333671569824
614228 central galaxies, 86480 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6852200031280518
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_05.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:18
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:19
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:19
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:20
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:17
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:17
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Load smu measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.48297708857244)) ('M_1_LRG', np.float64(13.512038897504912)) ('alpha_LRG', np.float64(1.0635237626964618)) ('f_sigv_LRG', np.float64(0.9890510310755019)) ('log_Mcent_LRG', np.float64(12.793633554352006)) ('sigma_M_LRG', np.float64(0.6031786444791836))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.496303908758359)) ('M_1_LRG', np.float64(13.47977106606119)) ('alpha_LRG', np.float64(0.9785976244146422)) ('f_sigv_LRG', np.float64(1.0630527496995696)) ('log_Mcent_LRG', np.float64(12.770770004973881)) ('sigma_M_LRG', np.float64(0.45105450203678954))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.481958303925023)) ('M_1_LRG', np.float64(13.539278827342763)) ('alpha_LRG', np.float64(1.0036208270557352)) ('f_sigv_LRG', np.float64(1.000846317378159)) ('log_Mcent_LRG', np.float64(12.740296119785453)) ('sigma_M_LRG', np.float64(0.43768030258817303))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.532060238056978)) ('M_1_LRG', np.float64(13.533933921583623)) ('alpha_LRG', np.float64(0.9734787645688435)) ('f_sigv_LRG', np.float64(1.0333053098471199)) ('log_Mcent_LRG', np.float64(12.688422205206642)) ('sigma_M_LRG', np.float64(0.4439420731457418))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.469821247935506)) ('M_1_LRG', np.float64(13.493200737510145)) ('alpha_LRG', np.float64(0.957415048830838)) ('f_sigv_LRG', np.float64(0.9938963869996582)) ('log_Mcent_LRG', np.float64(12.707532741691097)) ('sigma_M_LRG', np.float64(0.5084069692452629))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.49232913067896)) ('M_1_LRG', np.float64(13.422585962036578)) ('alpha_LRG', np.float64(1.0169763677868875)) ('f_sigv_LRG', np.float64(0.9959446761141251)) ('log_Mcent_LRG', np.float64(12.708453157235894)) ('sigma_M_LRG', np.float64(0.4775084955648135))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.512518228143245)) ('M_1_LRG', np.float64(13.651773506409878)) ('alpha_LRG', np.float64(0.9205316882366834)) ('f_sigv_LRG', np.float64(0.9295388318788187)) ('log_Mcent_LRG', np.float64(12.65021665663611)) ('sigma_M_LRG', np.float64(0.5489782149194378))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.524927198733991)) ('M_1_LRG', np.float64(13.499226304135362)) ('alpha_LRG', np.float64(1.004161158607927)) ('f_sigv_LRG', np.float64(0.9850438110159122)) ('log_Mcent_LRG', np.float64(12.783635750965407)) ('sigma_M_LRG', np.float64(0.44549013802491394))
[Interation 5] chi2=5401.7083602874545
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.363379882810703)) ('M_1_LRG', np.float64(13.425284857973047)) ('alpha_LRG', np.float64(0.9936216343803412)) ('f_sigv_LRG', np.float64(0.9237708862041154)) ('log_Mcent_LRG', np.float64(12.8061967124769)) ('sigma_M_LRG', np.float64(0.576716462711336))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.434560522042084)) ('M_1_LRG', np.float64(13.565880689911829)) ('alpha_LRG', np.float64(0.9696221806827656)) ('f_sigv_LRG', np.float64(0.9561643912748067)) ('log_Mcent_LRG', np.float64(12.824427217397995)) ('sigma_M_LRG', np.float64(0.5500158313415516))
[Interation 5] chi2=9049.5031246899
[Interation 5] chi2=5058.662002821599
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.519670395391147)) ('M_1_LRG', np.float64(13.562347270922496)) ('alpha_LRG', np.float64(1.0396714533904554)) ('f_sigv_LRG', np.float64(1.0186908200304643)) ('log_Mcent_LRG', np.float64(12.633922164114521)) ('sigma_M_LRG', np.float64(0.6363189860097461))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 5] ('M_0_LRG', np.float64(12.5445347925355)) ('M_1_LRG', np.float64(13.545705269700491)) ('alpha_LRG', np.float64(0.963312454539189)) ('f_sigv_LRG', np.float64(0.9446478416469082)) ('log_Mcent_LRG', np.float64(12.834955295132014)) ('sigma_M_LRG', np.float64(0.4839554489041884))
[Interation 5] chi2=3695.1080918125804
[Interation 5] chi2=4173.340175030482
[Interation 5] chi2=6848.12912304329
[Interation 5] chi2=5199.261961633804
[Interation 5] chi2=9134.011210373581
[Interation 5] chi2=8376.203516075864
[Interation 5] chi2=4837.895337993592
[Interation 5] chi2=9016.647339166757
[Interation 5] chi2=8681.67082342508
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 6] ('M_0_LRG', np.float64(12.618616081141141)) ('M_1_LRG', np.float64(13.90012738748065)) ('alpha_LRG', np.float64(1.127742723889885)) ('f_sigv_LRG', np.float64(0.859164415384807)) ('log_Mcent_LRG', np.float64(12.749505243135633)) ('sigma_M_LRG', np.float64(0.25878630223337706))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 6] ('M_0_LRG', np.float64(12.811367122684029)) ('M_1_LRG', np.float64(13.884009943566767)) ('alpha_LRG', np.float64(1.0162439601140358)) ('f_sigv_LRG', np.float64(0.8717033367015876)) ('log_Mcent_LRG', np.float64(12.773415048931962)) ('sigma_M_LRG', np.float64(0.29626439186333287))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 6] ('M_0_LRG', np.float64(12.711058387206311)) ('M_1_LRG', np.float64(13.831554192825857)) ('alpha_LRG', np.float64(1.117508626977901)) ('f_sigv_LRG', np.float64(0.8352461825889301)) ('log_Mcent_LRG', np.float64(12.694882414357883)) ('sigma_M_LRG', np.float64(0.17362800190046407))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 6] ('M_0_LRG', np.float64(12.704489287177731)) ('M_1_LRG', np.float64(13.84441136150074)) ('alpha_LRG', np.float64(1.1380288081773102)) ('f_sigv_LRG', np.float64(0.8520322116244056)) ('log_Mcent_LRG', np.float64(12.730825601399285)) ('sigma_M_LRG', np.float64(0.22688969043839313))
[Interation 6] chi2=347.70404632837364
[Interation 6] chi2=362.07085337011154
[Interation 6] chi2=333.62159479942176
[Interation 6] chi2=366.1301281677995
[Interation 6] ('M_0_LRG', np.float64(12.75520303070728)) ('M_1_LRG', np.float64(13.865708861672019)) ('alpha_LRG', np.float64(1.050274919564177)) ('f_sigv_LRG', np.float64(0.8592596869139577)) ('log_Mcent_LRG', np.float64(12.76853980811849)) ('sigma_M_LRG', np.float64(0.3063071463632664))
[Interation 6] ('M_0_LRG', np.float64(12.74843039183923)) ('M_1_LRG', np.float64(13.872323110338442)) ('alpha_LRG', np.float64(1.0395062546553329)) ('f_sigv_LRG', np.float64(0.8756377271369922)) ('log_Mcent_LRG', np.float64(12.751732078889074)) ('sigma_M_LRG', np.float64(0.26910056129270504))
[Interation 6] ('M_0_LRG', np.float64(12.786941455350622)) ('M_1_LRG', np.float64(13.85476242084683)) ('alpha_LRG', np.float64(1.0142542350529715)) ('f_sigv_LRG', np.float64(0.8653832567311498)) ('log_Mcent_LRG', np.float64(12.749933231479384)) ('sigma_M_LRG', np.float64(0.27749024219111645))
[Interation 6] ('M_0_LRG', np.float64(12.895926745732792)) ('M_1_LRG', np.float64(13.866436433378691)) ('alpha_LRG', np.float64(0.9530655264514969)) ('f_sigv_LRG', np.float64(0.8607219458215398)) ('log_Mcent_LRG', np.float64(12.777774640765282)) ('sigma_M_LRG', np.float64(0.29998802845912487))
[Interation 6] ('M_0_LRG', np.float64(12.838626252225652)) ('M_1_LRG', np.float64(13.86001245354369)) ('alpha_LRG', np.float64(1.000857473134339)) ('f_sigv_LRG', np.float64(0.852644201067935)) ('log_Mcent_LRG', np.float64(12.768391422361232)) ('sigma_M_LRG', np.float64(0.29108742611165017))
[Interation 6] ('M_0_LRG', np.float64(12.747172672388288)) ('M_1_LRG', np.float64(13.88911539763511)) ('alpha_LRG', np.float64(1.092275883627257)) ('f_sigv_LRG', np.float64(0.854858135303713)) ('log_Mcent_LRG', np.float64(12.778137153546828)) ('sigma_M_LRG', np.float64(0.3062514296425825))
[Interation 6] ('M_0_LRG', np.float64(12.885406671838176)) ('M_1_LRG', np.float64(13.834915185396634)) ('alpha_LRG', np.float64(0.9793283850748101)) ('f_sigv_LRG', np.float64(0.8735068553506543)) ('log_Mcent_LRG', np.float64(12.751988937981718)) ('sigma_M_LRG', np.float64(0.2712199817408776))
[Interation 6] ('M_0_LRG', np.float64(12.726176272101785)) ('M_1_LRG', np.float64(13.865423749848771)) ('alpha_LRG', np.float64(1.0763401049181527)) ('f_sigv_LRG', np.float64(0.8590625796497298)) ('log_Mcent_LRG', np.float64(12.745207762692601)) ('sigma_M_LRG', np.float64(0.2518135655949413))
[Interation 6] ('M_0_LRG', np.float64(12.785548064641144)) ('M_1_LRG', np.float64(13.86540232970761)) ('alpha_LRG', np.float64(1.0404874491844778)) ('f_sigv_LRG', np.float64(0.8494404105780053)) ('log_Mcent_LRG', np.float64(12.756268273330853)) ('sigma_M_LRG', np.float64(0.26989444922661426))
[Interation 6] ('M_0_LRG', np.float64(12.673132133657763)) ('M_1_LRG', np.float64(13.892207359849348)) ('alpha_LRG', np.float64(1.0586747664795175)) ('f_sigv_LRG', np.float64(0.8990988129665023)) ('log_Mcent_LRG', np.float64(12.76094237531477)) ('sigma_M_LRG', np.float64(0.27610861428091726))
[Interation 6] ('M_0_LRG', np.float64(12.839127404309888)) ('M_1_LRG', np.float64(13.86342165787254)) ('alpha_LRG', np.float64(1.010795873732924)) ('f_sigv_LRG', np.float64(0.8739571715314352)) ('log_Mcent_LRG', np.float64(12.756183427062856)) ('sigma_M_LRG', np.float64(0.26592098211172527))
[Interation 6] ('M_0_LRG', np.float64(12.768506541805166)) ('M_1_LRG', np.float64(13.89055846771787)) ('alpha_LRG', np.float64(1.044364269400577)) ('f_sigv_LRG', np.float64(0.8771714935438031)) ('log_Mcent_LRG', np.float64(12.768143938752669)) ('sigma_M_LRG', np.float64(0.2775170194150741))
[Interation 6] chi2=335.17848439431015
[Interation 6] chi2=329.9095176978331
[Interation 6] chi2=327.94099771062
[Interation 6] chi2=354.30050564330986
[Interation 6] chi2=324.516450822176
[Interation 6] chi2=306.93280050501625
[Interation 6] chi2=307.34391382328255
[Interation 6] chi2=313.94023666893605
[Interation 6] chi2=346.6588340322424
[Interation 6] chi2=305.8141547262923
[Interation 6] chi2=273.25403008079803
[Interation 6] chi2=291.1813692121477
[Interation 7] ('M_0_LRG', np.float64(12.759018501946986)) ('M_1_LRG', np.float64(13.859048604361481)) ('alpha_LRG', np.float64(1.0461635011006498)) ('f_sigv_LRG', np.float64(0.878778941508473)) ('log_Mcent_LRG', np.float64(12.731143883809471)) ('sigma_M_LRG', np.float64(0.22207935277316748))
[Interation 7] ('M_0_LRG', np.float64(12.796591618552506)) ('M_1_LRG', np.float64(13.823930918353179)) ('alpha_LRG', np.float64(1.0262093645824815)) ('f_sigv_LRG', np.float64(0.870971427691295)) ('log_Mcent_LRG', np.float64(12.706762156938936)) ('sigma_M_LRG', np.float64(0.18947640574176355))
[Interation 7] ('M_0_LRG', np.float64(12.78948844692445)) ('M_1_LRG', np.float64(13.860610784482596)) ('alpha_LRG', np.float64(1.0349902987878992)) ('f_sigv_LRG', np.float64(0.8688312899296768)) ('log_Mcent_LRG', np.float64(12.750731644173593)) ('sigma_M_LRG', np.float64(0.2657960323151371))
[Interation 7] ('M_0_LRG', np.float64(12.84648470500721)) ('M_1_LRG', np.float64(13.827878014949029)) ('alpha_LRG', np.float64(0.9979227946256161)) ('f_sigv_LRG', np.float64(0.8630181100150642)) ('log_Mcent_LRG', np.float64(12.726280161682489)) ('sigma_M_LRG', np.float64(0.221324210888298))
[Interation 7] chi2=312.7293261746226
[Interation 7] chi2=310.80533202628516
[Interation 7] chi2=340.44554544084957
[Interation 7] chi2=350.96935452164155
[Interation 7] ('M_0_LRG', np.float64(12.824932456426321)) ('M_1_LRG', np.float64(13.841350885818853)) ('alpha_LRG', np.float64(1.0076374156723051)) ('f_sigv_LRG', np.float64(0.8686459393156687)) ('log_Mcent_LRG', np.float64(12.73084352176439)) ('sigma_M_LRG', np.float64(0.21864457314933422))
[Interation 7] ('M_0_LRG', np.float64(12.818313929467475)) ('M_1_LRG', np.float64(13.839039634725685)) ('alpha_LRG', np.float64(1.0190039071747912)) ('f_sigv_LRG', np.float64(0.8581717360193521)) ('log_Mcent_LRG', np.float64(12.723135706199583)) ('sigma_M_LRG', np.float64(0.20737618356653537))
[Interation 7] ('M_0_LRG', np.float64(12.79261354091882)) ('M_1_LRG', np.float64(13.832833841031878)) ('alpha_LRG', np.float64(1.026832450825056)) ('f_sigv_LRG', np.float64(0.8714431797365148)) ('log_Mcent_LRG', np.float64(12.710710730431352)) ('sigma_M_LRG', np.float64(0.18706057846157698))
[Interation 7] ('M_0_LRG', np.float64(12.765126255233652)) ('M_1_LRG', np.float64(13.852017497786559)) ('alpha_LRG', np.float64(1.0346227154556409)) ('f_sigv_LRG', np.float64(0.8723314702806049)) ('log_Mcent_LRG', np.float64(12.73519630975872)) ('sigma_M_LRG', np.float64(0.24146392161530694))
[Interation 7] ('M_0_LRG', np.float64(12.821955782203558)) ('M_1_LRG', np.float64(13.833437926627711)) ('alpha_LRG', np.float64(1.010361777567397)) ('f_sigv_LRG', np.float64(0.8632402318714829)) ('log_Mcent_LRG', np.float64(12.725537852018244)) ('sigma_M_LRG', np.float64(0.21470570785554516))
[Interation 7] ('M_0_LRG', np.float64(12.815547121706595)) ('M_1_LRG', np.float64(13.828757188346387)) ('alpha_LRG', np.float64(1.0094892156518447)) ('f_sigv_LRG', np.float64(0.8560236574750153)) ('log_Mcent_LRG', np.float64(12.721025680550566)) ('sigma_M_LRG', np.float64(0.21569084014681372))
[Interation 7] ('M_0_LRG', np.float64(12.821309615504882)) ('M_1_LRG', np.float64(13.843703462819962)) ('alpha_LRG', np.float64(1.0056322565181346)) ('f_sigv_LRG', np.float64(0.8653668212878673)) ('log_Mcent_LRG', np.float64(12.726753183926444)) ('sigma_M_LRG', np.float64(0.21653444134995015))
[Interation 7] ('M_0_LRG', np.float64(12.772462915751326)) ('M_1_LRG', np.float64(13.856435586677788)) ('alpha_LRG', np.float64(1.0339344907140664)) ('f_sigv_LRG', np.float64(0.8785348343920079)) ('log_Mcent_LRG', np.float64(12.738431473115293)) ('sigma_M_LRG', np.float64(0.23582928509058687))
[Interation 7] ('M_0_LRG', np.float64(12.852707401837968)) ('M_1_LRG', np.float64(13.824880771530012)) ('alpha_LRG', np.float64(0.9996950989227249)) ('f_sigv_LRG', np.float64(0.8592202693594694)) ('log_Mcent_LRG', np.float64(12.72661765910329)) ('sigma_M_LRG', np.float64(0.22197913312516038))
[Interation 7] ('M_0_LRG', np.float64(12.850413383325838)) ('M_1_LRG', np.float64(13.860526411061008)) ('alpha_LRG', np.float64(1.0007059738485171)) ('f_sigv_LRG', np.float64(0.8661734288216826)) ('log_Mcent_LRG', np.float64(12.751860836797476)) ('sigma_M_LRG', np.float64(0.24660987093588177))
[Interation 7] ('M_0_LRG', np.float64(12.780946973193915)) ('M_1_LRG', np.float64(13.869831712924382)) ('alpha_LRG', np.float64(1.0362362697910938)) ('f_sigv_LRG', np.float64(0.8689370879031084)) ('log_Mcent_LRG', np.float64(12.749734164421623)) ('sigma_M_LRG', np.float64(0.2572025369914782))
[Interation 7] ('M_0_LRG', np.float64(12.850180415192835)) ('M_1_LRG', np.float64(13.8279899165329)) ('alpha_LRG', np.float64(0.9853622754180121)) ('f_sigv_LRG', np.float64(0.8581746377529551)) ('log_Mcent_LRG', np.float64(12.718542001798518)) ('sigma_M_LRG', np.float64(0.19986007200595401))
[Interation 7] chi2=288.17422540708037
[Interation 7] chi2=296.8467212126067
[Interation 7] chi2=327.9937484588021
[Interation 7] chi2=309.5850386824236
[Interation 7] chi2=298.93069554504007
[Interation 7] chi2=330.953380000838
[Interation 7] chi2=348.9065529057456
[Interation 7] chi2=284.67601868882076
[Interation 7] chi2=326.54320295554004
[Interation 7] chi2=318.95417557286873
[Interation 7] chi2=350.38041790588636
[Interation 7] chi2=347.21095590594854
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_06.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_06.npy
Set number of threads to 32
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.838814099559796)) ('M_1_LRG', np.float64(13.835501963747133)) ('alpha_LRG', np.float64(0.9942409136875672)) ('f_sigv_LRG', np.float64(0.8677437684994734)) ('log_Mcent_LRG', np.float64(12.72607369524725)) ('sigma_M_LRG', np.float64(0.2110166526514633))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3321661949157715
Start satellite assignement
Satellite assignement done 0.07289958000183105
LRG mock catalogue done 0.14557933807373047
614879 central galaxies, 84611 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6603889465332031
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_06.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:20
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Load smu measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Load smu measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:19
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:27
Load correlation matrix for LRG at z0.5 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.322400011499433)) ('M_1_LRG', np.float64(14.107094065332406)) ('alpha_LRG', np.float64(1.112266880344969)) ('f_sigv_LRG', np.float64(0.9875519049252786)) ('log_Mcent_LRG', np.float64(12.92093102834627)) ('sigma_M_LRG', np.float64(0.35511245510344747))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.985644539109709)) ('M_1_LRG', np.float64(13.907259847907811)) ('alpha_LRG', np.float64(0.8764930518445011)) ('f_sigv_LRG', np.float64(0.761398561881609)) ('log_Mcent_LRG', np.float64(12.729426058364139)) ('sigma_M_LRG', np.float64(0.4343488453292301))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.496561591387545)) ('M_1_LRG', np.float64(14.156282358225846)) ('alpha_LRG', np.float64(0.9852423123366159)) ('f_sigv_LRG', np.float64(0.7591931521609556)) ('log_Mcent_LRG', np.float64(12.943584593042216)) ('sigma_M_LRG', np.float64(0.5427256862942462))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.485464877080133)) ('M_1_LRG', np.float64(14.112255427928217)) ('alpha_LRG', np.float64(0.9155244150169637)) ('f_sigv_LRG', np.float64(0.99424053427287)) ('log_Mcent_LRG', np.float64(12.820564317076514)) ('sigma_M_LRG', np.float64(0.22862815563557282))
[Interation 8] chi2=776.9632664852227
[Interation 8] chi2=2912.0589514907465
[Interation 8] chi2=1179.640869971258
[Interation 8] chi2=1003.1546690376115
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.703333616838473)) ('M_1_LRG', np.float64(13.959428763326498)) ('alpha_LRG', np.float64(1.0431661471348062)) ('f_sigv_LRG', np.float64(0.9002120882368793)) ('log_Mcent_LRG', np.float64(12.84080517301414)) ('sigma_M_LRG', np.float64(0.3645616321306936))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.93917781639177)) ('M_1_LRG', np.float64(13.914977354861424)) ('alpha_LRG', np.float64(0.9861617214060902)) ('f_sigv_LRG', np.float64(0.8697465935995183)) ('log_Mcent_LRG', np.float64(12.796776566042137)) ('sigma_M_LRG', np.float64(0.2990358662616537))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.321375240847946)) ('M_1_LRG', np.float64(13.98758714164391)) ('alpha_LRG', np.float64(1.2382395463300573)) ('f_sigv_LRG', np.float64(0.8560793304673976)) ('log_Mcent_LRG', np.float64(12.831369132070689)) ('sigma_M_LRG', np.float64(0.36920536038209506))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.850337732869699)) ('M_1_LRG', np.float64(13.773795783925024)) ('alpha_LRG', np.float64(1.0456805862544587)) ('f_sigv_LRG', np.float64(0.8657751259542303)) ('log_Mcent_LRG', np.float64(12.644411290507769)) ('sigma_M_LRG', np.float64(0.11627510216791409))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.447727114157106)) ('M_1_LRG', np.float64(13.917043995966228)) ('alpha_LRG', np.float64(1.1859967294741485)) ('f_sigv_LRG', np.float64(0.8435549419594779)) ('log_Mcent_LRG', np.float64(12.73946080641007)) ('sigma_M_LRG', np.float64(0.23394998548406376))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.787151032842528)) ('M_1_LRG', np.float64(13.86855990088987)) ('alpha_LRG', np.float64(1.0547950734451688)) ('f_sigv_LRG', np.float64(0.8198902033878661)) ('log_Mcent_LRG', np.float64(12.756066557582534)) ('sigma_M_LRG', np.float64(0.29773473172736953))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.585656426309031)) ('M_1_LRG', np.float64(14.011533096719122)) ('alpha_LRG', np.float64(1.0997184769059032)) ('f_sigv_LRG', np.float64(0.8527521524104966)) ('log_Mcent_LRG', np.float64(12.884190001264601)) ('sigma_M_LRG', np.float64(0.4103432737712521))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.685159435828174)) ('M_1_LRG', np.float64(13.889680502586996)) ('alpha_LRG', np.float64(1.047659755460522)) ('f_sigv_LRG', np.float64(0.901691186300859)) ('log_Mcent_LRG', np.float64(12.761431517117167)) ('sigma_M_LRG', np.float64(0.24771768248280707))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.77714446385676)) ('M_1_LRG', np.float64(13.898058274699329)) ('alpha_LRG', np.float64(1.0596068972182873)) ('f_sigv_LRG', np.float64(0.8555181498403177)) ('log_Mcent_LRG', np.float64(12.80181723360808)) ('sigma_M_LRG', np.float64(0.32732699792119124))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.77142092647922)) ('M_1_LRG', np.float64(13.87256065110608)) ('alpha_LRG', np.float64(1.0892270043108159)) ('f_sigv_LRG', np.float64(0.8367444970058221)) ('log_Mcent_LRG', np.float64(12.80936888893367)) ('sigma_M_LRG', np.float64(0.38028157584864347))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.400246762525818)) ('M_1_LRG', np.float64(13.93847447260743)) ('alpha_LRG', np.float64(1.217621664797918)) ('f_sigv_LRG', np.float64(0.8634820564530513)) ('log_Mcent_LRG', np.float64(12.73336728352635)) ('sigma_M_LRG', np.float64(0.21642984464845028))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 8] ('M_0_LRG', np.float64(12.688538177974376)) ('M_1_LRG', np.float64(13.968465864884875)) ('alpha_LRG', np.float64(1.074000834445115)) ('f_sigv_LRG', np.float64(0.8758540110208094)) ('log_Mcent_LRG', np.float64(12.862479071598694)) ('sigma_M_LRG', np.float64(0.3953873215812832))
[Interation 8] chi2=406.84198847435573
[Interation 8] chi2=413.65641145401906
[Interation 8] chi2=364.281307443389
[Interation 8] chi2=748.3101185913899
[Interation 8] chi2=345.2116285810707
[Interation 8] chi2=386.8989884783604
[Interation 8] chi2=380.7579489958563
[Interation 8] chi2=484.271893419173
[Interation 8] chi2=318.0185070516497
[Interation 8] chi2=398.5090429057787
[Interation 8] chi2=359.98378241428696
[Interation 8] chi2=354.5089652303273
[Interation 9] ('M_0_LRG', np.float64(12.73929909177487)) ('M_1_LRG', np.float64(13.84300980301358)) ('alpha_LRG', np.float64(1.080207048924106)) ('f_sigv_LRG', np.float64(0.8246778737606232)) ('log_Mcent_LRG', np.float64(12.726997129304744)) ('sigma_M_LRG', np.float64(0.23687519196198892))
[Interation 9] ('M_0_LRG', np.float64(12.814382850216113)) ('M_1_LRG', np.float64(13.863253690698594)) ('alpha_LRG', np.float64(0.9898192658298275)) ('f_sigv_LRG', np.float64(0.8676384875861113)) ('log_Mcent_LRG', np.float64(12.752696514958666)) ('sigma_M_LRG', np.float64(0.2678535880303531))
[Interation 9] ('M_0_LRG', np.float64(12.724624559744443)) ('M_1_LRG', np.float64(13.831978521186823)) ('alpha_LRG', np.float64(1.0762872844538982)) ('f_sigv_LRG', np.float64(0.8543775540863803)) ('log_Mcent_LRG', np.float64(12.69347652776366)) ('sigma_M_LRG', np.float64(0.16313025966882372))
[Interation 9] ('M_0_LRG', np.float64(12.726543705581296)) ('M_1_LRG', np.float64(13.846579565879283)) ('alpha_LRG', np.float64(1.0580219975669278)) ('f_sigv_LRG', np.float64(0.8681352503449139)) ('log_Mcent_LRG', np.float64(12.72771935552911)) ('sigma_M_LRG', np.float64(0.2263597613945187))
[Interation 9] chi2=274.0794474110364
[Interation 9] chi2=299.2631868303692
[Interation 9] chi2=324.11164061482805
[Interation 9] chi2=351.22414189087146
[Interation 9] ('M_0_LRG', np.float64(12.746470650602635)) ('M_1_LRG', np.float64(13.863360889807192)) ('alpha_LRG', np.float64(1.058286130047261)) ('f_sigv_LRG', np.float64(0.8763808085475538)) ('log_Mcent_LRG', np.float64(12.732721837581781)) ('sigma_M_LRG', np.float64(0.2175265658071301))
[Interation 9] ('M_0_LRG', np.float64(12.76474203855162)) ('M_1_LRG', np.float64(13.84268118971069)) ('alpha_LRG', np.float64(1.0456483844658715)) ('f_sigv_LRG', np.float64(0.8728761517512649)) ('log_Mcent_LRG', np.float64(12.718323255649466)) ('sigma_M_LRG', np.float64(0.20208928297412365))
[Interation 9] ('M_0_LRG', np.float64(12.811714726789305)) ('M_1_LRG', np.float64(13.82257979837915)) ('alpha_LRG', np.float64(1.0223557230962372)) ('f_sigv_LRG', np.float64(0.8718125249368941)) ('log_Mcent_LRG', np.float64(12.70563319689076)) ('sigma_M_LRG', np.float64(0.17365414688953906))
[Interation 9] ('M_0_LRG', np.float64(12.722564879838911)) ('M_1_LRG', np.float64(13.874341260701168)) ('alpha_LRG', np.float64(1.0712237026356306)) ('f_sigv_LRG', np.float64(0.8773917883530906)) ('log_Mcent_LRG', np.float64(12.740233882893625)) ('sigma_M_LRG', np.float64(0.23365822601196473))
[Interation 9] ('M_0_LRG', np.float64(12.790181473245179)) ('M_1_LRG', np.float64(13.85266363733464)) ('alpha_LRG', np.float64(1.0182128188878596)) ('f_sigv_LRG', np.float64(0.87722657449398)) ('log_Mcent_LRG', np.float64(12.727792284991192)) ('sigma_M_LRG', np.float64(0.21338852884355286))
[Interation 9] ('M_0_LRG', np.float64(12.834996067595343)) ('M_1_LRG', np.float64(13.821833237927528)) ('alpha_LRG', np.float64(1.0021610468433264)) ('f_sigv_LRG', np.float64(0.8608111524152742)) ('log_Mcent_LRG', np.float64(12.717906680933519)) ('sigma_M_LRG', np.float64(0.20319637204959173))
[Interation 9] ('M_0_LRG', np.float64(12.767968482686587)) ('M_1_LRG', np.float64(13.842981636430043)) ('alpha_LRG', np.float64(1.0530328329424479)) ('f_sigv_LRG', np.float64(0.8564019522698892)) ('log_Mcent_LRG', np.float64(12.728088689392806)) ('sigma_M_LRG', np.float64(0.22801946185606642))
[Interation 9] ('M_0_LRG', np.float64(12.814775009279286)) ('M_1_LRG', np.float64(13.82971933233826)) ('alpha_LRG', np.float64(1.0088978168976785)) ('f_sigv_LRG', np.float64(0.8823828026057299)) ('log_Mcent_LRG', np.float64(12.716700083196047)) ('sigma_M_LRG', np.float64(0.18698417680263651))
[Interation 9] ('M_0_LRG', np.float64(12.765327704614227)) ('M_1_LRG', np.float64(13.852746897823023)) ('alpha_LRG', np.float64(1.048720177185291)) ('f_sigv_LRG', np.float64(0.8662096407521893)) ('log_Mcent_LRG', np.float64(12.727970076774902)) ('sigma_M_LRG', np.float64(0.21758983186528535))
[Interation 9] ('M_0_LRG', np.float64(12.853423887301028)) ('M_1_LRG', np.float64(13.829033463178135)) ('alpha_LRG', np.float64(0.9859268217191341)) ('f_sigv_LRG', np.float64(0.8668559510334999)) ('log_Mcent_LRG', np.float64(12.730414835352377)) ('sigma_M_LRG', np.float64(0.23000834265168763))
[Interation 9] ('M_0_LRG', np.float64(12.791089483297755)) ('M_1_LRG', np.float64(13.851389717705322)) ('alpha_LRG', np.float64(1.0090646600757243)) ('f_sigv_LRG', np.float64(0.8764757034318205)) ('log_Mcent_LRG', np.float64(12.735338550244073)) ('sigma_M_LRG', np.float64(0.2385202686088852))
[Interation 9] ('M_0_LRG', np.float64(12.75924124294302)) ('M_1_LRG', np.float64(13.845243568298068)) ('alpha_LRG', np.float64(1.0281369364059687)) ('f_sigv_LRG', np.float64(0.8902357904633166)) ('log_Mcent_LRG', np.float64(12.714791295949434)) ('sigma_M_LRG', np.float64(0.1874690833386033))
[Interation 9] chi2=277.6097195239353
[Interation 9] chi2=330.13518082320314
[Interation 9] chi2=322.49639811154253
[Interation 9] chi2=335.26364124470564
[Interation 9] chi2=332.6342787251683
[Interation 9] chi2=268.58132425576866
[Interation 9] chi2=291.7196239299896
[Interation 9] chi2=297.75797643459583
[Interation 9] chi2=308.0101634202892
[Interation 9] chi2=312.83247157537215
[Interation 9] chi2=350.32600253230396
[Interation 9] chi2=306.5510281134647
[Interation 10] ('M_0_LRG', np.float64(12.79168593352535)) ('M_1_LRG', np.float64(13.840349533282746)) ('alpha_LRG', np.float64(1.03032235251539)) ('f_sigv_LRG', np.float64(0.8719460553860191)) ('log_Mcent_LRG', np.float64(12.727170430278765)) ('sigma_M_LRG', np.float64(0.21862866938131237))
[Interation 10] ('M_0_LRG', np.float64(12.792030400709216)) ('M_1_LRG', np.float64(13.841004554266938)) ('alpha_LRG', np.float64(1.0260787071692838)) ('f_sigv_LRG', np.float64(0.8693040691447863)) ('log_Mcent_LRG', np.float64(12.723509595347874)) ('sigma_M_LRG', np.float64(0.20954344388876683))
[Interation 10] ('M_0_LRG', np.float64(12.79761885916249)) ('M_1_LRG', np.float64(13.839301382443383)) ('alpha_LRG', np.float64(1.020412918724175)) ('f_sigv_LRG', np.float64(0.8653184849428619)) ('log_Mcent_LRG', np.float64(12.724739000216495)) ('sigma_M_LRG', np.float64(0.2117450713339702))
[Interation 10] ('M_0_LRG', np.float64(12.810037463717368)) ('M_1_LRG', np.float64(13.829993366193417)) ('alpha_LRG', np.float64(1.0158608416466834)) ('f_sigv_LRG', np.float64(0.8558726507139649)) ('log_Mcent_LRG', np.float64(12.718805526837048)) ('sigma_M_LRG', np.float64(0.2097255878672814))
[Interation 10] chi2=302.2395641552768
[Interation 10] chi2=293.1185012938849
[Interation 10] chi2=299.87380904352034
[Interation 10] chi2=329.87555496695256
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_07.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_07.npy
Set number of threads to 32
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.769716181907409)) ('M_1_LRG', np.float64(13.848741862594284)) ('alpha_LRG', np.float64(1.0414441047577467)) ('f_sigv_LRG', np.float64(0.8690422930792652)) ('log_Mcent_LRG', np.float64(12.727587151034806)) ('sigma_M_LRG', np.float64(0.21638259131355864))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3022928237915039
Start satellite assignement
Satellite assignement done 0.07399153709411621
LRG mock catalogue done 0.14799976348876953
613736 central galaxies, 85721 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6355082988739014
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_07.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:18
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:19
Load rppi measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:26
Load smu measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.561573539768597)) ('M_1_LRG', np.float64(13.286404271260974)) ('alpha_LRG', np.float64(0.9605463680973557)) ('f_sigv_LRG', np.float64(1.0053354058527737)) ('log_Mcent_LRG', np.float64(12.683863574557506)) ('sigma_M_LRG', np.float64(0.48740555283125847))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.463216209881935)) ('M_1_LRG', np.float64(13.543481485272386)) ('alpha_LRG', np.float64(1.0771451463642299)) ('f_sigv_LRG', np.float64(0.8890729364851802)) ('log_Mcent_LRG', np.float64(12.742541743121981)) ('sigma_M_LRG', np.float64(0.44949585023457983))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.559534291101231)) ('M_1_LRG', np.float64(13.70356311962843)) ('alpha_LRG', np.float64(0.949595857929255)) ('f_sigv_LRG', np.float64(0.8084670894781973)) ('log_Mcent_LRG', np.float64(12.763756783114282)) ('sigma_M_LRG', np.float64(0.5224286414336734))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.697254150934992)) ('M_1_LRG', np.float64(13.69916813389151)) ('alpha_LRG', np.float64(0.8791833656589944)) ('f_sigv_LRG', np.float64(0.8297065994946691)) ('log_Mcent_LRG', np.float64(12.676122360666897)) ('sigma_M_LRG', np.float64(0.3804282434441063))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.63011498024226)) ('M_1_LRG', np.float64(13.65949923349542)) ('alpha_LRG', np.float64(0.929955246961344)) ('f_sigv_LRG', np.float64(0.970199805066125)) ('log_Mcent_LRG', np.float64(12.725614662156248)) ('sigma_M_LRG', np.float64(0.5062673524077921))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.45261868128074)) ('M_1_LRG', np.float64(13.588656657481602)) ('alpha_LRG', np.float64(1.0402420814908289)) ('f_sigv_LRG', np.float64(0.8733044306847895)) ('log_Mcent_LRG', np.float64(12.788382117371773)) ('sigma_M_LRG', np.float64(0.41928879786187273))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.619730338161494)) ('M_1_LRG', np.float64(13.496033628529561)) ('alpha_LRG', np.float64(0.9516411697253416)) ('f_sigv_LRG', np.float64(1.081853458863256)) ('log_Mcent_LRG', np.float64(12.64759132528166)) ('sigma_M_LRG', np.float64(0.4887974896442454))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.684336833710322)) ('M_1_LRG', np.float64(13.659675464220477)) ('alpha_LRG', np.float64(0.7977546341415332)) ('f_sigv_LRG', np.float64(0.8304204635723487)) ('log_Mcent_LRG', np.float64(12.546746819473093)) ('sigma_M_LRG', np.float64(0.5051657858813426))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.423846981867083)) ('M_1_LRG', np.float64(13.757560401750988)) ('alpha_LRG', np.float64(1.1361382532407691)) ('f_sigv_LRG', np.float64(0.9246728056983883)) ('log_Mcent_LRG', np.float64(12.750220880336583)) ('sigma_M_LRG', np.float64(0.5157529945510293))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.544082939828982)) ('M_1_LRG', np.float64(13.635153570642505)) ('alpha_LRG', np.float64(0.9733296361050175)) ('f_sigv_LRG', np.float64(0.8516948900506229)) ('log_Mcent_LRG', np.float64(12.72551116238285)) ('sigma_M_LRG', np.float64(0.5541441979385825))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.678163281148429)) ('M_1_LRG', np.float64(13.554614967707675)) ('alpha_LRG', np.float64(1.0322818029923906)) ('f_sigv_LRG', np.float64(0.8856220296971419)) ('log_Mcent_LRG', np.float64(12.712021146009343)) ('sigma_M_LRG', np.float64(0.4948854740933911))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 10] ('M_0_LRG', np.float64(12.543264387904337)) ('M_1_LRG', np.float64(13.815159000782261)) ('alpha_LRG', np.float64(1.148649803230891)) ('f_sigv_LRG', np.float64(1.00956421424184)) ('log_Mcent_LRG', np.float64(12.80212640902491)) ('sigma_M_LRG', np.float64(0.5622993831516571))
[Interation 10] chi2=4976.979418752021
[Interation 10] chi2=1444.9462016805653
[Interation 10] chi2=9811.097882579039
[Interation 10] chi2=2104.7726621909515
[Interation 10] chi2=2732.120131486413
[Interation 10] chi2=7136.940952677822
[Interation 10] chi2=2475.668745390585
[Interation 10] chi2=4500.010042629073
[Interation 10] chi2=7132.771046091208
[Interation 10] chi2=2555.6705605459774
[Interation 10] chi2=2873.0073077764982
[Interation 10] chi2=3294.7626644755
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 11] ('M_0_LRG', np.float64(12.764713675768732)) ('M_1_LRG', np.float64(13.846343549463974)) ('alpha_LRG', np.float64(1.0593553013119694)) ('f_sigv_LRG', np.float64(0.8759535419812713)) ('log_Mcent_LRG', np.float64(12.730562627565329)) ('sigma_M_LRG', np.float64(0.23522232165283663))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 11] ('M_0_LRG', np.float64(12.575122468010466)) ('M_1_LRG', np.float64(13.931267026801677)) ('alpha_LRG', np.float64(1.1568884246873226)) ('f_sigv_LRG', np.float64(0.8493561396522264)) ('log_Mcent_LRG', np.float64(12.794448181761721)) ('sigma_M_LRG', np.float64(0.31598373337849966))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 11] ('M_0_LRG', np.float64(12.850906562989914)) ('M_1_LRG', np.float64(13.83995123399802)) ('alpha_LRG', np.float64(1.0113215842664596)) ('f_sigv_LRG', np.float64(0.9033282164657309)) ('log_Mcent_LRG', np.float64(12.71432609865801)) ('sigma_M_LRG', np.float64(0.2132647041751342))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 11] ('M_0_LRG', np.float64(12.710609042658852)) ('M_1_LRG', np.float64(13.928560948772583)) ('alpha_LRG', np.float64(1.0696616460966344)) ('f_sigv_LRG', np.float64(0.8601711913069074)) ('log_Mcent_LRG', np.float64(12.811322951319442)) ('sigma_M_LRG', np.float64(0.3468829060282581))
[Interation 11] chi2=298.44730272908544
[Interation 11] chi2=298.0780457794223
[Interation 11] chi2=454.00338844542966
[Interation 11] chi2=337.04926942932764
[Interation 11] ('M_0_LRG', np.float64(12.669033364865179)) ('M_1_LRG', np.float64(13.942763221695078)) ('alpha_LRG', np.float64(1.0852116081001246)) ('f_sigv_LRG', np.float64(0.8616316016780012)) ('log_Mcent_LRG', np.float64(12.819406258668161)) ('sigma_M_LRG', np.float64(0.35128382742022823))
[Interation 11] ('M_0_LRG', np.float64(12.685373040085395)) ('M_1_LRG', np.float64(13.864398806264623)) ('alpha_LRG', np.float64(1.1087323101736204)) ('f_sigv_LRG', np.float64(0.8443729536332047)) ('log_Mcent_LRG', np.float64(12.749501225243847)) ('sigma_M_LRG', np.float64(0.28444593135855123))
[Interation 11] ('M_0_LRG', np.float64(12.74020855718861)) ('M_1_LRG', np.float64(13.849527314741895)) ('alpha_LRG', np.float64(1.0740370733042974)) ('f_sigv_LRG', np.float64(0.8694066128509523)) ('log_Mcent_LRG', np.float64(12.732144287760566)) ('sigma_M_LRG', np.float64(0.242544066033192))
[Interation 11] ('M_0_LRG', np.float64(12.635613861772454)) ('M_1_LRG', np.float64(13.87587153548082)) ('alpha_LRG', np.float64(1.1115628593091085)) ('f_sigv_LRG', np.float64(0.8877892383720162)) ('log_Mcent_LRG', np.float64(12.739004095129152)) ('sigma_M_LRG', np.float64(0.239030172189657))
[Interation 11] ('M_0_LRG', np.float64(12.695260880667224)) ('M_1_LRG', np.float64(13.892961498970205)) ('alpha_LRG', np.float64(1.109788463511418)) ('f_sigv_LRG', np.float64(0.8537638371332019)) ('log_Mcent_LRG', np.float64(12.769589199224583)) ('sigma_M_LRG', np.float64(0.2871677906730951))
[Interation 11] ('M_0_LRG', np.float64(12.642402219588078)) ('M_1_LRG', np.float64(13.894783883696691)) ('alpha_LRG', np.float64(1.1160426542454254)) ('f_sigv_LRG', np.float64(0.8771130273452086)) ('log_Mcent_LRG', np.float64(12.760418541394934)) ('sigma_M_LRG', np.float64(0.2808262224719343))
[Interation 11] ('M_0_LRG', np.float64(12.78727609147824)) ('M_1_LRG', np.float64(13.880397402990496)) ('alpha_LRG', np.float64(1.0255799353259132)) ('f_sigv_LRG', np.float64(0.8810557220556292)) ('log_Mcent_LRG', np.float64(12.75176133781877)) ('sigma_M_LRG', np.float64(0.2464731096548317))
[Interation 11] ('M_0_LRG', np.float64(12.599577490080183)) ('M_1_LRG', np.float64(13.906987666102506)) ('alpha_LRG', np.float64(1.1270857608266471)) ('f_sigv_LRG', np.float64(0.8951654436734395)) ('log_Mcent_LRG', np.float64(12.770778326652028)) ('sigma_M_LRG', np.float64(0.28777410566976547))
[Interation 11] ('M_0_LRG', np.float64(12.686232562472673)) ('M_1_LRG', np.float64(13.872295030309896)) ('alpha_LRG', np.float64(1.1121554260488504)) ('f_sigv_LRG', np.float64(0.8521772067833426)) ('log_Mcent_LRG', np.float64(12.757596339354528)) ('sigma_M_LRG', np.float64(0.2785977243164228))
[Interation 11] ('M_0_LRG', np.float64(12.713046470599336)) ('M_1_LRG', np.float64(13.85084583911417)) ('alpha_LRG', np.float64(1.1188767646611208)) ('f_sigv_LRG', np.float64(0.8479805563488849)) ('log_Mcent_LRG', np.float64(12.741385998683466)) ('sigma_M_LRG', np.float64(0.26073394602521144))
[Interation 11] ('M_0_LRG', np.float64(12.731158368213004)) ('M_1_LRG', np.float64(13.879885335559601)) ('alpha_LRG', np.float64(1.0933424825376505)) ('f_sigv_LRG', np.float64(0.865202955695455)) ('log_Mcent_LRG', np.float64(12.751972003931227)) ('sigma_M_LRG', np.float64(0.2592686707853683))
[Interation 11] ('M_0_LRG', np.float64(12.698837496918557)) ('M_1_LRG', np.float64(13.896444261568583)) ('alpha_LRG', np.float64(1.086341915525032)) ('f_sigv_LRG', np.float64(0.8751651862073201)) ('log_Mcent_LRG', np.float64(12.76742309522339)) ('sigma_M_LRG', np.float64(0.2747390949000107))
[Interation 11] chi2=345.8330439537322
[Interation 11] chi2=293.5379048069594
[Interation 11] chi2=305.4889569215579
[Interation 11] chi2=362.6617936473379
[Interation 11] chi2=320.03237119166386
[Interation 11] chi2=298.50655685038106
[Interation 11] chi2=331.42833413133457
[Interation 11] chi2=303.2106514969637
[Interation 11] chi2=300.96541351604816
[Interation 11] chi2=294.89915739278786
[Interation 11] chi2=365.647457620891
[Interation 11] chi2=359.21630175292097
[Interation 12] ('M_0_LRG', np.float64(12.7473055955215)) ('M_1_LRG', np.float64(13.864102394393024)) ('alpha_LRG', np.float64(1.0846861478606022)) ('f_sigv_LRG', np.float64(0.8574689196930994)) ('log_Mcent_LRG', np.float64(12.752515223177692)) ('sigma_M_LRG', np.float64(0.27438697841081755))
[Interation 12] ('M_0_LRG', np.float64(12.7310567027222)) ('M_1_LRG', np.float64(13.869542580063941)) ('alpha_LRG', np.float64(1.0859212720842073)) ('f_sigv_LRG', np.float64(0.8667745910986308)) ('log_Mcent_LRG', np.float64(12.737476335863786)) ('sigma_M_LRG', np.float64(0.23063922154839483))
[Interation 12] ('M_0_LRG', np.float64(12.71101805829461)) ('M_1_LRG', np.float64(13.855943593856521)) ('alpha_LRG', np.float64(1.0926062724662244)) ('f_sigv_LRG', np.float64(0.8578950709601696)) ('log_Mcent_LRG', np.float64(12.726863001550136)) ('sigma_M_LRG', np.float64(0.23051481957643455))
[Interation 12] ('M_0_LRG', np.float64(12.731590145235565)) ('M_1_LRG', np.float64(13.879536419930183)) ('alpha_LRG', np.float64(1.0817820646700713)) ('f_sigv_LRG', np.float64(0.8660333727623313)) ('log_Mcent_LRG', np.float64(12.759065642599792)) ('sigma_M_LRG', np.float64(0.27129521687974756))
[Interation 12] chi2=346.29901997094015
[Interation 12] chi2=315.80824129641877
[Interation 12] chi2=320.12167647116183
[Interation 12] chi2=315.5149362001801
[Interation 12] ('M_0_LRG', np.float64(12.760719203336395)) ('M_1_LRG', np.float64(13.854883602405872)) ('alpha_LRG', np.float64(1.0604795545861379)) ('f_sigv_LRG', np.float64(0.8706164360313079)) ('log_Mcent_LRG', np.float64(12.734490540953097)) ('sigma_M_LRG', np.float64(0.23513694014500203))
[Interation 12] ('M_0_LRG', np.float64(12.786470479505942)) ('M_1_LRG', np.float64(13.859375974955075)) ('alpha_LRG', np.float64(1.0410842414516475)) ('f_sigv_LRG', np.float64(0.8448319403690557)) ('log_Mcent_LRG', np.float64(12.74304917735136)) ('sigma_M_LRG', np.float64(0.24939464652274573))
[Interation 12] ('M_0_LRG', np.float64(12.80668703617749)) ('M_1_LRG', np.float64(13.842792818640348)) ('alpha_LRG', np.float64(1.0269528255655738)) ('f_sigv_LRG', np.float64(0.8521983685157279)) ('log_Mcent_LRG', np.float64(12.73758352138704)) ('sigma_M_LRG', np.float64(0.24756517216579632))
[Interation 12] ('M_0_LRG', np.float64(12.782345639306897)) ('M_1_LRG', np.float64(13.864641917154277)) ('alpha_LRG', np.float64(1.0607204588602595)) ('f_sigv_LRG', np.float64(0.8614107877721475)) ('log_Mcent_LRG', np.float64(12.75485770708182)) ('sigma_M_LRG', np.float64(0.26474438141301093))
[Interation 12] ('M_0_LRG', np.float64(12.783390836434924)) ('M_1_LRG', np.float64(13.85692698008142)) ('alpha_LRG', np.float64(1.0628089173189939)) ('f_sigv_LRG', np.float64(0.8444624542508432)) ('log_Mcent_LRG', np.float64(12.739037478779197)) ('sigma_M_LRG', np.float64(0.23944349891443678))
[Interation 12] ('M_0_LRG', np.float64(12.828395582807593)) ('M_1_LRG', np.float64(13.85362053994829)) ('alpha_LRG', np.float64(1.0369585917550077)) ('f_sigv_LRG', np.float64(0.8525473751307487)) ('log_Mcent_LRG', np.float64(12.740655485470047)) ('sigma_M_LRG', np.float64(0.2373149404575952))
[Interation 12] ('M_0_LRG', np.float64(12.776773215630318)) ('M_1_LRG', np.float64(13.85107765680997)) ('alpha_LRG', np.float64(1.0633748615525926)) ('f_sigv_LRG', np.float64(0.8533015119261089)) ('log_Mcent_LRG', np.float64(12.7385909207627)) ('sigma_M_LRG', np.float64(0.24460678821867132))
[Interation 12] ('M_0_LRG', np.float64(12.800072768134916)) ('M_1_LRG', np.float64(13.826914766589017)) ('alpha_LRG', np.float64(1.047545892496052)) ('f_sigv_LRG', np.float64(0.8537967322844348)) ('log_Mcent_LRG', np.float64(12.725676913444662)) ('sigma_M_LRG', np.float64(0.2307746789279655))
[Interation 12] ('M_0_LRG', np.float64(12.767245466250802)) ('M_1_LRG', np.float64(13.848211750188959)) ('alpha_LRG', np.float64(1.0433196594116643)) ('f_sigv_LRG', np.float64(0.8678373508944024)) ('log_Mcent_LRG', np.float64(12.732138138169914)) ('sigma_M_LRG', np.float64(0.23967795079701615))
[Interation 12] ('M_0_LRG', np.float64(12.766655136742452)) ('M_1_LRG', np.float64(13.864162955153535)) ('alpha_LRG', np.float64(1.0479386180469688)) ('f_sigv_LRG', np.float64(0.8657590121664355)) ('log_Mcent_LRG', np.float64(12.750769697007895)) ('sigma_M_LRG', np.float64(0.25983311769867723))
[Interation 12] ('M_0_LRG', np.float64(12.811637922474134)) ('M_1_LRG', np.float64(13.844193499806872)) ('alpha_LRG', np.float64(1.0438282690496867)) ('f_sigv_LRG', np.float64(0.8587574412247355)) ('log_Mcent_LRG', np.float64(12.732946987295627)) ('sigma_M_LRG', np.float64(0.23321842111955915))
[Interation 12] ('M_0_LRG', np.float64(12.79400845289327)) ('M_1_LRG', np.float64(13.843593974847458)) ('alpha_LRG', np.float64(1.0510773420023176)) ('f_sigv_LRG', np.float64(0.8605394543940889)) ('log_Mcent_LRG', np.float64(12.736672416092107)) ('sigma_M_LRG', np.float64(0.2490019859616343))
[Interation 12] chi2=318.81879639073344
[Interation 12] chi2=318.2296873949581
[Interation 12] chi2=287.88954711176444
[Interation 12] chi2=318.23564454123164
[Interation 12] chi2=293.2780706693579
[Interation 12] chi2=349.44793024420346
[Interation 12] chi2=316.25697315114604
[Interation 12] chi2=296.9542132045912
[Interation 12] chi2=301.9132193112976
[Interation 12] chi2=275.8455283922929
[Interation 12] chi2=281.6975998474391
[Interation 12] chi2=293.65585605992044
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_08.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_08.npy
Set number of threads to 32
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.790183993918395)) ('M_1_LRG', np.float64(13.856515379263952)) ('alpha_LRG', np.float64(1.0392731086449432)) ('f_sigv_LRG', np.float64(0.8623973774357342)) ('log_Mcent_LRG', np.float64(12.743048146475989)) ('sigma_M_LRG', np.float64(0.24596159285410613))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.40296077728271484
Start satellite assignement
Satellite assignement done 0.07246947288513184
LRG mock catalogue done 0.14189839363098145
616182 central galaxies, 84624 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.7259502410888672
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_08.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:29
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:30
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:30
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:30
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.322859377729207)) ('M_1_LRG', np.float64(14.282730519237235)) ('alpha_LRG', np.float64(1.009341223772571)) ('f_sigv_LRG', np.float64(1.072660027810139)) ('log_Mcent_LRG', np.float64(12.931416874593713)) ('sigma_M_LRG', np.float64(0.23167122032382897))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.448759393374699)) ('M_1_LRG', np.float64(13.750048609619116)) ('alpha_LRG', np.float64(0.8237671289491822)) ('f_sigv_LRG', np.float64(0.853582847976107)) ('log_Mcent_LRG', np.float64(12.79027544177743)) ('sigma_M_LRG', np.float64(0.6164644843402111))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.48425133303217)) ('M_1_LRG', np.float64(13.550801708021831)) ('alpha_LRG', np.float64(0.8509017170838609)) ('f_sigv_LRG', np.float64(1.127447058139165)) ('log_Mcent_LRG', np.float64(12.666686949046765)) ('sigma_M_LRG', np.float64(0.5532178288502487))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.692208368831809)) ('M_1_LRG', np.float64(13.750677546735526)) ('alpha_LRG', np.float64(0.7808597414106903)) ('f_sigv_LRG', np.float64(0.8973576439461523)) ('log_Mcent_LRG', np.float64(12.760734957289184)) ('sigma_M_LRG', np.float64(0.4534583400620587))
[Interation 13] chi2=2150.5205890165976
[Interation 13] chi2=4016.7338549797323
[Interation 13] chi2=1879.378393415203
[Interation 13] chi2=5735.028897867568
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.543752348557472)) ('M_1_LRG', np.float64(13.964036273464876)) ('alpha_LRG', np.float64(1.1097601793672456)) ('f_sigv_LRG', np.float64(0.905104827712581)) ('log_Mcent_LRG', np.float64(12.826976508573061)) ('sigma_M_LRG', np.float64(0.333818905939106))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.562047634758827)) ('M_1_LRG', np.float64(13.954974873950734)) ('alpha_LRG', np.float64(1.156280899068649)) ('f_sigv_LRG', np.float64(0.8406643349565497)) ('log_Mcent_LRG', np.float64(12.828469078961819)) ('sigma_M_LRG', np.float64(0.3567561778681252))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.540750162530138)) ('M_1_LRG', np.float64(13.938380021028546)) ('alpha_LRG', np.float64(1.1502638637578957)) ('f_sigv_LRG', np.float64(0.8805634219312396)) ('log_Mcent_LRG', np.float64(12.835455603277978)) ('sigma_M_LRG', np.float64(0.3740193061944872))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.470767317170221)) ('M_1_LRG', np.float64(13.966340771290154)) ('alpha_LRG', np.float64(1.1459211848945086)) ('f_sigv_LRG', np.float64(0.9079275509727627)) ('log_Mcent_LRG', np.float64(12.806669190945337)) ('sigma_M_LRG', np.float64(0.3137077018809092))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.907156760717669)) ('M_1_LRG', np.float64(13.79137852335185)) ('alpha_LRG', np.float64(1.071263664519374)) ('f_sigv_LRG', np.float64(0.8613976297450833)) ('log_Mcent_LRG', np.float64(12.65166031967489)) ('sigma_M_LRG', np.float64(0.1583962888705946))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.618594624784429)) ('M_1_LRG', np.float64(14.000248762963661)) ('alpha_LRG', np.float64(1.1307094928903314)) ('f_sigv_LRG', np.float64(0.8697741437529946)) ('log_Mcent_LRG', np.float64(12.916664317076318)) ('sigma_M_LRG', np.float64(0.4728701995956527))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.876579775746855)) ('M_1_LRG', np.float64(13.892568786768294)) ('alpha_LRG', np.float64(0.9899217187038762)) ('f_sigv_LRG', np.float64(0.9197574569401014)) ('log_Mcent_LRG', np.float64(12.802179819349773)) ('sigma_M_LRG', np.float64(0.3491699849181691))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.756258047348611)) ('M_1_LRG', np.float64(13.847860233347538)) ('alpha_LRG', np.float64(1.117110591837406)) ('f_sigv_LRG', np.float64(0.815251561227614)) ('log_Mcent_LRG', np.float64(12.734190270303705)) ('sigma_M_LRG', np.float64(0.26408519530106417))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.51588118229256)) ('M_1_LRG', np.float64(13.893929263197336)) ('alpha_LRG', np.float64(1.108386590609556)) ('f_sigv_LRG', np.float64(0.931030805308042)) ('log_Mcent_LRG', np.float64(12.722764260167704)) ('sigma_M_LRG', np.float64(0.21787058319936903))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.478074422861987)) ('M_1_LRG', np.float64(13.922743828988013)) ('alpha_LRG', np.float64(1.1693473509970098)) ('f_sigv_LRG', np.float64(0.8510490279487974)) ('log_Mcent_LRG', np.float64(12.77326280314483)) ('sigma_M_LRG', np.float64(0.2924088019181473))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.554816032623037)) ('M_1_LRG', np.float64(13.979958494013887)) ('alpha_LRG', np.float64(1.1375439826632074)) ('f_sigv_LRG', np.float64(0.8609825590049809)) ('log_Mcent_LRG', np.float64(12.861866102620057)) ('sigma_M_LRG', np.float64(0.38177096521540677))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 13] ('M_0_LRG', np.float64(12.503797755957047)) ('M_1_LRG', np.float64(14.002915003529106)) ('alpha_LRG', np.float64(1.1375437082156978)) ('f_sigv_LRG', np.float64(0.8420041318755206)) ('log_Mcent_LRG', np.float64(12.858660870384602)) ('sigma_M_LRG', np.float64(0.4191475737788588))
[Interation 13] chi2=418.8682464612032
[Interation 13] chi2=394.0437080553629
[Interation 13] chi2=387.1945085294294
[Interation 13] chi2=324.24034399181295
[Interation 13] chi2=388.84930099217644
[Interation 13] chi2=1081.1296543434871
[Interation 13] chi2=433.9998587696366
[Interation 13] chi2=360.2793360838078
[Interation 13] chi2=396.66342683007144
[Interation 13] chi2=413.4335283912804
[Interation 13] chi2=399.936350814641
[Interation 13] chi2=442.23097803907683
[Interation 14] ('M_0_LRG', np.float64(12.696312601988)) ('M_1_LRG', np.float64(13.89795642132193)) ('alpha_LRG', np.float64(1.077169203433628)) ('f_sigv_LRG', np.float64(0.8715620152397712)) ('log_Mcent_LRG', np.float64(12.775165696253467)) ('sigma_M_LRG', np.float64(0.3050633690012807))
[Interation 14] ('M_0_LRG', np.float64(12.532926645085587)) ('M_1_LRG', np.float64(13.952036408122943)) ('alpha_LRG', np.float64(1.1557815457152676)) ('f_sigv_LRG', np.float64(0.8697909169002389)) ('log_Mcent_LRG', np.float64(12.804204068175135)) ('sigma_M_LRG', np.float64(0.32480979506131713))
[Interation 14] ('M_0_LRG', np.float64(12.76636192083658)) ('M_1_LRG', np.float64(13.853536238450555)) ('alpha_LRG', np.float64(1.0471137451521608)) ('f_sigv_LRG', np.float64(0.8762586424661538)) ('log_Mcent_LRG', np.float64(12.735381373798274)) ('sigma_M_LRG', np.float64(0.25347381154082876))
[Interation 14] ('M_0_LRG', np.float64(12.75184106984573)) ('M_1_LRG', np.float64(13.902245298973721)) ('alpha_LRG', np.float64(1.0362384093438213)) ('f_sigv_LRG', np.float64(0.8935862581746365)) ('log_Mcent_LRG', np.float64(12.755376918393209)) ('sigma_M_LRG', np.float64(0.2547966355283259))
[Interation 14] chi2=317.9952297378927
[Interation 14] chi2=346.54092044527073
[Interation 14] chi2=309.2128256892244
[Interation 14] chi2=319.14512409255326
[Interation 14] ('M_0_LRG', np.float64(12.797212880095007)) ('M_1_LRG', np.float64(13.860859059612773)) ('alpha_LRG', np.float64(1.033654891157456)) ('f_sigv_LRG', np.float64(0.8801452278815257)) ('log_Mcent_LRG', np.float64(12.743272226158112)) ('sigma_M_LRG', np.float64(0.24689119833023854))
[Interation 14] ('M_0_LRG', np.float64(12.727331250745161)) ('M_1_LRG', np.float64(13.883403084856013)) ('alpha_LRG', np.float64(1.0687615056339534)) ('f_sigv_LRG', np.float64(0.8753147441239778)) ('log_Mcent_LRG', np.float64(12.756734526083967)) ('sigma_M_LRG', np.float64(0.27174940820178345))
[Interation 14] ('M_0_LRG', np.float64(12.680809851917648)) ('M_1_LRG', np.float64(13.878990366114094)) ('alpha_LRG', np.float64(1.0911689689961364)) ('f_sigv_LRG', np.float64(0.8826205190860281)) ('log_Mcent_LRG', np.float64(12.742306999649346)) ('sigma_M_LRG', np.float64(0.2483068530521954))
[Interation 14] ('M_0_LRG', np.float64(12.765839316598909)) ('M_1_LRG', np.float64(13.86749066146355)) ('alpha_LRG', np.float64(1.0512904174423001)) ('f_sigv_LRG', np.float64(0.8717615961893291)) ('log_Mcent_LRG', np.float64(12.756565146310495)) ('sigma_M_LRG', np.float64(0.27925957194772544))
[Interation 14] ('M_0_LRG', np.float64(12.70037764217113)) ('M_1_LRG', np.float64(13.897177114567816)) ('alpha_LRG', np.float64(1.0799072714460107)) ('f_sigv_LRG', np.float64(0.8885964260322193)) ('log_Mcent_LRG', np.float64(12.776369661376366)) ('sigma_M_LRG', np.float64(0.30064223262340806))
[Interation 14] ('M_0_LRG', np.float64(12.687297813009659)) ('M_1_LRG', np.float64(13.902027536311707)) ('alpha_LRG', np.float64(1.0862860701682762)) ('f_sigv_LRG', np.float64(0.889633652469876)) ('log_Mcent_LRG', np.float64(12.779345090562977)) ('sigma_M_LRG', np.float64(0.3058924247286573))
[Interation 14] ('M_0_LRG', np.float64(12.7112514411904)) ('M_1_LRG', np.float64(13.893511417877066)) ('alpha_LRG', np.float64(1.0892392631489503)) ('f_sigv_LRG', np.float64(0.8704953771787406)) ('log_Mcent_LRG', np.float64(12.777756701177616)) ('sigma_M_LRG', np.float64(0.3077634147934059))
[Interation 14] ('M_0_LRG', np.float64(12.789022664813348)) ('M_1_LRG', np.float64(13.884735831068056)) ('alpha_LRG', np.float64(1.0380035762666764)) ('f_sigv_LRG', np.float64(0.882678350504286)) ('log_Mcent_LRG', np.float64(12.769482794634596)) ('sigma_M_LRG', np.float64(0.2865997513507754))
[Interation 14] ('M_0_LRG', np.float64(12.731869855550139)) ('M_1_LRG', np.float64(13.86351143859011)) ('alpha_LRG', np.float64(1.0676913545961675)) ('f_sigv_LRG', np.float64(0.8742641673184007)) ('log_Mcent_LRG', np.float64(12.741939231609521)) ('sigma_M_LRG', np.float64(0.2536014354514967))
[Interation 14] ('M_0_LRG', np.float64(12.758339871463765)) ('M_1_LRG', np.float64(13.875158679241835)) ('alpha_LRG', np.float64(1.070420675592153)) ('f_sigv_LRG', np.float64(0.8605520906633353)) ('log_Mcent_LRG', np.float64(12.773693763559441)) ('sigma_M_LRG', np.float64(0.3094473562319868))
[Interation 14] ('M_0_LRG', np.float64(12.690976076538217)) ('M_1_LRG', np.float64(13.88628652913039)) ('alpha_LRG', np.float64(1.0873965578134042)) ('f_sigv_LRG', np.float64(0.8673541117318238)) ('log_Mcent_LRG', np.float64(12.758939574271325)) ('sigma_M_LRG', np.float64(0.2783938551356112))
[Interation 14] ('M_0_LRG', np.float64(12.732649281047843)) ('M_1_LRG', np.float64(13.88538982959322)) ('alpha_LRG', np.float64(1.0705871648040672)) ('f_sigv_LRG', np.float64(0.8912834559671767)) ('log_Mcent_LRG', np.float64(12.759553634397632)) ('sigma_M_LRG', np.float64(0.268208480449394))
[Interation 14] chi2=282.0819620252207
[Interation 14] chi2=336.9192352415032
[Interation 14] chi2=311.034287168624
[Interation 14] chi2=364.11388746419794
[Interation 14] chi2=305.2694056848606
[Interation 14] chi2=346.6993482417503
[Interation 14] chi2=349.4798212244448
[Interation 14] chi2=329.4664376087532
[Interation 14] chi2=312.2048714754344
[Interation 14] chi2=333.36779101116343
[Interation 14] chi2=312.7265431448057
[Interation 14] chi2=311.821279298898
[Interation 15] ('M_0_LRG', np.float64(12.730935307398079)) ('M_1_LRG', np.float64(13.89740781918059)) ('alpha_LRG', np.float64(1.0640066084653685)) ('f_sigv_LRG', np.float64(0.8816200629420493)) ('log_Mcent_LRG', np.float64(12.772404820678137)) ('sigma_M_LRG', np.float64(0.2907113284462377))
[Interation 15] ('M_0_LRG', np.float64(12.750490933569775)) ('M_1_LRG', np.float64(13.853689320131299)) ('alpha_LRG', np.float64(1.0673602974770566)) ('f_sigv_LRG', np.float64(0.8799281980554113)) ('log_Mcent_LRG', np.float64(12.737836673161587)) ('sigma_M_LRG', np.float64(0.24260925078243556))
[Interation 15] ('M_0_LRG', np.float64(12.765525878477327)) ('M_1_LRG', np.float64(13.86836300120057)) ('alpha_LRG', np.float64(1.0530018990438774)) ('f_sigv_LRG', np.float64(0.8673366959470186)) ('log_Mcent_LRG', np.float64(12.757195736427102)) ('sigma_M_LRG', np.float64(0.2764917260600449))
[Interation 15] ('M_0_LRG', np.float64(12.793553346843352)) ('M_1_LRG', np.float64(13.852012838539439)) ('alpha_LRG', np.float64(1.0312001341497175)) ('f_sigv_LRG', np.float64(0.8776861810993254)) ('log_Mcent_LRG', np.float64(12.742811123406593)) ('sigma_M_LRG', np.float64(0.2545397731771186))
[Interation 15] chi2=340.45413661054897
[Interation 15] chi2=295.4508008058435
[Interation 15] chi2=341.8632351994652
[Interation 15] chi2=326.05666840568347
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_09.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_09.npy
Set number of threads to 32
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.781169195934739)) ('M_1_LRG', np.float64(13.850446783422134)) ('alpha_LRG', np.float64(1.0557495997073412)) ('f_sigv_LRG', np.float64(0.8597578624825686)) ('log_Mcent_LRG', np.float64(12.742456986264184)) ('sigma_M_LRG', np.float64(0.25675266454968027))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3396313190460205
Start satellite assignement
Satellite assignement done 0.07265686988830566
LRG mock catalogue done 0.14667010307312012
614461 central galaxies, 84419 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6774840354919434
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_09.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:17
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:18
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:18
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:18
Load rppi measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:19
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:19
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Load smu measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:19
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:19
Load rppi measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.359213663589808)) ('M_1_LRG', np.float64(13.596706308877305)) ('alpha_LRG', np.float64(1.1275782125945304)) ('f_sigv_LRG', np.float64(0.994940405045304)) ('log_Mcent_LRG', np.float64(12.804004492099489)) ('sigma_M_LRG', np.float64(0.5710429569303043))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.580882036570003)) ('M_1_LRG', np.float64(13.401200423364454)) ('alpha_LRG', np.float64(0.9648260666796371)) ('f_sigv_LRG', np.float64(0.9474466179351606)) ('log_Mcent_LRG', np.float64(12.759889591989806)) ('sigma_M_LRG', np.float64(0.40138352000248445))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.531593714137738)) ('M_1_LRG', np.float64(13.608895416314933)) ('alpha_LRG', np.float64(1.0157470108358368)) ('f_sigv_LRG', np.float64(0.9958994239110974)) ('log_Mcent_LRG', np.float64(12.627651053332743)) ('sigma_M_LRG', np.float64(0.4224431482669319))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.526474572341332)) ('M_1_LRG', np.float64(13.409126690459718)) ('alpha_LRG', np.float64(1.0028267659499885)) ('f_sigv_LRG', np.float64(0.992087479967538)) ('log_Mcent_LRG', np.float64(12.812420968487675)) ('sigma_M_LRG', np.float64(0.5217038949407264))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.654269363788323)) ('M_1_LRG', np.float64(13.579224659916278)) ('alpha_LRG', np.float64(1.0283314877872194)) ('f_sigv_LRG', np.float64(0.8921494007378961)) ('log_Mcent_LRG', np.float64(12.694336382601128)) ('sigma_M_LRG', np.float64(0.48969701518440206))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.45191592133356)) ('M_1_LRG', np.float64(13.424984392873421)) ('alpha_LRG', np.float64(0.9569986456074456)) ('f_sigv_LRG', np.float64(0.9976405931723661)) ('log_Mcent_LRG', np.float64(12.735769255746831)) ('sigma_M_LRG', np.float64(0.6440207851812163))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.439741062848992)) ('M_1_LRG', np.float64(13.533171574462674)) ('alpha_LRG', np.float64(0.886014446146126)) ('f_sigv_LRG', np.float64(0.9997292562475584)) ('log_Mcent_LRG', np.float64(12.776023275123073)) ('sigma_M_LRG', np.float64(0.4305877847124368))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.420504053732081)) ('M_1_LRG', np.float64(13.384225832953113)) ('alpha_LRG', np.float64(0.9646882772273692)) ('f_sigv_LRG', np.float64(1.0463976833005226)) ('log_Mcent_LRG', np.float64(12.714877537796344)) ('sigma_M_LRG', np.float64(0.4031051217860081))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.616730831171736)) ('M_1_LRG', np.float64(13.523844374216024)) ('alpha_LRG', np.float64(0.9751222292828534)) ('f_sigv_LRG', np.float64(0.9596156802136907)) ('log_Mcent_LRG', np.float64(12.689620093577114)) ('sigma_M_LRG', np.float64(0.5617012052548215))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.702863731977228)) ('M_1_LRG', np.float64(13.45915636877533)) ('alpha_LRG', np.float64(1.029568214823496)) ('f_sigv_LRG', np.float64(0.8982847785250233)) ('log_Mcent_LRG', np.float64(12.615504678424571)) ('sigma_M_LRG', np.float64(0.5226428121678548))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.470313768615854)) ('M_1_LRG', np.float64(13.650768250397002)) ('alpha_LRG', np.float64(0.9884975152867012)) ('f_sigv_LRG', np.float64(1.020966159147094)) ('log_Mcent_LRG', np.float64(12.691537401458907)) ('sigma_M_LRG', np.float64(0.4813694954823614))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 15] ('M_0_LRG', np.float64(12.395183558462312)) ('M_1_LRG', np.float64(13.666950206416027)) ('alpha_LRG', np.float64(0.8854734709173707)) ('f_sigv_LRG', np.float64(0.8929560723664866)) ('log_Mcent_LRG', np.float64(12.764821907789003)) ('sigma_M_LRG', np.float64(0.6409535364346424))
[Interation 15] chi2=4451.812465421374
[Interation 15] chi2=3250.9122388185333
[Interation 15] chi2=15437.087120017442
[Interation 15] chi2=2493.2701364683276
[Interation 15] chi2=13484.571137087927
[Interation 15] chi2=5797.81360670958
[Interation 15] chi2=7665.696651470209
[Interation 15] chi2=11611.591347320724
[Interation 15] chi2=4416.296987392344
[Interation 15] chi2=4384.305066759148
[Interation 15] chi2=3281.6648156438073
[Interation 15] chi2=4881.190876159622
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 16] ('M_0_LRG', np.float64(12.749945076957253)) ('M_1_LRG', np.float64(13.859955305411052)) ('alpha_LRG', np.float64(1.1468544584918279)) ('f_sigv_LRG', np.float64(0.8521608150633393)) ('log_Mcent_LRG', np.float64(12.7352348346062)) ('sigma_M_LRG', np.float64(0.2518656263826668))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 16] ('M_0_LRG', np.float64(12.673093664771155)) ('M_1_LRG', np.float64(13.91423461642014)) ('alpha_LRG', np.float64(1.1454604244611588)) ('f_sigv_LRG', np.float64(0.8289679341654844)) ('log_Mcent_LRG', np.float64(12.824846497786389)) ('sigma_M_LRG', np.float64(0.3806858806357892))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 16] ('M_0_LRG', np.float64(12.90163851555675)) ('M_1_LRG', np.float64(13.861988307644959)) ('alpha_LRG', np.float64(0.9476056720456)) ('f_sigv_LRG', np.float64(0.8109725489343205)) ('log_Mcent_LRG', np.float64(12.746827257267464)) ('sigma_M_LRG', np.float64(0.24396425951611478))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 16] ('M_0_LRG', np.float64(12.763179221619957)) ('M_1_LRG', np.float64(13.867533391267216)) ('alpha_LRG', np.float64(0.9838610297817845)) ('f_sigv_LRG', np.float64(0.8760250129332103)) ('log_Mcent_LRG', np.float64(12.780049128910957)) ('sigma_M_LRG', np.float64(0.33537136024386704))
[Interation 16] chi2=412.8892739764455
[Interation 16] chi2=320.9286693062315
[Interation 16] chi2=380.21744877991046
[Interation 16] chi2=401.03591891250534
[Interation 16] ('M_0_LRG', np.float64(12.709794354323636)) ('M_1_LRG', np.float64(13.889264356827631)) ('alpha_LRG', np.float64(1.0776963375800077)) ('f_sigv_LRG', np.float64(0.8656811626858346)) ('log_Mcent_LRG', np.float64(12.767190942048357)) ('sigma_M_LRG', np.float64(0.27645869396702355))
[Interation 16] ('M_0_LRG', np.float64(12.719235647222519)) ('M_1_LRG', np.float64(13.823983239404106)) ('alpha_LRG', np.float64(1.0828712833018006)) ('f_sigv_LRG', np.float64(0.8670431334376986)) ('log_Mcent_LRG', np.float64(12.694716705097436)) ('sigma_M_LRG', np.float64(0.17366705717821584))
[Interation 16] ('M_0_LRG', np.float64(12.73143284102549)) ('M_1_LRG', np.float64(13.863978034326948)) ('alpha_LRG', np.float64(1.068772927701052)) ('f_sigv_LRG', np.float64(0.8675465253949547)) ('log_Mcent_LRG', np.float64(12.740562188112124)) ('sigma_M_LRG', np.float64(0.24877866846936725))
[Interation 16] ('M_0_LRG', np.float64(12.773824637716245)) ('M_1_LRG', np.float64(13.86947802394347)) ('alpha_LRG', np.float64(1.0460800900118488)) ('f_sigv_LRG', np.float64(0.8610418485903351)) ('log_Mcent_LRG', np.float64(12.741805486790993)) ('sigma_M_LRG', np.float64(0.2339092331282444))
[Interation 16] ('M_0_LRG', np.float64(12.760542278145456)) ('M_1_LRG', np.float64(13.826766806319199)) ('alpha_LRG', np.float64(1.048647085376168)) ('f_sigv_LRG', np.float64(0.8554700625045426)) ('log_Mcent_LRG', np.float64(12.69976926341362)) ('sigma_M_LRG', np.float64(0.17691693281637855))
[Interation 16] ('M_0_LRG', np.float64(12.716096526031826)) ('M_1_LRG', np.float64(13.886998455459763)) ('alpha_LRG', np.float64(1.0372684297205073)) ('f_sigv_LRG', np.float64(0.881472559893305)) ('log_Mcent_LRG', np.float64(12.75815220319766)) ('sigma_M_LRG', np.float64(0.2631197988529792))
[Interation 16] ('M_0_LRG', np.float64(12.799270190970045)) ('M_1_LRG', np.float64(13.861528901264693)) ('alpha_LRG', np.float64(1.016956995199382)) ('f_sigv_LRG', np.float64(0.8710611219603507)) ('log_Mcent_LRG', np.float64(12.757185216130102)) ('sigma_M_LRG', np.float64(0.2810609353631205))
[Interation 16] ('M_0_LRG', np.float64(12.71650935859514)) ('M_1_LRG', np.float64(13.841790107676184)) ('alpha_LRG', np.float64(1.062624530786081)) ('f_sigv_LRG', np.float64(0.878297883137257)) ('log_Mcent_LRG', np.float64(12.696821510874045)) ('sigma_M_LRG', np.float64(0.15959708128490452))
[Interation 16] ('M_0_LRG', np.float64(12.779113439562972)) ('M_1_LRG', np.float64(13.8588737083897)) ('alpha_LRG', np.float64(1.0577835210602096)) ('f_sigv_LRG', np.float64(0.8571246101513962)) ('log_Mcent_LRG', np.float64(12.752176308239102)) ('sigma_M_LRG', np.float64(0.25450088010722344))
[Interation 16] ('M_0_LRG', np.float64(12.77384914459789)) ('M_1_LRG', np.float64(13.851730301211573)) ('alpha_LRG', np.float64(1.0500303588684505)) ('f_sigv_LRG', np.float64(0.8626386961314088)) ('log_Mcent_LRG', np.float64(12.727181771947185)) ('sigma_M_LRG', np.float64(0.20956182017513098))
[Interation 16] ('M_0_LRG', np.float64(12.816717083682752)) ('M_1_LRG', np.float64(13.890314788269187)) ('alpha_LRG', np.float64(1.004629985913588)) ('f_sigv_LRG', np.float64(0.8664955394835385)) ('log_Mcent_LRG', np.float64(12.796886617100505)) ('sigma_M_LRG', np.float64(0.3317703373845094))
[Interation 16] ('M_0_LRG', np.float64(12.733367673367386)) ('M_1_LRG', np.float64(13.8241408113512)) ('alpha_LRG', np.float64(1.0853922637883662)) ('f_sigv_LRG', np.float64(0.8569117204589761)) ('log_Mcent_LRG', np.float64(12.68449316561515)) ('sigma_M_LRG', np.float64(0.14517230032392914))
[Interation 16] chi2=294.24534016162005
[Interation 16] chi2=331.55178323771173
[Interation 16] chi2=317.7528082771513
[Interation 16] chi2=334.0785916024053
[Interation 16] chi2=296.58806838222665
[Interation 16] chi2=285.4448077572745
[Interation 16] chi2=278.49744869065375
[Interation 16] chi2=321.97706165425154
[Interation 16] chi2=349.26206192945904
[Interation 16] chi2=326.3951822496431
[Interation 16] chi2=318.6141111115418
[Interation 16] chi2=299.06048394968815
[Interation 17] ('M_0_LRG', np.float64(12.76021784346544)) ('M_1_LRG', np.float64(13.843347318019168)) ('alpha_LRG', np.float64(1.046523925167891)) ('f_sigv_LRG', np.float64(0.8682172453415915)) ('log_Mcent_LRG', np.float64(12.715178258801526)) ('sigma_M_LRG', np.float64(0.19371499863777475))
[Interation 17] ('M_0_LRG', np.float64(12.815416200605508)) ('M_1_LRG', np.float64(13.867337278126076)) ('alpha_LRG', np.float64(1.0078127358857283)) ('f_sigv_LRG', np.float64(0.8725401211823769)) ('log_Mcent_LRG', np.float64(12.752781070393427)) ('sigma_M_LRG', np.float64(0.2634336093287691))
[Interation 17] ('M_0_LRG', np.float64(12.722558482687605)) ('M_1_LRG', np.float64(13.847118005767923)) ('alpha_LRG', np.float64(1.0675914343266624)) ('f_sigv_LRG', np.float64(0.8756427993028196)) ('log_Mcent_LRG', np.float64(12.716463350676603)) ('sigma_M_LRG', np.float64(0.20442182748044663))
[Interation 17] ('M_0_LRG', np.float64(12.72103150139167)) ('M_1_LRG', np.float64(13.84939953369344)) ('alpha_LRG', np.float64(1.0706302517864141)) ('f_sigv_LRG', np.float64(0.8666662002236657)) ('log_Mcent_LRG', np.float64(12.711656290238425)) ('sigma_M_LRG', np.float64(0.18963456606846318))
[Interation 17] chi2=268.22742812185794
[Interation 17] chi2=361.01733011673724
[Interation 17] chi2=301.1295078068979
[Interation 17] chi2=292.2803907245521
[Interation 17] ('M_0_LRG', np.float64(12.762208370972424)) ('M_1_LRG', np.float64(13.848897162310008)) ('alpha_LRG', np.float64(1.0480799413944644)) ('f_sigv_LRG', np.float64(0.8700763101781952)) ('log_Mcent_LRG', np.float64(12.723969095705925)) ('sigma_M_LRG', np.float64(0.20969023947500975))
[Interation 17] ('M_0_LRG', np.float64(12.75065535935597)) ('M_1_LRG', np.float64(13.853262608961547)) ('alpha_LRG', np.float64(1.0543588669268664)) ('f_sigv_LRG', np.float64(0.8711697653837165)) ('log_Mcent_LRG', np.float64(12.72294175319737)) ('sigma_M_LRG', np.float64(0.20406108070260248))
[Interation 17] ('M_0_LRG', np.float64(12.729671733074403)) ('M_1_LRG', np.float64(13.85219785631697)) ('alpha_LRG', np.float64(1.0665997230777156)) ('f_sigv_LRG', np.float64(0.8720674920185405)) ('log_Mcent_LRG', np.float64(12.718873918495937)) ('sigma_M_LRG', np.float64(0.1976102234036296))
[Interation 17] ('M_0_LRG', np.float64(12.735924062483642)) ('M_1_LRG', np.float64(13.870433769207281)) ('alpha_LRG', np.float64(1.0630842853480977)) ('f_sigv_LRG', np.float64(0.8720318000516778)) ('log_Mcent_LRG', np.float64(12.735751390936425)) ('sigma_M_LRG', np.float64(0.2221599468212746))
[Interation 17] ('M_0_LRG', np.float64(12.737789767381775)) ('M_1_LRG', np.float64(13.842790208986651)) ('alpha_LRG', np.float64(1.0648003279665055)) ('f_sigv_LRG', np.float64(0.861388380744722)) ('log_Mcent_LRG', np.float64(12.715898988089918)) ('sigma_M_LRG', np.float64(0.19903891648774907))
[Interation 17] ('M_0_LRG', np.float64(12.743096291221443)) ('M_1_LRG', np.float64(13.883845195052132)) ('alpha_LRG', np.float64(1.0557819774047792)) ('f_sigv_LRG', np.float64(0.8779479479342676)) ('log_Mcent_LRG', np.float64(12.75021444585348)) ('sigma_M_LRG', np.float64(0.24820254932965835))
[Interation 17] ('M_0_LRG', np.float64(12.74287115631991)) ('M_1_LRG', np.float64(13.840756645772698)) ('alpha_LRG', np.float64(1.054824678506285)) ('f_sigv_LRG', np.float64(0.8685013317805588)) ('log_Mcent_LRG', np.float64(12.712975493536531)) ('sigma_M_LRG', np.float64(0.20028635764570962))
[Interation 17] ('M_0_LRG', np.float64(12.734357083589337)) ('M_1_LRG', np.float64(13.859451111481969)) ('alpha_LRG', np.float64(1.0701443929613308)) ('f_sigv_LRG', np.float64(0.8621129398762947)) ('log_Mcent_LRG', np.float64(12.731816022024022)) ('sigma_M_LRG', np.float64(0.22808808013537452))
[Interation 17] ('M_0_LRG', np.float64(12.73946452698528)) ('M_1_LRG', np.float64(13.847110415760161)) ('alpha_LRG', np.float64(1.054826273253019)) ('f_sigv_LRG', np.float64(0.8742992546112507)) ('log_Mcent_LRG', np.float64(12.718831239489427)) ('sigma_M_LRG', np.float64(0.20461665182208078))
[Interation 17] ('M_0_LRG', np.float64(12.737497947422286)) ('M_1_LRG', np.float64(13.86092240414024)) ('alpha_LRG', np.float64(1.0629007402597976)) ('f_sigv_LRG', np.float64(0.8703199870530758)) ('log_Mcent_LRG', np.float64(12.728926251141568)) ('sigma_M_LRG', np.float64(0.21533612987033646))
[Interation 17] ('M_0_LRG', np.float64(12.746921629316024)) ('M_1_LRG', np.float64(13.857754443064199)) ('alpha_LRG', np.float64(1.0556290821264234)) ('f_sigv_LRG', np.float64(0.8654851933708118)) ('log_Mcent_LRG', np.float64(12.730202808294825)) ('sigma_M_LRG', np.float64(0.2182882118014372))
[Interation 17] ('M_0_LRG', np.float64(12.747250371975783)) ('M_1_LRG', np.float64(13.86429617931228)) ('alpha_LRG', np.float64(1.0598235088591292)) ('f_sigv_LRG', np.float64(0.8689321661548381)) ('log_Mcent_LRG', np.float64(12.7333197932276)) ('sigma_M_LRG', np.float64(0.2192719248415086))
[Interation 17] chi2=318.18075018401794
[Interation 17] chi2=312.9683270222356
[Interation 17] chi2=307.2490350757011
[Interation 17] chi2=339.62720381640065
[Interation 17] chi2=304.76253866748635
[Interation 17] chi2=303.31439756612974
[Interation 17] chi2=294.76340493905093
[Interation 17] chi2=297.12375889327865
[Interation 17] chi2=239.96589706542215
[Interation 17] chi2=304.90014708813806
[Interation 17] chi2=290.59141513961515
[Interation 17] chi2=316.11547052551055
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_10.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_10.npy
Set number of threads to 32
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.748524257562)) ('M_1_LRG', np.float64(13.861894083580735)) ('alpha_LRG', np.float64(1.0561692142623484)) ('f_sigv_LRG', np.float64(0.8705854582286916)) ('log_Mcent_LRG', np.float64(12.728754730549229)) ('sigma_M_LRG', np.float64(0.20705336840201127))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3115816116333008
Start satellite assignement
Satellite assignement done 0.07314658164978027
LRG mock catalogue done 0.1470017433166504
614661 central galaxies, 85795 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.7455432415008545
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_10.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:18
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:18
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:18
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:18
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:26
Load correlation matrix for LRG at z0.5 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:19
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.55451948827069)) ('M_1_LRG', np.float64(13.552712964702854)) ('alpha_LRG', np.float64(1.0782899097503638)) ('f_sigv_LRG', np.float64(0.9552032859423358)) ('log_Mcent_LRG', np.float64(12.81990860632182)) ('sigma_M_LRG', np.float64(0.5027653410971933))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.469022550901846)) ('M_1_LRG', np.float64(13.85000658678287)) ('alpha_LRG', np.float64(0.9220327489521607)) ('f_sigv_LRG', np.float64(0.8633802854519451)) ('log_Mcent_LRG', np.float64(12.76137246875977)) ('sigma_M_LRG', np.float64(0.4375429350244157))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.406375161901696)) ('M_1_LRG', np.float64(13.755766635294727)) ('alpha_LRG', np.float64(0.9599103720404053)) ('f_sigv_LRG', np.float64(0.9078468512403559)) ('log_Mcent_LRG', np.float64(12.7398256208738)) ('sigma_M_LRG', np.float64(0.43775279415795604))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.483506529046377)) ('M_1_LRG', np.float64(13.715256812210702)) ('alpha_LRG', np.float64(0.951597966750166)) ('f_sigv_LRG', np.float64(1.0179810803746703)) ('log_Mcent_LRG', np.float64(12.625891358296089)) ('sigma_M_LRG', np.float64(0.5358352732919643))
[Interation 18] chi2=7740.656135981233
[Interation 18] chi2=1524.3861703690868
[Interation 18] chi2=1793.9084722612379
[Interation 18] chi2=6806.109649291267
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.520615534296171)) ('M_1_LRG', np.float64(13.88866150526741)) ('alpha_LRG', np.float64(1.2059059180540201)) ('f_sigv_LRG', np.float64(0.8110942198332989)) ('log_Mcent_LRG', np.float64(12.776541386772555)) ('sigma_M_LRG', np.float64(0.3150837608191873))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.719843649801888)) ('M_1_LRG', np.float64(13.846147603563205)) ('alpha_LRG', np.float64(1.1155189594643393)) ('f_sigv_LRG', np.float64(0.8182175969733438)) ('log_Mcent_LRG', np.float64(12.710696143143325)) ('sigma_M_LRG', np.float64(0.18963611031344713))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.757328047026949)) ('M_1_LRG', np.float64(13.917944320855161)) ('alpha_LRG', np.float64(1.0780073201071299)) ('f_sigv_LRG', np.float64(0.8497028908325491)) ('log_Mcent_LRG', np.float64(12.825844529344446)) ('sigma_M_LRG', np.float64(0.3487771471879889))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.510659943640748)) ('M_1_LRG', np.float64(13.910117698672984)) ('alpha_LRG', np.float64(1.1457172921262209)) ('f_sigv_LRG', np.float64(0.8301749483821995)) ('log_Mcent_LRG', np.float64(12.746273434223218)) ('sigma_M_LRG', np.float64(0.23902862623793003))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.653347977880255)) ('M_1_LRG', np.float64(13.928200561525047)) ('alpha_LRG', np.float64(1.0603941103730576)) ('f_sigv_LRG', np.float64(0.926537788025954)) ('log_Mcent_LRG', np.float64(12.778376807605513)) ('sigma_M_LRG', np.float64(0.2825287858357286))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.58600949726111)) ('M_1_LRG', np.float64(13.868250210794193)) ('alpha_LRG', np.float64(1.1809327562910354)) ('f_sigv_LRG', np.float64(0.8698242656931798)) ('log_Mcent_LRG', np.float64(12.734958093216674)) ('sigma_M_LRG', np.float64(0.25771739149756523))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.517727825516088)) ('M_1_LRG', np.float64(13.922653383857284)) ('alpha_LRG', np.float64(1.0748038268961662)) ('f_sigv_LRG', np.float64(0.8854487412172751)) ('log_Mcent_LRG', np.float64(12.772473105333209)) ('sigma_M_LRG', np.float64(0.2874865581222667))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.604860660967663)) ('M_1_LRG', np.float64(13.909425926272007)) ('alpha_LRG', np.float64(1.1269295611905763)) ('f_sigv_LRG', np.float64(0.8877671343021103)) ('log_Mcent_LRG', np.float64(12.791385836424652)) ('sigma_M_LRG', np.float64(0.29895756461643075))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.640497747431363)) ('M_1_LRG', np.float64(13.91954821053333)) ('alpha_LRG', np.float64(1.1422600497743574)) ('f_sigv_LRG', np.float64(0.8279132295368341)) ('log_Mcent_LRG', np.float64(12.807930098106189)) ('sigma_M_LRG', np.float64(0.3429083815117794))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.56129871789718)) ('M_1_LRG', np.float64(13.943784983264637)) ('alpha_LRG', np.float64(1.0652882351714261)) ('f_sigv_LRG', np.float64(0.8838936112225254)) ('log_Mcent_LRG', np.float64(12.790933971576177)) ('sigma_M_LRG', np.float64(0.3047585031119646))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.741924430355938)) ('M_1_LRG', np.float64(13.939925156027812)) ('alpha_LRG', np.float64(1.020673218309736)) ('f_sigv_LRG', np.float64(0.9208068138594199)) ('log_Mcent_LRG', np.float64(12.790186614444346)) ('sigma_M_LRG', np.float64(0.28854677791204053))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 18] ('M_0_LRG', np.float64(12.685990155695071)) ('M_1_LRG', np.float64(13.926045796274)) ('alpha_LRG', np.float64(1.0293361558316065)) ('f_sigv_LRG', np.float64(0.9030928623434168)) ('log_Mcent_LRG', np.float64(12.80810264510806)) ('sigma_M_LRG', np.float64(0.3351199757693102))
[Interation 18] chi2=393.9421146059656
[Interation 18] chi2=339.1464934500083
[Interation 18] chi2=402.9845730486685
[Interation 18] chi2=331.4072797977777
[Interation 18] chi2=354.0359770677766
[Interation 18] chi2=376.3696294254438
[Interation 18] chi2=421.64431529017816
[Interation 18] chi2=413.6443429121088
[Interation 18] chi2=339.9909783036606
[Interation 18] chi2=429.4652156323107
[Interation 18] chi2=303.56122872916313
[Interation 18] chi2=392.64802819445634
[Interation 19] ('M_0_LRG', np.float64(12.709469862841772)) ('M_1_LRG', np.float64(13.888384810676543)) ('alpha_LRG', np.float64(1.104766184729935)) ('f_sigv_LRG', np.float64(0.8536005331281018)) ('log_Mcent_LRG', np.float64(12.772378167417148)) ('sigma_M_LRG', np.float64(0.2946919551975422))
[Interation 19] ('M_0_LRG', np.float64(12.693676386102334)) ('M_1_LRG', np.float64(13.890744082172624)) ('alpha_LRG', np.float64(1.0472972953349224)) ('f_sigv_LRG', np.float64(0.8976677658118674)) ('log_Mcent_LRG', np.float64(12.759427826235514)) ('sigma_M_LRG', np.float64(0.25832330882275556))
[Interation 19] ('M_0_LRG', np.float64(12.775056865685043)) ('M_1_LRG', np.float64(13.8600688374034)) ('alpha_LRG', np.float64(1.0738020961032204)) ('f_sigv_LRG', np.float64(0.8649495321076295)) ('log_Mcent_LRG', np.float64(12.751438323348312)) ('sigma_M_LRG', np.float64(0.2654045486231376))
[Interation 19] ('M_0_LRG', np.float64(12.739959854796139)) ('M_1_LRG', np.float64(13.857239211453031)) ('alpha_LRG', np.float64(1.0800799789639715)) ('f_sigv_LRG', np.float64(0.859004743926939)) ('log_Mcent_LRG', np.float64(12.74508751000713)) ('sigma_M_LRG', np.float64(0.264957766906516))
[Interation 19] chi2=320.1240413430428
[Interation 19] chi2=337.9589634000583
[Interation 19] chi2=332.2187609458102
[Interation 19] chi2=301.8588128162907
[Interation 19] ('M_0_LRG', np.float64(12.796553843835024)) ('M_1_LRG', np.float64(13.850236496331162)) ('alpha_LRG', np.float64(1.0319264092871794)) ('f_sigv_LRG', np.float64(0.8713144567791672)) ('log_Mcent_LRG', np.float64(12.735351225389994)) ('sigma_M_LRG', np.float64(0.2373465673982713))
[Interation 19] ('M_0_LRG', np.float64(12.732038989164232)) ('M_1_LRG', np.float64(13.872342983055322)) ('alpha_LRG', np.float64(1.0736901846867273)) ('f_sigv_LRG', np.float64(0.8685522608668225)) ('log_Mcent_LRG', np.float64(12.750640840354176)) ('sigma_M_LRG', np.float64(0.25493484098387703))
[Interation 19] ('M_0_LRG', np.float64(12.783004410743038)) ('M_1_LRG', np.float64(13.876484189743701)) ('alpha_LRG', np.float64(1.0327124607512292)) ('f_sigv_LRG', np.float64(0.8854735943327874)) ('log_Mcent_LRG', np.float64(12.764060762746222)) ('sigma_M_LRG', np.float64(0.27471117408896556))
[Interation 19] ('M_0_LRG', np.float64(12.767714983448034)) ('M_1_LRG', np.float64(13.857235835055306)) ('alpha_LRG', np.float64(1.0553079017952849)) ('f_sigv_LRG', np.float64(0.8604093346927422)) ('log_Mcent_LRG', np.float64(12.73697093327424)) ('sigma_M_LRG', np.float64(0.2397494835361802))
[Interation 19] ('M_0_LRG', np.float64(12.683111786837841)) ('M_1_LRG', np.float64(13.876028986958204)) ('alpha_LRG', np.float64(1.107328907432346)) ('f_sigv_LRG', np.float64(0.8672151478564671)) ('log_Mcent_LRG', np.float64(12.73838181409878)) ('sigma_M_LRG', np.float64(0.23576540718041333))
[Interation 19] ('M_0_LRG', np.float64(12.855050443728722)) ('M_1_LRG', np.float64(13.83199754396361)) ('alpha_LRG', np.float64(0.9960386138362892)) ('f_sigv_LRG', np.float64(0.8685237318310566)) ('log_Mcent_LRG', np.float64(12.73947535001436)) ('sigma_M_LRG', np.float64(0.2420762382483857))
[Interation 19] ('M_0_LRG', np.float64(12.773011929416452)) ('M_1_LRG', np.float64(13.872175061625326)) ('alpha_LRG', np.float64(1.0381254047636193)) ('f_sigv_LRG', np.float64(0.8856318944184571)) ('log_Mcent_LRG', np.float64(12.750504431114813)) ('sigma_M_LRG', np.float64(0.24970616950303653))
[Interation 19] ('M_0_LRG', np.float64(12.789691673445894)) ('M_1_LRG', np.float64(13.845419238297003)) ('alpha_LRG', np.float64(1.041169209636867)) ('f_sigv_LRG', np.float64(0.8705372758729016)) ('log_Mcent_LRG', np.float64(12.738826185752128)) ('sigma_M_LRG', np.float64(0.24275309139091833))
[Interation 19] ('M_0_LRG', np.float64(12.760736472015704)) ('M_1_LRG', np.float64(13.855022511412448)) ('alpha_LRG', np.float64(1.0515421406707124)) ('f_sigv_LRG', np.float64(0.8737362897328486)) ('log_Mcent_LRG', np.float64(12.73538391055778)) ('sigma_M_LRG', np.float64(0.23370447641166403))
[Interation 19] ('M_0_LRG', np.float64(12.822065955820767)) ('M_1_LRG', np.float64(13.852030383221788)) ('alpha_LRG', np.float64(1.0013837820616254)) ('f_sigv_LRG', np.float64(0.8835430986590052)) ('log_Mcent_LRG', np.float64(12.74953965729826)) ('sigma_M_LRG', np.float64(0.25715392720818764))
[Interation 19] ('M_0_LRG', np.float64(12.79199730943014)) ('M_1_LRG', np.float64(13.845356106973313)) ('alpha_LRG', np.float64(1.0250624298185451)) ('f_sigv_LRG', np.float64(0.8696265327964747)) ('log_Mcent_LRG', np.float64(12.725316122993155)) ('sigma_M_LRG', np.float64(0.2215287972761233))
[Interation 19] ('M_0_LRG', np.float64(12.77178392117812)) ('M_1_LRG', np.float64(13.849542092066004)) ('alpha_LRG', np.float64(1.0463282676095904)) ('f_sigv_LRG', np.float64(0.8718698474469945)) ('log_Mcent_LRG', np.float64(12.733048870651041)) ('sigma_M_LRG', np.float64(0.22906850120037348))
[Interation 19] chi2=286.2705768998124
[Interation 19] chi2=338.81253791009493
[Interation 19] chi2=320.69901733251356
[Interation 19] chi2=316.3130023126038
[Interation 19] chi2=328.8972392256885
[Interation 19] chi2=333.9261348064768
[Interation 19] chi2=295.974617791071
[Interation 19] chi2=306.3998186129774
[Interation 19] chi2=361.0403601552186
[Interation 19] chi2=312.9893738470889
[Interation 19] chi2=306.18381851477204
[Interation 19] chi2=328.5626132107118
[Interation 20] ('M_0_LRG', np.float64(12.822063432522267)) ('M_1_LRG', np.float64(13.853312188245146)) ('alpha_LRG', np.float64(1.003654864438202)) ('f_sigv_LRG', np.float64(0.8854275516597815)) ('log_Mcent_LRG', np.float64(12.730999690623646)) ('sigma_M_LRG', np.float64(0.21565944579553603))
[Interation 20] ('M_0_LRG', np.float64(12.819033003863792)) ('M_1_LRG', np.float64(13.847274536441736)) ('alpha_LRG', np.float64(1.0053688020472322)) ('f_sigv_LRG', np.float64(0.8825009440724928)) ('log_Mcent_LRG', np.float64(12.732797679897235)) ('sigma_M_LRG', np.float64(0.23062482622427843))
[Interation 20] ('M_0_LRG', np.float64(12.824319205375325)) ('M_1_LRG', np.float64(13.851204945130734)) ('alpha_LRG', np.float64(0.9979303130656774)) ('f_sigv_LRG', np.float64(0.877027866582313)) ('log_Mcent_LRG', np.float64(12.736380427921038)) ('sigma_M_LRG', np.float64(0.23898441643797608))
[Interation 20] ('M_0_LRG', np.float64(12.830106187483647)) ('M_1_LRG', np.float64(13.848568867503436)) ('alpha_LRG', np.float64(1.00118921231971)) ('f_sigv_LRG', np.float64(0.8798968127462423)) ('log_Mcent_LRG', np.float64(12.74337776090264)) ('sigma_M_LRG', np.float64(0.24815003609386915))
[Interation 20] chi2=318.5034180692551
[Interation 20] chi2=330.3130643959726
[Interation 20] chi2=315.38716421449146
[Interation 20] chi2=312.1929817808782
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_11.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_11.npy
Set number of threads to 32
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.803484024219689)) ('M_1_LRG', np.float64(13.856157992339002)) ('alpha_LRG', np.float64(1.009838337863442)) ('f_sigv_LRG', np.float64(0.8812341132901418)) ('log_Mcent_LRG', np.float64(12.738271133216646)) ('sigma_M_LRG', np.float64(0.2356691037982951))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3389456272125244
Start satellite assignement
Satellite assignement done 0.07318401336669922
LRG mock catalogue done 0.1472606658935547
614993 central galaxies, 85080 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6730241775512695
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_11.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:19
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:19
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load correlation matrix for LRG at z0.5 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:20
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.415016428580929)) ('M_1_LRG', np.float64(13.529443278257542)) ('alpha_LRG', np.float64(1.0372609865665068)) ('f_sigv_LRG', np.float64(0.8869799701864787)) ('log_Mcent_LRG', np.float64(12.799648989338253)) ('sigma_M_LRG', np.float64(0.5701607665538189))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.857307116539014)) ('M_1_LRG', np.float64(13.562764975106846)) ('alpha_LRG', np.float64(0.7942897630053095)) ('f_sigv_LRG', np.float64(0.9460718845052015)) ('log_Mcent_LRG', np.float64(12.663582477231943)) ('sigma_M_LRG', np.float64(0.4529216069130389))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.656880837490883)) ('M_1_LRG', np.float64(14.025409247980575)) ('alpha_LRG', np.float64(0.7866570278969424)) ('f_sigv_LRG', np.float64(0.840035623539449)) ('log_Mcent_LRG', np.float64(12.838349076422084)) ('sigma_M_LRG', np.float64(0.47780414552603256))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.513712870125344)) ('M_1_LRG', np.float64(13.762420924785859)) ('alpha_LRG', np.float64(1.0820261753626104)) ('f_sigv_LRG', np.float64(0.9370173677540123)) ('log_Mcent_LRG', np.float64(12.821791798890787)) ('sigma_M_LRG', np.float64(0.5242133245207035))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.557378891573686)) ('M_1_LRG', np.float64(13.592507033805957)) ('alpha_LRG', np.float64(1.112374659999887)) ('f_sigv_LRG', np.float64(0.9935847942433909)) ('log_Mcent_LRG', np.float64(12.789109656961822)) ('sigma_M_LRG', np.float64(0.39035921952924857))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.470112741529366)) ('M_1_LRG', np.float64(13.589044966178037)) ('alpha_LRG', np.float64(0.9939545149821872)) ('f_sigv_LRG', np.float64(0.6921802764358642)) ('log_Mcent_LRG', np.float64(12.726921608955855)) ('sigma_M_LRG', np.float64(0.5490491603237839))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.328508788940047)) ('M_1_LRG', np.float64(13.378014789119007)) ('alpha_LRG', np.float64(1.2526951459588103)) ('f_sigv_LRG', np.float64(1.0183186971666283)) ('log_Mcent_LRG', np.float64(12.78196256828876)) ('sigma_M_LRG', np.float64(0.6415838500414466))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.35429141023724)) ('M_1_LRG', np.float64(14.06337888204026)) ('alpha_LRG', np.float64(0.8770739944791688)) ('f_sigv_LRG', np.float64(1.0136890892514037)) ('log_Mcent_LRG', np.float64(12.773005580593098)) ('sigma_M_LRG', np.float64(0.3071367418736388))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.30122160369117)) ('M_1_LRG', np.float64(13.240668347919065)) ('alpha_LRG', np.float64(1.0364925923813813)) ('f_sigv_LRG', np.float64(1.1305294551642555)) ('log_Mcent_LRG', np.float64(12.80653101479091)) ('sigma_M_LRG', np.float64(0.6126280624401345))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.639489702208188)) ('M_1_LRG', np.float64(13.490687453474258)) ('alpha_LRG', np.float64(0.9264657340745577)) ('f_sigv_LRG', np.float64(0.975930480758942)) ('log_Mcent_LRG', np.float64(12.734498813876764)) ('sigma_M_LRG', np.float64(0.49010478725547535))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.314511117029443)) ('M_1_LRG', np.float64(13.513238989413525)) ('alpha_LRG', np.float64(0.9431107016822775)) ('f_sigv_LRG', np.float64(0.919739506316428)) ('log_Mcent_LRG', np.float64(12.608204279242063)) ('sigma_M_LRG', np.float64(0.37911537056297595))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 20] ('M_0_LRG', np.float64(12.627210767712215)) ('M_1_LRG', np.float64(13.972869973086025)) ('alpha_LRG', np.float64(0.9118365043728225)) ('f_sigv_LRG', np.float64(0.5499056408047172)) ('log_Mcent_LRG', np.float64(12.534726585501888)) ('sigma_M_LRG', np.float64(0.43305109921054674))
[Interation 20] chi2=4927.25408057648
[Interation 20] chi2=2567.0339040887516
[Interation 20] chi2=1321.0524726178933
[Interation 20] chi2=1597.9086776739084
[Interation 20] chi2=8648.966024707332
[Interation 20] chi2=3000.847430261074
[Interation 20] chi2=1066.675506685403
[Interation 20] chi2=25528.599188891196
[Interation 20] chi2=23560.32567904678
[Interation 20] chi2=3982.839824450867
[Interation 20] chi2=3435.51261199861
[Interation 20] chi2=7738.589771100109
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 21] ('M_0_LRG', np.float64(12.726716667748134)) ('M_1_LRG', np.float64(13.930150845195499)) ('alpha_LRG', np.float64(0.9742714162370544)) ('f_sigv_LRG', np.float64(0.8324090371080017)) ('log_Mcent_LRG', np.float64(12.792509453335459)) ('sigma_M_LRG', np.float64(0.31748256379341727))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 21] ('M_0_LRG', np.float64(12.76731462344854)) ('M_1_LRG', np.float64(13.864589649090552)) ('alpha_LRG', np.float64(1.2010838711836929)) ('f_sigv_LRG', np.float64(0.8596405760713307)) ('log_Mcent_LRG', np.float64(12.821703750297475)) ('sigma_M_LRG', np.float64(0.31327556053827954))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 21] ('M_0_LRG', np.float64(12.781101536412818)) ('M_1_LRG', np.float64(13.954393073129607)) ('alpha_LRG', np.float64(1.0470756314977507)) ('f_sigv_LRG', np.float64(0.9097540358236922)) ('log_Mcent_LRG', np.float64(12.893182093658513)) ('sigma_M_LRG', np.float64(0.45336434798728753))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 21] ('M_0_LRG', np.float64(12.698630292871597)) ('M_1_LRG', np.float64(13.976109653901657)) ('alpha_LRG', np.float64(1.0613502735605496)) ('f_sigv_LRG', np.float64(0.8333842658430397)) ('log_Mcent_LRG', np.float64(12.883068506167817)) ('sigma_M_LRG', np.float64(0.451354590822739))
[Interation 21] chi2=509.6861137505342
[Interation 21] chi2=967.9674872986536
[Interation 21] chi2=406.68193591558924
[Interation 21] chi2=420.976890164886
[Interation 21] ('M_0_LRG', np.float64(12.860874286309274)) ('M_1_LRG', np.float64(13.830236968693981)) ('alpha_LRG', np.float64(0.9779802031051261)) ('f_sigv_LRG', np.float64(0.8887575683840946)) ('log_Mcent_LRG', np.float64(12.724469144646314)) ('sigma_M_LRG', np.float64(0.21118828871558648))
[Interation 21] ('M_0_LRG', np.float64(12.848581015660828)) ('M_1_LRG', np.float64(13.843002728474467)) ('alpha_LRG', np.float64(0.9787093290079039)) ('f_sigv_LRG', np.float64(0.8730761780547684)) ('log_Mcent_LRG', np.float64(12.739394120910665)) ('sigma_M_LRG', np.float64(0.23336025223378087))
[Interation 21] ('M_0_LRG', np.float64(12.709365928839388)) ('M_1_LRG', np.float64(13.88710899279805)) ('alpha_LRG', np.float64(1.10506238827987)) ('f_sigv_LRG', np.float64(0.8524371077576306)) ('log_Mcent_LRG', np.float64(12.766312897891195)) ('sigma_M_LRG', np.float64(0.28732745410346444))
[Interation 21] ('M_0_LRG', np.float64(12.699375250113473)) ('M_1_LRG', np.float64(13.890565241760287)) ('alpha_LRG', np.float64(1.088688463559122)) ('f_sigv_LRG', np.float64(0.8622417046457638)) ('log_Mcent_LRG', np.float64(12.770105470776397)) ('sigma_M_LRG', np.float64(0.2948220647766745))
[Interation 21] ('M_0_LRG', np.float64(12.856045286222788)) ('M_1_LRG', np.float64(13.821284116301385)) ('alpha_LRG', np.float64(1.0004816617873622)) ('f_sigv_LRG', np.float64(0.8739256679796348)) ('log_Mcent_LRG', np.float64(12.729085829229293)) ('sigma_M_LRG', np.float64(0.24835778809872733))
[Interation 21] ('M_0_LRG', np.float64(12.785064539703226)) ('M_1_LRG', np.float64(13.86775964950355)) ('alpha_LRG', np.float64(1.0355114227754387)) ('f_sigv_LRG', np.float64(0.8646116227790606)) ('log_Mcent_LRG', np.float64(12.762394275213468)) ('sigma_M_LRG', np.float64(0.27929290471209733))
[Interation 21] ('M_0_LRG', np.float64(12.813770570758065)) ('M_1_LRG', np.float64(13.849675380061216)) ('alpha_LRG', np.float64(1.0320942126488908)) ('f_sigv_LRG', np.float64(0.8687299865696624)) ('log_Mcent_LRG', np.float64(12.754811467383465)) ('sigma_M_LRG', np.float64(0.27093622616859814))
[Interation 21] ('M_0_LRG', np.float64(12.819206228633083)) ('M_1_LRG', np.float64(13.832774413052029)) ('alpha_LRG', np.float64(1.022384673001704)) ('f_sigv_LRG', np.float64(0.8535773259664108)) ('log_Mcent_LRG', np.float64(12.737106746857878)) ('sigma_M_LRG', np.float64(0.2525347452070703))
[Interation 21] ('M_0_LRG', np.float64(12.80382958136004)) ('M_1_LRG', np.float64(13.839957279400547)) ('alpha_LRG', np.float64(1.0276450449940038)) ('f_sigv_LRG', np.float64(0.8624206375430584)) ('log_Mcent_LRG', np.float64(12.730978121882412)) ('sigma_M_LRG', np.float64(0.23660849759474106))
[Interation 21] ('M_0_LRG', np.float64(12.678848092287216)) ('M_1_LRG', np.float64(13.921516447038147)) ('alpha_LRG', np.float64(1.1095659521027699)) ('f_sigv_LRG', np.float64(0.874016324185124)) ('log_Mcent_LRG', np.float64(12.794239997833825)) ('sigma_M_LRG', np.float64(0.32293770818452305))
[Interation 21] ('M_0_LRG', np.float64(12.889927375491913)) ('M_1_LRG', np.float64(13.841070927042654)) ('alpha_LRG', np.float64(0.9855830129750827)) ('f_sigv_LRG', np.float64(0.8609260049867637)) ('log_Mcent_LRG', np.float64(12.760130492956533)) ('sigma_M_LRG', np.float64(0.27663639420459885))
[Interation 21] ('M_0_LRG', np.float64(12.797913751694452)) ('M_1_LRG', np.float64(13.83469508712267)) ('alpha_LRG', np.float64(1.0443404427095198)) ('f_sigv_LRG', np.float64(0.8618822617839996)) ('log_Mcent_LRG', np.float64(12.736565679281448)) ('sigma_M_LRG', np.float64(0.25047321341843254))
[Interation 21] chi2=303.52767033110047
[Interation 21] chi2=301.39612101716017
[Interation 21] chi2=316.2225770352532
[Interation 21] chi2=320.16728275826455
[Interation 21] chi2=337.2873107721754
[Interation 21] chi2=291.4690908528338
[Interation 21] chi2=294.86845976864856
[Interation 21] chi2=300.7168729074206
[Interation 21] chi2=291.15999981668256
[Interation 21] chi2=308.34321590377624
[Interation 21] chi2=354.0537702084465
[Interation 21] chi2=286.2557508002455
[Interation 22] ('M_0_LRG', np.float64(12.820434812458794)) ('M_1_LRG', np.float64(13.852772687605363)) ('alpha_LRG', np.float64(1.0241298653519257)) ('f_sigv_LRG', np.float64(0.8461250464258525)) ('log_Mcent_LRG', np.float64(12.736416417777683)) ('sigma_M_LRG', np.float64(0.24064315768811112))
[Interation 22] ('M_0_LRG', np.float64(12.827399391630845)) ('M_1_LRG', np.float64(13.863983552689055)) ('alpha_LRG', np.float64(1.0163980986691434)) ('f_sigv_LRG', np.float64(0.8547033004986635)) ('log_Mcent_LRG', np.float64(12.768838636584597)) ('sigma_M_LRG', np.float64(0.297647562598699))
[Interation 22] ('M_0_LRG', np.float64(12.804429995589171)) ('M_1_LRG', np.float64(13.852567304936006)) ('alpha_LRG', np.float64(1.027256235461022)) ('f_sigv_LRG', np.float64(0.8848113975575177)) ('log_Mcent_LRG', np.float64(12.752619246353456)) ('sigma_M_LRG', np.float64(0.26570234233751766))
[Interation 22] ('M_0_LRG', np.float64(12.794516352485857)) ('M_1_LRG', np.float64(13.8665219813552)) ('alpha_LRG', np.float64(1.0423353152123178)) ('f_sigv_LRG', np.float64(0.8664063959223209)) ('log_Mcent_LRG', np.float64(12.753541539773597)) ('sigma_M_LRG', np.float64(0.26622521143329864))
[Interation 22] chi2=309.62293171950216
[Interation 22] chi2=343.22155362989224
[Interation 22] chi2=306.69862912974776
[Interation 22] chi2=361.48770035068367
[Interation 22] ('M_0_LRG', np.float64(12.823626026276365)) ('M_1_LRG', np.float64(13.835289493252803)) ('alpha_LRG', np.float64(1.0029974082441022)) ('f_sigv_LRG', np.float64(0.8795200843019996)) ('log_Mcent_LRG', np.float64(12.733362521325802)) ('sigma_M_LRG', np.float64(0.2366581031318128))
[Interation 22] ('M_0_LRG', np.float64(12.812216696020979)) ('M_1_LRG', np.float64(13.858236922877186)) ('alpha_LRG', np.float64(1.0166737411008062)) ('f_sigv_LRG', np.float64(0.872020522403101)) ('log_Mcent_LRG', np.float64(12.74884420954363)) ('sigma_M_LRG', np.float64(0.2591436976595319))
[Interation 22] ('M_0_LRG', np.float64(12.830575175507379)) ('M_1_LRG', np.float64(13.83165159093747)) ('alpha_LRG', np.float64(1.0039522825004636)) ('f_sigv_LRG', np.float64(0.8805405211995588)) ('log_Mcent_LRG', np.float64(12.728609433391954)) ('sigma_M_LRG', np.float64(0.2258089995363513))
[Interation 22] ('M_0_LRG', np.float64(12.836757469698236)) ('M_1_LRG', np.float64(13.834634493462245)) ('alpha_LRG', np.float64(1.0009734780052517)) ('f_sigv_LRG', np.float64(0.8700119524705083)) ('log_Mcent_LRG', np.float64(12.736920728504272)) ('sigma_M_LRG', np.float64(0.2436549462716412))
[Interation 22] ('M_0_LRG', np.float64(12.813172464045214)) ('M_1_LRG', np.float64(13.855998007580439)) ('alpha_LRG', np.float64(1.0305066758136923)) ('f_sigv_LRG', np.float64(0.8627403066710302)) ('log_Mcent_LRG', np.float64(12.753905892487051)) ('sigma_M_LRG', np.float64(0.2688952823840563))
[Interation 22] ('M_0_LRG', np.float64(12.848024509106967)) ('M_1_LRG', np.float64(13.836072633647438)) ('alpha_LRG', np.float64(0.98326092185801)) ('f_sigv_LRG', np.float64(0.8872336514354937)) ('log_Mcent_LRG', np.float64(12.733077244420192)) ('sigma_M_LRG', np.float64(0.2260401479156689))
[Interation 22] ('M_0_LRG', np.float64(12.806605371619241)) ('M_1_LRG', np.float64(13.850622093444807)) ('alpha_LRG', np.float64(1.0273908365353315)) ('f_sigv_LRG', np.float64(0.8671573137984943)) ('log_Mcent_LRG', np.float64(12.744925561906847)) ('sigma_M_LRG', np.float64(0.2595882564457873))
[Interation 22] ('M_0_LRG', np.float64(12.824155293169557)) ('M_1_LRG', np.float64(13.838972936638497)) ('alpha_LRG', np.float64(0.9994146814432212)) ('f_sigv_LRG', np.float64(0.8769080719451361)) ('log_Mcent_LRG', np.float64(12.725311821742855)) ('sigma_M_LRG', np.float64(0.21263147092436524))
[Interation 22] ('M_0_LRG', np.float64(12.802842864427415)) ('M_1_LRG', np.float64(13.850354691218023)) ('alpha_LRG', np.float64(1.0227313520179473)) ('f_sigv_LRG', np.float64(0.880700885429425)) ('log_Mcent_LRG', np.float64(12.733055776362354)) ('sigma_M_LRG', np.float64(0.2299422235023973))
[Interation 22] ('M_0_LRG', np.float64(12.815369403656817)) ('M_1_LRG', np.float64(13.842257305087442)) ('alpha_LRG', np.float64(1.0002166958217222)) ('f_sigv_LRG', np.float64(0.8747066581666358)) ('log_Mcent_LRG', np.float64(12.721608438460391)) ('sigma_M_LRG', np.float64(0.2057844090071852))
[Interation 22] ('M_0_LRG', np.float64(12.820727193531123)) ('M_1_LRG', np.float64(13.838502058564641)) ('alpha_LRG', np.float64(1.0109455639258347)) ('f_sigv_LRG', np.float64(0.8747327239510057)) ('log_Mcent_LRG', np.float64(12.72694768054476)) ('sigma_M_LRG', np.float64(0.22408648433260453))
[Interation 22] ('M_0_LRG', np.float64(12.817850737425905)) ('M_1_LRG', np.float64(13.841204048455058)) ('alpha_LRG', np.float64(1.0234018800462672)) ('f_sigv_LRG', np.float64(0.8643753835547736)) ('log_Mcent_LRG', np.float64(12.735470753015058)) ('sigma_M_LRG', np.float64(0.23868616378382457))
[Interation 22] chi2=308.4977904660149
[Interation 22] chi2=311.69772338662744
[Interation 22] chi2=352.2011745865351
[Interation 22] chi2=270.4794880082746
[Interation 22] chi2=267.3119107994677
[Interation 22] chi2=323.00400831242996
[Interation 22] chi2=330.29184870135305
[Interation 22] chi2=299.64780242895887
[Interation 22] chi2=309.5359507921394
[Interation 22] chi2=311.4927797865428
[Interation 22] chi2=303.9419286092524
[Interation 22] chi2=333.1702873432889
[Interation 23] ('M_0_LRG', np.float64(12.814746254497448)) ('M_1_LRG', np.float64(13.845988236254613)) ('alpha_LRG', np.float64(1.010905082961041)) ('f_sigv_LRG', np.float64(0.8600478816392063)) ('log_Mcent_LRG', np.float64(12.726938540577944)) ('sigma_M_LRG', np.float64(0.22179886272189542))
[Interation 23] ('M_0_LRG', np.float64(12.838432360422324)) ('M_1_LRG', np.float64(13.839999811568951)) ('alpha_LRG', np.float64(0.9917158250173403)) ('f_sigv_LRG', np.float64(0.8758339804135626)) ('log_Mcent_LRG', np.float64(12.731704388813458)) ('sigma_M_LRG', np.float64(0.22486197877386782))
[Interation 23] ('M_0_LRG', np.float64(12.821625809647843)) ('M_1_LRG', np.float64(13.84235692400595)) ('alpha_LRG', np.float64(1.0074194830992012)) ('f_sigv_LRG', np.float64(0.8730622196247914)) ('log_Mcent_LRG', np.float64(12.7358739449967)) ('sigma_M_LRG', np.float64(0.24190413474668487))
[Interation 23] ('M_0_LRG', np.float64(12.81972566550081)) ('M_1_LRG', np.float64(13.840495915719568)) ('alpha_LRG', np.float64(1.0076677431810546)) ('f_sigv_LRG', np.float64(0.8859621648856646)) ('log_Mcent_LRG', np.float64(12.734656736838025)) ('sigma_M_LRG', np.float64(0.23400377586111287))
[Interation 23] chi2=341.0161699362729
[Interation 23] chi2=328.60597174652673
[Interation 23] chi2=277.33505630671556
[Interation 23] chi2=266.04362156699136
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_12.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_12.npy
Set number of threads to 32
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.809041802767108)) ('M_1_LRG', np.float64(13.847171962608352)) ('alpha_LRG', np.float64(1.015569039755804)) ('f_sigv_LRG', np.float64(0.8743984375486085)) ('log_Mcent_LRG', np.float64(12.731193560693997)) ('sigma_M_LRG', np.float64(0.2249881106039675))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.33730626106262207
Start satellite assignement
Satellite assignement done 0.07361602783203125
LRG mock catalogue done 0.1475379467010498
615104 central galaxies, 84417 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6768107414245605
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_12.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:20
Load correlation matrix for LRG at z0.5 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.747078518635002)) ('M_1_LRG', np.float64(13.890224883288912)) ('alpha_LRG', np.float64(1.013847279477133)) ('f_sigv_LRG', np.float64(0.8878884409483732)) ('log_Mcent_LRG', np.float64(12.758794155938824)) ('sigma_M_LRG', np.float64(0.27332238920066393))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.812648674925372)) ('M_1_LRG', np.float64(13.874034891207694)) ('alpha_LRG', np.float64(1.0422483104773113)) ('f_sigv_LRG', np.float64(0.8994550235158021)) ('log_Mcent_LRG', np.float64(12.773359586485668)) ('sigma_M_LRG', np.float64(0.29997260561412054))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.59948011269355)) ('M_1_LRG', np.float64(13.902663284896086)) ('alpha_LRG', np.float64(1.09313475721988)) ('f_sigv_LRG', np.float64(0.9119965621084744)) ('log_Mcent_LRG', np.float64(12.704996150758479)) ('sigma_M_LRG', np.float64(0.17478168080671808))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.623143115278733)) ('M_1_LRG', np.float64(13.920632207386033)) ('alpha_LRG', np.float64(1.0806502039635169)) ('f_sigv_LRG', np.float64(0.9540774190052408)) ('log_Mcent_LRG', np.float64(12.782194629912125)) ('sigma_M_LRG', np.float64(0.2852085368234914))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.776909217344402)) ('M_1_LRG', np.float64(13.819742772394015)) ('alpha_LRG', np.float64(1.0884820941894096)) ('f_sigv_LRG', np.float64(0.8407727651503328)) ('log_Mcent_LRG', np.float64(12.758293351666754)) ('sigma_M_LRG', np.float64(0.3406910665056049))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.741168435534004)) ('M_1_LRG', np.float64(13.903458576090745)) ('alpha_LRG', np.float64(1.1012250147999834)) ('f_sigv_LRG', np.float64(0.840944120838685)) ('log_Mcent_LRG', np.float64(12.815059503581264)) ('sigma_M_LRG', np.float64(0.35826618376342123))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.69087439818366)) ('M_1_LRG', np.float64(13.861090504578183)) ('alpha_LRG', np.float64(1.1075033530461975)) ('f_sigv_LRG', np.float64(0.8636668594112883)) ('log_Mcent_LRG', np.float64(12.72933952152129)) ('sigma_M_LRG', np.float64(0.2525124510704975))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.67249061025624)) ('M_1_LRG', np.float64(13.895409135532379)) ('alpha_LRG', np.float64(1.1515950574732166)) ('f_sigv_LRG', np.float64(0.8513758546079307)) ('log_Mcent_LRG', np.float64(12.776994293496777)) ('sigma_M_LRG', np.float64(0.29964897336641694))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.82900017845239)) ('M_1_LRG', np.float64(13.904775367071364)) ('alpha_LRG', np.float64(1.0033993465144755)) ('f_sigv_LRG', np.float64(0.8429552695908942)) ('log_Mcent_LRG', np.float64(12.809246116332096)) ('sigma_M_LRG', np.float64(0.3449288124648147))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.815936708348964)) ('M_1_LRG', np.float64(13.89509112856213)) ('alpha_LRG', np.float64(1.0198785166052295)) ('f_sigv_LRG', np.float64(0.8582741846806321)) ('log_Mcent_LRG', np.float64(12.800554800537261)) ('sigma_M_LRG', np.float64(0.35876266922439437))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.84791778884461)) ('M_1_LRG', np.float64(13.90582565706664)) ('alpha_LRG', np.float64(1.041393959595172)) ('f_sigv_LRG', np.float64(0.8087693001086987)) ('log_Mcent_LRG', np.float64(12.814016135554212)) ('sigma_M_LRG', np.float64(0.3636340460642309))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 23] ('M_0_LRG', np.float64(12.582506846473931)) ('M_1_LRG', np.float64(13.855948018398037)) ('alpha_LRG', np.float64(1.1937720866080646)) ('f_sigv_LRG', np.float64(0.8692316971163789)) ('log_Mcent_LRG', np.float64(12.732515753652827)) ('sigma_M_LRG', np.float64(0.21669249659369716))
[Interation 23] chi2=324.9465692222393
[Interation 23] chi2=363.3796211768096
[Interation 23] chi2=406.2941421683589
[Interation 23] chi2=371.1374889376506
[Interation 23] chi2=402.27037090817197
[Interation 23] chi2=334.54531258371645
[Interation 23] chi2=325.11503210488235
[Interation 23] chi2=357.60404683970853
[Interation 23] chi2=324.44083448306407
[Interation 23] chi2=347.56549805180697
[Interation 23] chi2=363.0486555516935
[Interation 23] chi2=392.6686842981955
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 24] ('M_0_LRG', np.float64(12.738419299354987)) ('M_1_LRG', np.float64(13.903238413989435)) ('alpha_LRG', np.float64(1.0227727234257884)) ('f_sigv_LRG', np.float64(0.8977195885416748)) ('log_Mcent_LRG', np.float64(12.793244923031676)) ('sigma_M_LRG', np.float64(0.3180443802027453))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 24] ('M_0_LRG', np.float64(12.7046224044243)) ('M_1_LRG', np.float64(13.831413364582604)) ('alpha_LRG', np.float64(1.1218851922795068)) ('f_sigv_LRG', np.float64(0.836706544921768)) ('log_Mcent_LRG', np.float64(12.724678131263008)) ('sigma_M_LRG', np.float64(0.24986018897419054))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 24] ('M_0_LRG', np.float64(12.705246327413933)) ('M_1_LRG', np.float64(13.902923297281967)) ('alpha_LRG', np.float64(1.1121025846436188)) ('f_sigv_LRG', np.float64(0.8561768638556704)) ('log_Mcent_LRG', np.float64(12.794791020840456)) ('sigma_M_LRG', np.float64(0.3214626327379519))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 24] ('M_0_LRG', np.float64(12.664977983423226)) ('M_1_LRG', np.float64(13.916617102323087)) ('alpha_LRG', np.float64(1.0913421578754725)) ('f_sigv_LRG', np.float64(0.8996851036641761)) ('log_Mcent_LRG', np.float64(12.79022932675245)) ('sigma_M_LRG', np.float64(0.29868419988153266))
[Interation 24] chi2=347.7561262299815
[Interation 24] chi2=342.72396415537077
[Interation 24] chi2=349.8267708247263
[Interation 24] chi2=362.3828572062603
[Interation 24] ('M_0_LRG', np.float64(12.731566014860594)) ('M_1_LRG', np.float64(13.869204619331546)) ('alpha_LRG', np.float64(1.0896398242576901)) ('f_sigv_LRG', np.float64(0.8619304210782825)) ('log_Mcent_LRG', np.float64(12.756387406518158)) ('sigma_M_LRG', np.float64(0.27429254214514254))
[Interation 24] ('M_0_LRG', np.float64(12.752234961023138)) ('M_1_LRG', np.float64(13.86749771570945)) ('alpha_LRG', np.float64(1.0810111937005427)) ('f_sigv_LRG', np.float64(0.8515322637081326)) ('log_Mcent_LRG', np.float64(12.76432401307695)) ('sigma_M_LRG', np.float64(0.297458778566677))
[Interation 24] ('M_0_LRG', np.float64(12.740391986892343)) ('M_1_LRG', np.float64(13.860456469896903)) ('alpha_LRG', np.float64(1.074974069809781)) ('f_sigv_LRG', np.float64(0.8643304133208317)) ('log_Mcent_LRG', np.float64(12.740915767935757)) ('sigma_M_LRG', np.float64(0.24336379407328657))
[Interation 24] ('M_0_LRG', np.float64(12.693236737230897)) ('M_1_LRG', np.float64(13.882746198379543)) ('alpha_LRG', np.float64(1.0905080903579945)) ('f_sigv_LRG', np.float64(0.8688392362868258)) ('log_Mcent_LRG', np.float64(12.75295157611057)) ('sigma_M_LRG', np.float64(0.2659372163311383))
[Interation 24] ('M_0_LRG', np.float64(12.706067522226077)) ('M_1_LRG', np.float64(13.866960263462566)) ('alpha_LRG', np.float64(1.095265234152192)) ('f_sigv_LRG', np.float64(0.8691635115288223)) ('log_Mcent_LRG', np.float64(12.742210604506166)) ('sigma_M_LRG', np.float64(0.2546893373955512))
[Interation 24] ('M_0_LRG', np.float64(12.736762456528577)) ('M_1_LRG', np.float64(13.882210682310088)) ('alpha_LRG', np.float64(1.0806773015286661)) ('f_sigv_LRG', np.float64(0.8693378314207706)) ('log_Mcent_LRG', np.float64(12.772688345744449)) ('sigma_M_LRG', np.float64(0.29261729673288606))
[Interation 24] ('M_0_LRG', np.float64(12.723475076638987)) ('M_1_LRG', np.float64(13.87020907844384)) ('alpha_LRG', np.float64(1.0819752014336699)) ('f_sigv_LRG', np.float64(0.8634636349528189)) ('log_Mcent_LRG', np.float64(12.743441083759341)) ('sigma_M_LRG', np.float64(0.2544935699165447))
[Interation 24] ('M_0_LRG', np.float64(12.776214780039584)) ('M_1_LRG', np.float64(13.859125488754875)) ('alpha_LRG', np.float64(1.060686446744009)) ('f_sigv_LRG', np.float64(0.871062857342162)) ('log_Mcent_LRG', np.float64(12.741257067404023)) ('sigma_M_LRG', np.float64(0.24616413844493895))
[Interation 24] ('M_0_LRG', np.float64(12.739743871036735)) ('M_1_LRG', np.float64(13.86313767314043)) ('alpha_LRG', np.float64(1.0799231101311106)) ('f_sigv_LRG', np.float64(0.86043473802019)) ('log_Mcent_LRG', np.float64(12.746085498416996)) ('sigma_M_LRG', np.float64(0.2586578227680556))
[Interation 24] ('M_0_LRG', np.float64(12.764338132947405)) ('M_1_LRG', np.float64(13.849909795503638)) ('alpha_LRG', np.float64(1.0800067520763361)) ('f_sigv_LRG', np.float64(0.8548433728144128)) ('log_Mcent_LRG', np.float64(12.739946847471765)) ('sigma_M_LRG', np.float64(0.26288629301500444))
[Interation 24] ('M_0_LRG', np.float64(12.729352191055154)) ('M_1_LRG', np.float64(13.8702279631586)) ('alpha_LRG', np.float64(1.0772436735186623)) ('f_sigv_LRG', np.float64(0.8638618096977123)) ('log_Mcent_LRG', np.float64(12.747610245671627)) ('sigma_M_LRG', np.float64(0.25726458487312204))
[Interation 24] ('M_0_LRG', np.float64(12.740701804307822)) ('M_1_LRG', np.float64(13.862580372929708)) ('alpha_LRG', np.float64(1.0726452855825084)) ('f_sigv_LRG', np.float64(0.8541569191794152)) ('log_Mcent_LRG', np.float64(12.751402453282891)) ('sigma_M_LRG', np.float64(0.2751136739917229))
[Interation 24] chi2=346.87566740297103
[Interation 24] chi2=305.6922596669039
[Interation 24] chi2=324.55284133412044
[Interation 24] chi2=323.65829667241394
[Interation 24] chi2=298.50572002042634
[Interation 24] chi2=305.54295872841374
[Interation 24] chi2=320.4525210226601
[Interation 24] chi2=301.21295437809067
[Interation 24] chi2=317.4864473179126
[Interation 24] chi2=325.88000559763356
[Interation 24] chi2=323.9937327576925
[Interation 24] chi2=280.83605966717346
[Interation 25] ('M_0_LRG', np.float64(12.7411185570052)) ('M_1_LRG', np.float64(13.862735718762162)) ('alpha_LRG', np.float64(1.0696646655882958)) ('f_sigv_LRG', np.float64(0.8704196467749028)) ('log_Mcent_LRG', np.float64(12.748908198795545)) ('sigma_M_LRG', np.float64(0.26991132385832256))
[Interation 25] ('M_0_LRG', np.float64(12.751114290949904)) ('M_1_LRG', np.float64(13.864009620824334)) ('alpha_LRG', np.float64(1.049864788669241)) ('f_sigv_LRG', np.float64(0.8714524098550277)) ('log_Mcent_LRG', np.float64(12.742689606448039)) ('sigma_M_LRG', np.float64(0.2448991323166066))
[Interation 25] ('M_0_LRG', np.float64(12.759043008080699)) ('M_1_LRG', np.float64(13.872114107511466)) ('alpha_LRG', np.float64(1.0698740594320741)) ('f_sigv_LRG', np.float64(0.8665877796120072)) ('log_Mcent_LRG', np.float64(12.763096866773703)) ('sigma_M_LRG', np.float64(0.28239905372045454))
[Interation 25] ('M_0_LRG', np.float64(12.725652939787611)) ('M_1_LRG', np.float64(13.876323094507676)) ('alpha_LRG', np.float64(1.058574868434921)) ('f_sigv_LRG', np.float64(0.8857538060052021)) ('log_Mcent_LRG', np.float64(12.746891166428586)) ('sigma_M_LRG', np.float64(0.24653980236791334))
[Interation 25] chi2=300.2193061124833
[Interation 25] chi2=289.8724989903474
[Interation 25] chi2=330.9655213628954
[Interation 25] chi2=282.7658545659493
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_13.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_13.npy
Set number of threads to 32
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.762773174190706)) ('M_1_LRG', np.float64(13.866658418378755)) ('alpha_LRG', np.float64(1.0511456256219514)) ('f_sigv_LRG', np.float64(0.8705773759778245)) ('log_Mcent_LRG', np.float64(12.74497388657665)) ('sigma_M_LRG', np.float64(0.24615655804417835))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.34966564178466797
Start satellite assignement
Satellite assignement done 0.07493090629577637
LRG mock catalogue done 0.14528203010559082
615185 central galaxies, 84378 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6832408905029297
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_13.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:28
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:28
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:28
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:28
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:28
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:29
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:29
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:29
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Load rppi measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.600870439013843)) ('M_1_LRG', np.float64(13.77564078448577)) ('alpha_LRG', np.float64(1.0065315267391692)) ('f_sigv_LRG', np.float64(0.8626242352501015)) ('log_Mcent_LRG', np.float64(12.762021550790552)) ('sigma_M_LRG', np.float64(0.3532910344729365))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.64933329988631)) ('M_1_LRG', np.float64(13.41111805263333)) ('alpha_LRG', np.float64(1.0780129705758454)) ('f_sigv_LRG', np.float64(0.7646461675289016)) ('log_Mcent_LRG', np.float64(12.448866438129155)) ('sigma_M_LRG', np.float64(0.3036588192291174))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.646506679969411)) ('M_1_LRG', np.float64(13.033367608082331)) ('alpha_LRG', np.float64(1.0406940597319811)) ('f_sigv_LRG', np.float64(0.9875492387545365)) ('log_Mcent_LRG', np.float64(12.741458919810112)) ('sigma_M_LRG', np.float64(0.6248154151748055))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.360446678879278)) ('M_1_LRG', np.float64(13.668957970066717)) ('alpha_LRG', np.float64(1.2436424301360909)) ('f_sigv_LRG', np.float64(0.812165137280104)) ('log_Mcent_LRG', np.float64(12.79797891480999)) ('sigma_M_LRG', np.float64(0.5819685220406385))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.353880864131492)) ('M_1_LRG', np.float64(13.68564616787508)) ('alpha_LRG', np.float64(0.9940149441300745)) ('f_sigv_LRG', np.float64(1.0117352278428176)) ('log_Mcent_LRG', np.float64(12.741035243175718)) ('sigma_M_LRG', np.float64(0.4744605247110767))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.367114487585779)) ('M_1_LRG', np.float64(13.372278799525214)) ('alpha_LRG', np.float64(1.0081869935669898)) ('f_sigv_LRG', np.float64(1.018775223792653)) ('log_Mcent_LRG', np.float64(12.53684131108351)) ('sigma_M_LRG', np.float64(0.39841505331064697))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.361906545436923)) ('M_1_LRG', np.float64(13.340834485167626)) ('alpha_LRG', np.float64(0.8235969298751054)) ('f_sigv_LRG', np.float64(0.9545725550902795)) ('log_Mcent_LRG', np.float64(12.539051601518299)) ('sigma_M_LRG', np.float64(0.37990136301624006))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.830492567574439)) ('M_1_LRG', np.float64(13.749830751618715)) ('alpha_LRG', np.float64(0.758308295837139)) ('f_sigv_LRG', np.float64(1.110158060314312)) ('log_Mcent_LRG', np.float64(12.67044978627868)) ('sigma_M_LRG', np.float64(0.389237917181052))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.589467186791873)) ('M_1_LRG', np.float64(14.08517518643853)) ('alpha_LRG', np.float64(1.2566765377917406)) ('f_sigv_LRG', np.float64(0.8753774538811202)) ('log_Mcent_LRG', np.float64(12.824102731787764)) ('sigma_M_LRG', np.float64(0.38341600010953397))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.607374094873377)) ('M_1_LRG', np.float64(13.355955796075087)) ('alpha_LRG', np.float64(1.0242621585060874)) ('f_sigv_LRG', np.float64(0.7456605019476927)) ('log_Mcent_LRG', np.float64(12.664966781048365)) ('sigma_M_LRG', np.float64(0.43729256811707434))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.474598829415584)) ('M_1_LRG', np.float64(14.119390033914083)) ('alpha_LRG', np.float64(1.2049575485016664)) ('f_sigv_LRG', np.float64(0.7745353922088423)) ('log_Mcent_LRG', np.float64(12.830067086426116)) ('sigma_M_LRG', np.float64(0.4754349664598421))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 25] ('M_0_LRG', np.float64(12.48186704933953)) ('M_1_LRG', np.float64(13.602446649685204)) ('alpha_LRG', np.float64(0.7286590465527476)) ('f_sigv_LRG', np.float64(1.4087899182852976)) ('log_Mcent_LRG', np.float64(12.803839682894294)) ('sigma_M_LRG', np.float64(0.6720331382639878))
[Interation 25] chi2=1177.8148044796458
[Interation 25] chi2=3080.1447929061774
[Interation 25] chi2=52960.115580906946
[Interation 25] chi2=2591.9667933261508
[Interation 25] chi2=2522.7987092234744
[Interation 25] chi2=2049.358091788259
[Interation 25] chi2=5320.579756422991
[Interation 25] chi2=4995.606042574329
[Interation 25] chi2=2766.2119868446143
[Interation 25] chi2=8659.742423464142
[Interation 25] chi2=3085.9169352486033
[Interation 25] chi2=8593.503530957432
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 26] ('M_0_LRG', np.float64(12.529614378594676)) ('M_1_LRG', np.float64(13.870204821093077)) ('alpha_LRG', np.float64(1.2564319928590721)) ('f_sigv_LRG', np.float64(0.7370238073156045)) ('log_Mcent_LRG', np.float64(12.882511686739468)) ('sigma_M_LRG', np.float64(0.4493609231252268))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 26] ('M_0_LRG', np.float64(12.586835847511082)) ('M_1_LRG', np.float64(14.02134688734675)) ('alpha_LRG', np.float64(1.009017293257581)) ('f_sigv_LRG', np.float64(0.9102764590959971)) ('log_Mcent_LRG', np.float64(12.873890485370147)) ('sigma_M_LRG', np.float64(0.4255204490908846))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 26] ('M_0_LRG', np.float64(12.721434655422822)) ('M_1_LRG', np.float64(14.110350084758357)) ('alpha_LRG', np.float64(0.9029284662271144)) ('f_sigv_LRG', np.float64(0.9719899888422693)) ('log_Mcent_LRG', np.float64(12.910673934189047)) ('sigma_M_LRG', np.float64(0.4577257059361537))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 26] ('M_0_LRG', np.float64(12.583188303301512)) ('M_1_LRG', np.float64(13.845926577116842)) ('alpha_LRG', np.float64(1.0244759411629045)) ('f_sigv_LRG', np.float64(0.9799095994634139)) ('log_Mcent_LRG', np.float64(12.697736316739359)) ('sigma_M_LRG', np.float64(0.25212601895778214))
[Interation 26] chi2=1537.7403758864684
[Interation 26] chi2=461.16338154237474
[Interation 26] chi2=603.0220788169908
[Interation 26] chi2=634.2324038197589
[Interation 26] ('M_0_LRG', np.float64(12.739059022118072)) ('M_1_LRG', np.float64(13.858156586315243)) ('alpha_LRG', np.float64(1.0895489150078543)) ('f_sigv_LRG', np.float64(0.8702589548278697)) ('log_Mcent_LRG', np.float64(12.73178845077471)) ('sigma_M_LRG', np.float64(0.23656910091374916))
[Interation 26] ('M_0_LRG', np.float64(12.759943676072679)) ('M_1_LRG', np.float64(13.881272449234912)) ('alpha_LRG', np.float64(1.0630391120542886)) ('f_sigv_LRG', np.float64(0.8645805437366225)) ('log_Mcent_LRG', np.float64(12.780143648211684)) ('sigma_M_LRG', np.float64(0.3139416113370374))
[Interation 26] ('M_0_LRG', np.float64(12.62720886418696)) ('M_1_LRG', np.float64(13.923788058098722)) ('alpha_LRG', np.float64(1.1372764713510732)) ('f_sigv_LRG', np.float64(0.8725831716022906)) ('log_Mcent_LRG', np.float64(12.80820720339877)) ('sigma_M_LRG', np.float64(0.3502805358293051))
[Interation 26] ('M_0_LRG', np.float64(12.639300011350246)) ('M_1_LRG', np.float64(13.900515171946068)) ('alpha_LRG', np.float64(1.1403812912608455)) ('f_sigv_LRG', np.float64(0.8768733214938673)) ('log_Mcent_LRG', np.float64(12.768409598234346)) ('sigma_M_LRG', np.float64(0.28870684205088737))
[Interation 26] ('M_0_LRG', np.float64(12.758992731581227)) ('M_1_LRG', np.float64(13.89486985256329)) ('alpha_LRG', np.float64(1.0523481633098668)) ('f_sigv_LRG', np.float64(0.88339245514774)) ('log_Mcent_LRG', np.float64(12.767617540032807)) ('sigma_M_LRG', np.float64(0.27437851939169056))
[Interation 26] ('M_0_LRG', np.float64(12.659742876496612)) ('M_1_LRG', np.float64(13.928119516686062)) ('alpha_LRG', np.float64(1.1193100963101268)) ('f_sigv_LRG', np.float64(0.8696130846964172)) ('log_Mcent_LRG', np.float64(12.80644696568764)) ('sigma_M_LRG', np.float64(0.33351550945243746))
[Interation 26] ('M_0_LRG', np.float64(12.82541125934192)) ('M_1_LRG', np.float64(13.88896332828607)) ('alpha_LRG', np.float64(1.0299433763300163)) ('f_sigv_LRG', np.float64(0.877287166704188)) ('log_Mcent_LRG', np.float64(12.779494712467447)) ('sigma_M_LRG', np.float64(0.2894725889509765))
[Interation 26] ('M_0_LRG', np.float64(12.725067322620777)) ('M_1_LRG', np.float64(13.916347116897079)) ('alpha_LRG', np.float64(1.0766490595777285)) ('f_sigv_LRG', np.float64(0.8692209494551526)) ('log_Mcent_LRG', np.float64(12.815366864818085)) ('sigma_M_LRG', np.float64(0.35690352061436864))
[Interation 26] ('M_0_LRG', np.float64(12.70503586056243)) ('M_1_LRG', np.float64(13.925030176159975)) ('alpha_LRG', np.float64(1.0960135965266167)) ('f_sigv_LRG', np.float64(0.8570544935284367)) ('log_Mcent_LRG', np.float64(12.802234981088448)) ('sigma_M_LRG', np.float64(0.3255697557574736))
[Interation 26] ('M_0_LRG', np.float64(12.723020761787037)) ('M_1_LRG', np.float64(13.88100374759262)) ('alpha_LRG', np.float64(1.0893056550799336)) ('f_sigv_LRG', np.float64(0.8619640590967772)) ('log_Mcent_LRG', np.float64(12.75925751550808)) ('sigma_M_LRG', np.float64(0.279271124489774))
[Interation 26] ('M_0_LRG', np.float64(12.736987747504267)) ('M_1_LRG', np.float64(13.899885703251012)) ('alpha_LRG', np.float64(1.0615004670318122)) ('f_sigv_LRG', np.float64(0.8777369042012875)) ('log_Mcent_LRG', np.float64(12.794228124039618)) ('sigma_M_LRG', np.float64(0.32694817244989827))
[Interation 26] ('M_0_LRG', np.float64(12.814303171667564)) ('M_1_LRG', np.float64(13.874831266904643)) ('alpha_LRG', np.float64(1.058215518201658)) ('f_sigv_LRG', np.float64(0.8526728830019745)) ('log_Mcent_LRG', np.float64(12.792522993316693)) ('sigma_M_LRG', np.float64(0.3278134517973228))
[Interation 26] chi2=381.63398624798145
[Interation 26] chi2=327.431659435182
[Interation 26] chi2=342.2341093625981
[Interation 26] chi2=315.9689362360878
[Interation 26] chi2=355.37471710454366
[Interation 26] chi2=304.3189893540804
[Interation 26] chi2=317.37283254674884
[Interation 26] chi2=326.1249080536853
[Interation 26] chi2=329.1064181425698
[Interation 26] chi2=347.0390392572518
[Interation 26] chi2=281.8684312757418
[Interation 26] chi2=342.7528533695867
[Interation 27] ('M_0_LRG', np.float64(12.739327872665033)) ('M_1_LRG', np.float64(13.901484038173423)) ('alpha_LRG', np.float64(1.07724158503071)) ('f_sigv_LRG', np.float64(0.8692756213809074)) ('log_Mcent_LRG', np.float64(12.797898387735524)) ('sigma_M_LRG', np.float64(0.3264109319357035))
[Interation 27] ('M_0_LRG', np.float64(12.767493478318732)) ('M_1_LRG', np.float64(13.882952976692463)) ('alpha_LRG', np.float64(1.061712088287607)) ('f_sigv_LRG', np.float64(0.8705386291686565)) ('log_Mcent_LRG', np.float64(12.785658125496372)) ('sigma_M_LRG', np.float64(0.3176465075658499))
[Interation 27] ('M_0_LRG', np.float64(12.792980495486287)) ('M_1_LRG', np.float64(13.87986797126903)) ('alpha_LRG', np.float64(1.0480508530652506)) ('f_sigv_LRG', np.float64(0.8648723013532597)) ('log_Mcent_LRG', np.float64(12.786546716639297)) ('sigma_M_LRG', np.float64(0.3238804490885645))
[Interation 27] ('M_0_LRG', np.float64(12.79295314175261)) ('M_1_LRG', np.float64(13.870166485835476)) ('alpha_LRG', np.float64(1.0509199043306992)) ('f_sigv_LRG', np.float64(0.8767016728898399)) ('log_Mcent_LRG', np.float64(12.761031462321103)) ('sigma_M_LRG', np.float64(0.2721075091427355))
[Interation 27] chi2=317.7960517449264
[Interation 27] chi2=290.3081041472571
[Interation 27] chi2=340.76160893454784
[Interation 27] chi2=317.9878303015511
[Interation 27] ('M_0_LRG', np.float64(12.797889128529246)) ('M_1_LRG', np.float64(13.859240780877936)) ('alpha_LRG', np.float64(1.0451209248936648)) ('f_sigv_LRG', np.float64(0.8621328705738871)) ('log_Mcent_LRG', np.float64(12.756668463870454)) ('sigma_M_LRG', np.float64(0.27594631282674864))
[Interation 27] ('M_0_LRG', np.float64(12.81294869865379)) ('M_1_LRG', np.float64(13.86354646110739)) ('alpha_LRG', np.float64(1.040157603115336)) ('f_sigv_LRG', np.float64(0.8526857367566768)) ('log_Mcent_LRG', np.float64(12.76417626899556)) ('sigma_M_LRG', np.float64(0.2886691922853311))
[Interation 27] ('M_0_LRG', np.float64(12.8347703122843)) ('M_1_LRG', np.float64(13.843671790580766)) ('alpha_LRG', np.float64(1.0288555823275112)) ('f_sigv_LRG', np.float64(0.87380679418058)) ('log_Mcent_LRG', np.float64(12.746306153592311)) ('sigma_M_LRG', np.float64(0.2572829097765069))
[Interation 27] ('M_0_LRG', np.float64(12.864122023757647)) ('M_1_LRG', np.float64(13.844860113590885)) ('alpha_LRG', np.float64(1.0144433935229078)) ('f_sigv_LRG', np.float64(0.8583506525223122)) ('log_Mcent_LRG', np.float64(12.760134905649197)) ('sigma_M_LRG', np.float64(0.28694565253537074))
[Interation 27] ('M_0_LRG', np.float64(12.732374466959644)) ('M_1_LRG', np.float64(13.867072578402924)) ('alpha_LRG', np.float64(1.07610729698609)) ('f_sigv_LRG', np.float64(0.8714291592183105)) ('log_Mcent_LRG', np.float64(12.745301365341193)) ('sigma_M_LRG', np.float64(0.2601420454389809))
[Interation 27] ('M_0_LRG', np.float64(12.768307303190092)) ('M_1_LRG', np.float64(13.866587342929769)) ('alpha_LRG', np.float64(1.0683778248747329)) ('f_sigv_LRG', np.float64(0.8677486772136005)) ('log_Mcent_LRG', np.float64(12.75518666481847)) ('sigma_M_LRG', np.float64(0.26769112188748356))
[Interation 27] ('M_0_LRG', np.float64(12.795677909848322)) ('M_1_LRG', np.float64(13.851220346506018)) ('alpha_LRG', np.float64(1.038341823350252)) ('f_sigv_LRG', np.float64(0.8607718910458557)) ('log_Mcent_LRG', np.float64(12.743054445623006)) ('sigma_M_LRG', np.float64(0.2550685540159523))
[Interation 27] ('M_0_LRG', np.float64(12.781859114689224)) ('M_1_LRG', np.float64(13.854331573561813)) ('alpha_LRG', np.float64(1.050095286297435)) ('f_sigv_LRG', np.float64(0.8684395693660228)) ('log_Mcent_LRG', np.float64(12.743654270597272)) ('sigma_M_LRG', np.float64(0.25332534549698293))
[Interation 27] ('M_0_LRG', np.float64(12.741325990756224)) ('M_1_LRG', np.float64(13.851163071099517)) ('alpha_LRG', np.float64(1.0771446994675078)) ('f_sigv_LRG', np.float64(0.8631533640761656)) ('log_Mcent_LRG', np.float64(12.736202071332587)) ('sigma_M_LRG', np.float64(0.25235884606838904))
[Interation 27] ('M_0_LRG', np.float64(12.792112038547598)) ('M_1_LRG', np.float64(13.840157477969766)) ('alpha_LRG', np.float64(1.04065187727731)) ('f_sigv_LRG', np.float64(0.8675190351991833)) ('log_Mcent_LRG', np.float64(12.737259770332805)) ('sigma_M_LRG', np.float64(0.2603154475068977))
[Interation 27] ('M_0_LRG', np.float64(12.812431662865153)) ('M_1_LRG', np.float64(13.868812376767776)) ('alpha_LRG', np.float64(1.0417695425744902)) ('f_sigv_LRG', np.float64(0.8648220645592815)) ('log_Mcent_LRG', np.float64(12.78256472789925)) ('sigma_M_LRG', np.float64(0.3170243172400908))
[Interation 27] ('M_0_LRG', np.float64(12.804301985853597)) ('M_1_LRG', np.float64(13.876775340188713)) ('alpha_LRG', np.float64(1.0405345768766496)) ('f_sigv_LRG', np.float64(0.8625804516373444)) ('log_Mcent_LRG', np.float64(12.787273234103955)) ('sigma_M_LRG', np.float64(0.3279309045549128))
[Interation 27] chi2=322.16374333965234
[Interation 27] chi2=372.5917973783071
[Interation 27] chi2=356.21045406521455
[Interation 27] chi2=320.3038201796833
[Interation 27] chi2=279.66634692415977
[Interation 27] chi2=318.03884097506864
[Interation 27] chi2=311.73008326591366
[Interation 27] chi2=325.9590100713566
[Interation 27] chi2=313.72805785176706
[Interation 27] chi2=314.5690082710768
[Interation 27] chi2=316.9722192861274
[Interation 27] chi2=331.9739564589644
[Interation 28] ('M_0_LRG', np.float64(12.749632499678603)) ('M_1_LRG', np.float64(13.863762344615704)) ('alpha_LRG', np.float64(1.063941273559448)) ('f_sigv_LRG', np.float64(0.864718516060682)) ('log_Mcent_LRG', np.float64(12.742204317771394)) ('sigma_M_LRG', np.float64(0.25419799863471154))
[Interation 28] ('M_0_LRG', np.float64(12.786415023160572)) ('M_1_LRG', np.float64(13.8557357781371)) ('alpha_LRG', np.float64(1.0510328659852832)) ('f_sigv_LRG', np.float64(0.8706719613657166)) ('log_Mcent_LRG', np.float64(12.7432916582208)) ('sigma_M_LRG', np.float64(0.25111567785074584))
[Interation 28] ('M_0_LRG', np.float64(12.781349722441421)) ('M_1_LRG', np.float64(13.855589298501698)) ('alpha_LRG', np.float64(1.0510962733871203)) ('f_sigv_LRG', np.float64(0.8595286604809964)) ('log_Mcent_LRG', np.float64(12.744385784757975)) ('sigma_M_LRG', np.float64(0.2624524271018389))
[Interation 28] ('M_0_LRG', np.float64(12.755273846924496)) ('M_1_LRG', np.float64(13.879403501047575)) ('alpha_LRG', np.float64(1.067678142565187)) ('f_sigv_LRG', np.float64(0.8647613150254352)) ('log_Mcent_LRG', np.float64(12.766177731791531)) ('sigma_M_LRG', np.float64(0.28405063794449825))
[Interation 28] chi2=293.3732407191838
[Interation 28] chi2=302.0144087014704
[Interation 28] chi2=341.7777402262074
[Interation 28] chi2=317.65242428335563
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_14.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_14.npy
Set number of threads to 32
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.860474335794494)) ('M_1_LRG', np.float64(13.842418384800474)) ('alpha_LRG', np.float64(1.0087925065909806)) ('f_sigv_LRG', np.float64(0.8577002127035813)) ('log_Mcent_LRG', np.float64(12.743879942412319)) ('sigma_M_LRG', np.float64(0.2517955368167184))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3909323215484619
Start satellite assignement
Satellite assignement done 0.0720360279083252
LRG mock catalogue done 0.1426246166229248
616908 central galaxies, 83100 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.7129936218261719
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_14.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:20
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.746672127927514)) ('M_1_LRG', np.float64(13.890298273919619)) ('alpha_LRG', np.float64(1.0446335621232417)) ('f_sigv_LRG', np.float64(0.8704689759865171)) ('log_Mcent_LRG', np.float64(12.763727939837835)) ('sigma_M_LRG', np.float64(0.28348878154698326))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.517674602501444)) ('M_1_LRG', np.float64(13.9591252603724)) ('alpha_LRG', np.float64(1.1881429602775233)) ('f_sigv_LRG', np.float64(0.8591447104345722)) ('log_Mcent_LRG', np.float64(12.860799770859172)) ('sigma_M_LRG', np.float64(0.4261377201399652))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.806939470461433)) ('M_1_LRG', np.float64(13.890386642494374)) ('alpha_LRG', np.float64(1.0473626460809344)) ('f_sigv_LRG', np.float64(0.8466083864586122)) ('log_Mcent_LRG', np.float64(12.836170001921962)) ('sigma_M_LRG', np.float64(0.37629751739949446))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.79879097494347)) ('M_1_LRG', np.float64(13.895939154726502)) ('alpha_LRG', np.float64(1.0464608877721298)) ('f_sigv_LRG', np.float64(0.8570106635367994)) ('log_Mcent_LRG', np.float64(12.808080229989523)) ('sigma_M_LRG', np.float64(0.36360692059874933))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.79078056498736)) ('M_1_LRG', np.float64(13.878744043903016)) ('alpha_LRG', np.float64(1.0452197645840728)) ('f_sigv_LRG', np.float64(0.8738174691353596)) ('log_Mcent_LRG', np.float64(12.749936757093026)) ('sigma_M_LRG', np.float64(0.24673196725169622))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.672781628295676)) ('M_1_LRG', np.float64(13.853355539647096)) ('alpha_LRG', np.float64(1.1011479060260485)) ('f_sigv_LRG', np.float64(0.9062543359368778)) ('log_Mcent_LRG', np.float64(12.720211611614346)) ('sigma_M_LRG', np.float64(0.2141582283932147))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.640476672023842)) ('M_1_LRG', np.float64(13.91335752903639)) ('alpha_LRG', np.float64(1.0914138652153011)) ('f_sigv_LRG', np.float64(0.8522260643277093)) ('log_Mcent_LRG', np.float64(12.793789162378221)) ('sigma_M_LRG', np.float64(0.32539191807424517))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.70834692598532)) ('M_1_LRG', np.float64(13.912027801465774)) ('alpha_LRG', np.float64(1.132322531172269)) ('f_sigv_LRG', np.float64(0.8746032343478682)) ('log_Mcent_LRG', np.float64(12.812070677711564)) ('sigma_M_LRG', np.float64(0.34494564755288226))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.553008586909984)) ('M_1_LRG', np.float64(13.861199168654322)) ('alpha_LRG', np.float64(1.170646785406647)) ('f_sigv_LRG', np.float64(0.8554116933596922)) ('log_Mcent_LRG', np.float64(12.715653040461156)) ('sigma_M_LRG', np.float64(0.2349637607975129))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.739613257074772)) ('M_1_LRG', np.float64(13.893977408666599)) ('alpha_LRG', np.float64(1.0444562722704558)) ('f_sigv_LRG', np.float64(0.8507180338986426)) ('log_Mcent_LRG', np.float64(12.775250696985774)) ('sigma_M_LRG', np.float64(0.30973001693872215))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.840864260528221)) ('M_1_LRG', np.float64(13.891597306293075)) ('alpha_LRG', np.float64(1.0004354239026483)) ('f_sigv_LRG', np.float64(0.8529225746155618)) ('log_Mcent_LRG', np.float64(12.788035741620435)) ('sigma_M_LRG', np.float64(0.30906640531212104))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 28] ('M_0_LRG', np.float64(12.804324142651934)) ('M_1_LRG', np.float64(13.91770471650967)) ('alpha_LRG', np.float64(1.0347855152420722)) ('f_sigv_LRG', np.float64(0.8479384391955427)) ('log_Mcent_LRG', np.float64(12.84973530287309)) ('sigma_M_LRG', np.float64(0.4084046931698879))
[Interation 28] chi2=316.5482024656597
[Interation 28] chi2=364.2296369312555
[Interation 28] chi2=391.66976226915756
[Interation 28] chi2=321.853258173187
[Interation 28] chi2=311.76008164930636
[Interation 28] chi2=298.1030619494779
[Interation 28] chi2=356.5133827861525
[Interation 28] chi2=344.13103228893783
[Interation 28] chi2=348.5583200169134
[Interation 28] chi2=364.28176763691323
[Interation 28] chi2=338.40758487190993
[Interation 28] chi2=345.1066007032155
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 29] ('M_0_LRG', np.float64(12.826493723809282)) ('M_1_LRG', np.float64(13.88508513815966)) ('alpha_LRG', np.float64(1.0457365103093186)) ('f_sigv_LRG', np.float64(0.8352845976106527)) ('log_Mcent_LRG', np.float64(12.783959671234161)) ('sigma_M_LRG', np.float64(0.31322444180493575))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 29] ('M_0_LRG', np.float64(12.740548033123629)) ('M_1_LRG', np.float64(13.883355096306273)) ('alpha_LRG', np.float64(1.0736736537945375)) ('f_sigv_LRG', np.float64(0.8725108146443769)) ('log_Mcent_LRG', np.float64(12.785818001306156)) ('sigma_M_LRG', np.float64(0.31559034229308924))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 29] ('M_0_LRG', np.float64(12.714720463851144)) ('M_1_LRG', np.float64(13.852487177951733)) ('alpha_LRG', np.float64(1.0696735892453384)) ('f_sigv_LRG', np.float64(0.8668919572739001)) ('log_Mcent_LRG', np.float64(12.73743664684606)) ('sigma_M_LRG', np.float64(0.2669568640656908))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 29] ('M_0_LRG', np.float64(12.867882970054435)) ('M_1_LRG', np.float64(13.899412067894062)) ('alpha_LRG', np.float64(0.9835157572087325)) ('f_sigv_LRG', np.float64(0.8267553938841472)) ('log_Mcent_LRG', np.float64(12.800172850111004)) ('sigma_M_LRG', np.float64(0.3421798351903709))
[Interation 29] chi2=313.1314722409674
[Interation 29] chi2=312.7372502808016
[Interation 29] chi2=329.30218024306436
[Interation 29] chi2=291.22894213999075
[Interation 29] ('M_0_LRG', np.float64(12.764570983156448)) ('M_1_LRG', np.float64(13.89430007631632)) ('alpha_LRG', np.float64(1.0496941311219767)) ('f_sigv_LRG', np.float64(0.8578035925549339)) ('log_Mcent_LRG', np.float64(12.793472878822946)) ('sigma_M_LRG', np.float64(0.32536325816435563))
[Interation 29] ('M_0_LRG', np.float64(12.733927191555068)) ('M_1_LRG', np.float64(13.899956153198671)) ('alpha_LRG', np.float64(1.0760186634404998)) ('f_sigv_LRG', np.float64(0.8870402843986626)) ('log_Mcent_LRG', np.float64(12.783439938638175)) ('sigma_M_LRG', np.float64(0.30244079836210835))
[Interation 29] ('M_0_LRG', np.float64(12.869524699648622)) ('M_1_LRG', np.float64(13.855936274442756)) ('alpha_LRG', np.float64(0.9975162637591353)) ('f_sigv_LRG', np.float64(0.877776778038296)) ('log_Mcent_LRG', np.float64(12.741260074894333)) ('sigma_M_LRG', np.float64(0.24117544933631063))
[Interation 29] ('M_0_LRG', np.float64(12.758730908433822)) ('M_1_LRG', np.float64(13.85115500048321)) ('alpha_LRG', np.float64(1.0476497517888645)) ('f_sigv_LRG', np.float64(0.8754363122270933)) ('log_Mcent_LRG', np.float64(12.728072671224355)) ('sigma_M_LRG', np.float64(0.23943345735236715))
[Interation 29] ('M_0_LRG', np.float64(12.786882333597674)) ('M_1_LRG', np.float64(13.85053509617227)) ('alpha_LRG', np.float64(1.0387049804806332)) ('f_sigv_LRG', np.float64(0.8670825721194817)) ('log_Mcent_LRG', np.float64(12.736101414448544)) ('sigma_M_LRG', np.float64(0.2431938903847528))
[Interation 29] ('M_0_LRG', np.float64(12.747372779364644)) ('M_1_LRG', np.float64(13.865080872988438)) ('alpha_LRG', np.float64(1.0483842825384746)) ('f_sigv_LRG', np.float64(0.872842698882938)) ('log_Mcent_LRG', np.float64(12.75004500658677)) ('sigma_M_LRG', np.float64(0.2692350213976307))
[Interation 29] ('M_0_LRG', np.float64(12.785594593337324)) ('M_1_LRG', np.float64(13.851147930615499)) ('alpha_LRG', np.float64(1.0392267115375873)) ('f_sigv_LRG', np.float64(0.8747281339896182)) ('log_Mcent_LRG', np.float64(12.740522456282383)) ('sigma_M_LRG', np.float64(0.24732384574272254))
[Interation 29] ('M_0_LRG', np.float64(12.760550252289837)) ('M_1_LRG', np.float64(13.864131812812873)) ('alpha_LRG', np.float64(1.0274965074177498)) ('f_sigv_LRG', np.float64(0.8821674660575434)) ('log_Mcent_LRG', np.float64(12.748301301433154)) ('sigma_M_LRG', np.float64(0.26258619277320017))
[Interation 29] ('M_0_LRG', np.float64(12.782852854831383)) ('M_1_LRG', np.float64(13.832441403074926)) ('alpha_LRG', np.float64(1.0103866654391558)) ('f_sigv_LRG', np.float64(0.8942174971175973)) ('log_Mcent_LRG', np.float64(12.711846415888104)) ('sigma_M_LRG', np.float64(0.20175631264090954))
[Interation 29] ('M_0_LRG', np.float64(12.758034528105574)) ('M_1_LRG', np.float64(13.874433019041811)) ('alpha_LRG', np.float64(1.0439892555905594)) ('f_sigv_LRG', np.float64(0.8770209382086094)) ('log_Mcent_LRG', np.float64(12.757510323788956)) ('sigma_M_LRG', np.float64(0.2700115590234493))
[Interation 29] ('M_0_LRG', np.float64(12.732037056949581)) ('M_1_LRG', np.float64(13.891507897430637)) ('alpha_LRG', np.float64(1.0589627266510104)) ('f_sigv_LRG', np.float64(0.8723365787479523)) ('log_Mcent_LRG', np.float64(12.774803401374824)) ('sigma_M_LRG', np.float64(0.2916440865528692))
[Interation 29] ('M_0_LRG', np.float64(12.713258940713972)) ('M_1_LRG', np.float64(13.873710177752871)) ('alpha_LRG', np.float64(1.0850581339166894)) ('f_sigv_LRG', np.float64(0.8680965386859909)) ('log_Mcent_LRG', np.float64(12.745978851654572)) ('sigma_M_LRG', np.float64(0.25201338453204447))
[Interation 29] chi2=304.50986065643735
[Interation 29] chi2=305.9771311509592
[Interation 29] chi2=324.3373415636578
[Interation 29] chi2=307.0511385422185
[Interation 29] chi2=301.50387969564827
[Interation 29] chi2=325.61402035101094
[Interation 29] chi2=307.39414976308336
[Interation 29] chi2=275.25529171773877
[Interation 29] chi2=284.15472368778575
[Interation 29] chi2=284.74821678941305
[Interation 29] chi2=290.92809886979296
[Interation 29] chi2=309.9024165666284
[Interation 30] ('M_0_LRG', np.float64(12.721462026451555)) ('M_1_LRG', np.float64(13.902065116799323)) ('alpha_LRG', np.float64(1.0762329226839626)) ('f_sigv_LRG', np.float64(0.8876950075666651)) ('log_Mcent_LRG', np.float64(12.781300705061279)) ('sigma_M_LRG', np.float64(0.30335188023744086))
[Interation 30] ('M_0_LRG', np.float64(12.774648798557262)) ('M_1_LRG', np.float64(13.867891339273609)) ('alpha_LRG', np.float64(1.0313206070833856)) ('f_sigv_LRG', np.float64(0.8673210077928772)) ('log_Mcent_LRG', np.float64(12.752903818049775)) ('sigma_M_LRG', np.float64(0.27262715777123037))
[Interation 30] ('M_0_LRG', np.float64(12.731397890793955)) ('M_1_LRG', np.float64(13.901304985006474)) ('alpha_LRG', np.float64(1.0684196061556985)) ('f_sigv_LRG', np.float64(0.8659711021174415)) ('log_Mcent_LRG', np.float64(12.78180887617464)) ('sigma_M_LRG', np.float64(0.31468302129467307))
[Interation 30] ('M_0_LRG', np.float64(12.730503473177292)) ('M_1_LRG', np.float64(13.89022462180022)) ('alpha_LRG', np.float64(1.0661490938378457)) ('f_sigv_LRG', np.float64(0.8763611905194242)) ('log_Mcent_LRG', np.float64(12.770480826231628)) ('sigma_M_LRG', np.float64(0.2978909296829931))
[Interation 30] chi2=322.0501213821488
[Interation 30] chi2=325.09054039998597
[Interation 30] chi2=326.8790679622243
[Interation 30] chi2=347.60030488850043
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_15.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_15.npy
Set number of threads to 32
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.761302054162163)) ('M_1_LRG', np.float64(13.863153667608255)) ('alpha_LRG', np.float64(1.0442388151622075)) ('f_sigv_LRG', np.float64(0.8749662197578688)) ('log_Mcent_LRG', np.float64(12.743573928920759)) ('sigma_M_LRG', np.float64(0.2437518462130871))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.31670331954956055
Start satellite assignement
Satellite assignement done 0.07242369651794434
LRG mock catalogue done 0.14731645584106445
614624 central galaxies, 85676 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6531965732574463
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_15.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:17
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:18
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:18
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:18
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:18
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:18
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:19
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:19
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:20
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load smu measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.227516408513907)) ('M_1_LRG', np.float64(14.213988396275463)) ('alpha_LRG', np.float64(0.8740922458465845)) ('f_sigv_LRG', np.float64(0.9824055868374065)) ('log_Mcent_LRG', np.float64(13.110161200834078)) ('sigma_M_LRG', np.float64(0.5888908643538592))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.43502754663861)) ('M_1_LRG', np.float64(13.49743099870637)) ('alpha_LRG', np.float64(1.0070860642392645)) ('f_sigv_LRG', np.float64(0.7950515706030277)) ('log_Mcent_LRG', np.float64(12.815435575595671)) ('sigma_M_LRG', np.float64(0.7129299801493123))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.832229825347072)) ('M_1_LRG', np.float64(13.77707236529527)) ('alpha_LRG', np.float64(0.7168786797192754)) ('f_sigv_LRG', np.float64(1.148924289264775)) ('log_Mcent_LRG', np.float64(12.707447896353711)) ('sigma_M_LRG', np.float64(0.4607501591849834))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.36390915824783)) ('M_1_LRG', np.float64(13.94036427444632)) ('alpha_LRG', np.float64(1.0948597404000389)) ('f_sigv_LRG', np.float64(0.5529930834497223)) ('log_Mcent_LRG', np.float64(12.960529454457687)) ('sigma_M_LRG', np.float64(0.5224721641310476))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.759679143643439)) ('M_1_LRG', np.float64(13.239028316726126)) ('alpha_LRG', np.float64(1.2574351373948855)) ('f_sigv_LRG', np.float64(1.0294112870417278)) ('log_Mcent_LRG', np.float64(12.71058682153549)) ('sigma_M_LRG', np.float64(0.7126466378429714))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(11.96591286632106)) ('M_1_LRG', np.float64(13.995206734172797)) ('alpha_LRG', np.float64(0.9588363477473049)) ('f_sigv_LRG', np.float64(0.8381670106737844)) ('log_Mcent_LRG', np.float64(12.786696017436576)) ('sigma_M_LRG', np.float64(0.3948040696270236))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.566171232124459)) ('M_1_LRG', np.float64(13.627733412187432)) ('alpha_LRG', np.float64(1.3726164859539693)) ('f_sigv_LRG', np.float64(0.9985441673148472)) ('log_Mcent_LRG', np.float64(12.703718224707096)) ('sigma_M_LRG', np.float64(0.36740090556481036))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.682314766468666)) ('M_1_LRG', np.float64(13.944467633720315)) ('alpha_LRG', np.float64(0.8783213256145006)) ('f_sigv_LRG', np.float64(0.9385707609475274)) ('log_Mcent_LRG', np.float64(12.815953708704933)) ('sigma_M_LRG', np.float64(0.5978641254942259))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.65555505187734)) ('M_1_LRG', np.float64(13.852767199614108)) ('alpha_LRG', np.float64(0.9950526515095288)) ('f_sigv_LRG', np.float64(0.7209701593697455)) ('log_Mcent_LRG', np.float64(12.796635007385175)) ('sigma_M_LRG', np.float64(0.5519134352908842))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.49460909050447)) ('M_1_LRG', np.float64(14.68407734173574)) ('alpha_LRG', np.float64(0.9497458938809414)) ('f_sigv_LRG', np.float64(0.7602975919076798)) ('log_Mcent_LRG', np.float64(13.176200720602889)) ('sigma_M_LRG', np.float64(0.3031617937961917))
[Interation 30] chi2=1755.768066161203
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.399539634963766)) ('M_1_LRG', np.float64(14.251153316846098)) ('alpha_LRG', np.float64(0.9194532460166822)) ('f_sigv_LRG', np.float64(1.0073101997884386)) ('log_Mcent_LRG', np.float64(12.785491415928268)) ('sigma_M_LRG', np.float64(0.338554423350508))
[Interation 30] chi2=6326.151528927286
[Interation 30] chi2=3390.86445386557
[Interation 30] chi2=4607.561404964325
[Interation 30] chi2=1607.0951747637225
[Interation 30] chi2=44560.22035468609
[Interation 30] chi2=15990.845209364164
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 30] ('M_0_LRG', np.float64(12.609833777001398)) ('M_1_LRG', np.float64(13.76004922523197)) ('alpha_LRG', np.float64(0.9552141843230536)) ('f_sigv_LRG', np.float64(0.9032076684880592)) ('log_Mcent_LRG', np.float64(12.656833195823172)) ('sigma_M_LRG', np.float64(0.341079922779003))
[Interation 30] chi2=11731.878945601127
[Interation 30] chi2=4269.9315327886525
[Interation 30] chi2=2273.0873665949193
[Interation 30] chi2=1784.4405456903312
[Interation 30] chi2=1482.4415415777469
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 31] ('M_0_LRG', np.float64(12.598291311143177)) ('M_1_LRG', np.float64(14.086230854147708)) ('alpha_LRG', np.float64(0.9654086272369278)) ('f_sigv_LRG', np.float64(0.8592656404669807)) ('log_Mcent_LRG', np.float64(12.690353154334007)) ('sigma_M_LRG', np.float64(0.15414611264364358))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 31] ('M_0_LRG', np.float64(12.564838984065336)) ('M_1_LRG', np.float64(13.88627958945893)) ('alpha_LRG', np.float64(0.9062625253315256)) ('f_sigv_LRG', np.float64(0.9017784361173492)) ('log_Mcent_LRG', np.float64(12.739982037688788)) ('sigma_M_LRG', np.float64(0.4883899932379104))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 31] ('M_0_LRG', np.float64(12.586499770332724)) ('M_1_LRG', np.float64(14.076155052017633)) ('alpha_LRG', np.float64(0.8205709167094739)) ('f_sigv_LRG', np.float64(0.9238431618344626)) ('log_Mcent_LRG', np.float64(12.781217032851954)) ('sigma_M_LRG', np.float64(0.4142718131421473))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 31] ('M_0_LRG', np.float64(12.423764663784835)) ('M_1_LRG', np.float64(14.04477872355216)) ('alpha_LRG', np.float64(1.040261219418417)) ('f_sigv_LRG', np.float64(0.9427866497821253)) ('log_Mcent_LRG', np.float64(12.728877441726938)) ('sigma_M_LRG', np.float64(0.16881964475069866))
[Interation 31] chi2=1395.4070107127773
[Interation 31] chi2=2696.1573845712105
[Interation 31] chi2=1459.3507728065474
[Interation 31] chi2=746.2164950293155
[Interation 31] ('M_0_LRG', np.float64(12.745400668412296)) ('M_1_LRG', np.float64(13.858947919463526)) ('alpha_LRG', np.float64(1.0717744931674407)) ('f_sigv_LRG', np.float64(0.8645389992103172)) ('log_Mcent_LRG', np.float64(12.740186624506887)) ('sigma_M_LRG', np.float64(0.25210449563615056))
[Interation 31] ('M_0_LRG', np.float64(12.741496815222535)) ('M_1_LRG', np.float64(13.872552438528363)) ('alpha_LRG', np.float64(1.0696293710095892)) ('f_sigv_LRG', np.float64(0.8584731429633062)) ('log_Mcent_LRG', np.float64(12.772694723093116)) ('sigma_M_LRG', np.float64(0.30574789006322706))
[Interation 31] ('M_0_LRG', np.float64(12.825545720322431)) ('M_1_LRG', np.float64(13.84021228188131)) ('alpha_LRG', np.float64(1.0249584145247665)) ('f_sigv_LRG', np.float64(0.8607711382411336)) ('log_Mcent_LRG', np.float64(12.739120967353548)) ('sigma_M_LRG', np.float64(0.24782617068638813))
[Interation 31] ('M_0_LRG', np.float64(12.75088220774298)) ('M_1_LRG', np.float64(13.871947466174154)) ('alpha_LRG', np.float64(1.072376559464837)) ('f_sigv_LRG', np.float64(0.8604403637326055)) ('log_Mcent_LRG', np.float64(12.742434101825168)) ('sigma_M_LRG', np.float64(0.2439226448209485))
[Interation 31] ('M_0_LRG', np.float64(12.62537733386356)) ('M_1_LRG', np.float64(13.934644719402584)) ('alpha_LRG', np.float64(1.1497402622042328)) ('f_sigv_LRG', np.float64(0.8656819348166567)) ('log_Mcent_LRG', np.float64(12.800653388868815)) ('sigma_M_LRG', np.float64(0.31990198365698513))
[Interation 31] ('M_0_LRG', np.float64(12.680348792838847)) ('M_1_LRG', np.float64(13.88964583918464)) ('alpha_LRG', np.float64(1.090997280795139)) ('f_sigv_LRG', np.float64(0.8800365072220868)) ('log_Mcent_LRG', np.float64(12.770101124091243)) ('sigma_M_LRG', np.float64(0.29745575454507545))
[Interation 31] ('M_0_LRG', np.float64(12.652101015380936)) ('M_1_LRG', np.float64(13.88455526480072)) ('alpha_LRG', np.float64(1.1170048642727766)) ('f_sigv_LRG', np.float64(0.8721292848671294)) ('log_Mcent_LRG', np.float64(12.755736747875421)) ('sigma_M_LRG', np.float64(0.26680945889046315))
[Interation 31] ('M_0_LRG', np.float64(12.74908541756194)) ('M_1_LRG', np.float64(13.875466601317571)) ('alpha_LRG', np.float64(1.0585326144260845)) ('f_sigv_LRG', np.float64(0.8796145502934343)) ('log_Mcent_LRG', np.float64(12.749440814660632)) ('sigma_M_LRG', np.float64(0.2488475213375248))
[Interation 31] ('M_0_LRG', np.float64(12.823887037928083)) ('M_1_LRG', np.float64(13.854887994119188)) ('alpha_LRG', np.float64(1.0319616626270838)) ('f_sigv_LRG', np.float64(0.871434640969877)) ('log_Mcent_LRG', np.float64(12.748809811128954)) ('sigma_M_LRG', np.float64(0.2573910842044822))
[Interation 31] ('M_0_LRG', np.float64(12.814030106691714)) ('M_1_LRG', np.float64(13.844789280639802)) ('alpha_LRG', np.float64(1.040387146120078)) ('f_sigv_LRG', np.float64(0.8710477374416005)) ('log_Mcent_LRG', np.float64(12.737903253111373)) ('sigma_M_LRG', np.float64(0.23526323078487466))
[Interation 31] ('M_0_LRG', np.float64(12.717873800790759)) ('M_1_LRG', np.float64(13.884984967951361)) ('alpha_LRG', np.float64(1.098358369545306)) ('f_sigv_LRG', np.float64(0.8689918520155261)) ('log_Mcent_LRG', np.float64(12.760310705052948)) ('sigma_M_LRG', np.float64(0.2638799187115114))
[Interation 31] ('M_0_LRG', np.float64(12.768613160891661)) ('M_1_LRG', np.float64(13.849864173108765)) ('alpha_LRG', np.float64(1.0516695269167027)) ('f_sigv_LRG', np.float64(0.867726831126747)) ('log_Mcent_LRG', np.float64(12.744301714067886)) ('sigma_M_LRG', np.float64(0.2520594062083573))
[Interation 32] ('M_0_LRG', np.float64(12.836331078923275)) ('M_1_LRG', np.float64(13.825599978757452)) ('alpha_LRG', np.float64(1.0305418012027237)) ('f_sigv_LRG', np.float64(0.8651788502226336)) ('log_Mcent_LRG', np.float64(12.726165440857377)) ('sigma_M_LRG', np.float64(0.23361219081847667))
[Interation 31] chi2=289.84077552794764
[Interation 32] ('M_0_LRG', np.float64(12.830987541260154)) ('M_1_LRG', np.float64(13.834255445479966)) ('alpha_LRG', np.float64(1.0402345189214341)) ('f_sigv_LRG', np.float64(0.8627402005060052)) ('log_Mcent_LRG', np.float64(12.733016891012072)) ('sigma_M_LRG', np.float64(0.23383151369163763))
[Interation 31] chi2=317.28565250618817
[Interation 31] chi2=301.41400762626995
[Interation 31] chi2=313.3888577996172
[Interation 31] chi2=328.86101662902865
[Interation 31] chi2=368.3933955247718
[Interation 31] chi2=358.94961377194954
[Interation 31] chi2=380.91193234159255
[Interation 31] chi2=334.1091249128814
[Interation 31] chi2=331.4537047369219
[Interation 31] chi2=301.46050610302404
[Interation 32] ('M_0_LRG', np.float64(12.779183959030126)) ('M_1_LRG', np.float64(13.853565315422268)) ('alpha_LRG', np.float64(1.0602373037561936)) ('f_sigv_LRG', np.float64(0.8582384649587769)) ('log_Mcent_LRG', np.float64(12.756966734370227)) ('sigma_M_LRG', np.float64(0.28726704703998285))
[Interation 32] ('M_0_LRG', np.float64(12.780373878064317)) ('M_1_LRG', np.float64(13.876565080870897)) ('alpha_LRG', np.float64(1.0479099527433315)) ('f_sigv_LRG', np.float64(0.8799835036559776)) ('log_Mcent_LRG', np.float64(12.763515836030276)) ('sigma_M_LRG', np.float64(0.27029039125033266))
[Interation 31] chi2=269.77809325925955
[Interation 32] chi2=322.14711161475043
[Interation 32] chi2=350.15672311661626
[Interation 32] chi2=317.43990016127185
[Interation 32] chi2=288.163462240192
[Interation 33] ('M_0_LRG', np.float64(12.775205715495202)) ('M_1_LRG', np.float64(13.8596178618898)) ('alpha_LRG', np.float64(1.0467548924387444)) ('f_sigv_LRG', np.float64(0.8703221080181422)) ('log_Mcent_LRG', np.float64(12.739842787877267)) ('sigma_M_LRG', np.float64(0.23900372686850524))
[Interation 33] ('M_0_LRG', np.float64(12.76493899676407)) ('M_1_LRG', np.float64(13.854104376035258)) ('alpha_LRG', np.float64(1.0457341386027932)) ('f_sigv_LRG', np.float64(0.8678187771372995)) ('log_Mcent_LRG', np.float64(12.72149348687026)) ('sigma_M_LRG', np.float64(0.20543591934520655))
[Interation 33] ('M_0_LRG', np.float64(12.801063249980945)) ('M_1_LRG', np.float64(13.849693658993294)) ('alpha_LRG', np.float64(1.0358800512167614)) ('f_sigv_LRG', np.float64(0.8610925933964227)) ('log_Mcent_LRG', np.float64(12.737059595710718)) ('sigma_M_LRG', np.float64(0.23925552289029678))
[Interation 33] ('M_0_LRG', np.float64(12.781954556374982)) ('M_1_LRG', np.float64(13.849062635450645)) ('alpha_LRG', np.float64(1.0455042560905505)) ('f_sigv_LRG', np.float64(0.8761676044285146)) ('log_Mcent_LRG', np.float64(12.737383810564234)) ('sigma_M_LRG', np.float64(0.23789638712046196))
[Interation 33] chi2=300.0096764436778
[Interation 33] chi2=346.24158561662045
[Interation 33] chi2=331.50138429393934
[Interation 33] chi2=305.3536320547441
[Interation 32] ('M_0_LRG', np.float64(12.795693962459467)) ('M_1_LRG', np.float64(13.856132635030166)) ('alpha_LRG', np.float64(1.0403995644571449)) ('f_sigv_LRG', np.float64(0.869034668840079)) ('log_Mcent_LRG', np.float64(12.748983781182949)) ('sigma_M_LRG', np.float64(0.2593541215846967))
[Interation 32] ('M_0_LRG', np.float64(12.766835244883667)) ('M_1_LRG', np.float64(13.863637976909619)) ('alpha_LRG', np.float64(1.0494557851888575)) ('f_sigv_LRG', np.float64(0.875845369283869)) ('log_Mcent_LRG', np.float64(12.740394043242066)) ('sigma_M_LRG', np.float64(0.2327529804363766))
[Interation 32] ('M_0_LRG', np.float64(12.786495496299608)) ('M_1_LRG', np.float64(13.848843987683928)) ('alpha_LRG', np.float64(1.046200020683067)) ('f_sigv_LRG', np.float64(0.8658161548917191)) ('log_Mcent_LRG', np.float64(12.74271108383955)) ('sigma_M_LRG', np.float64(0.25130654684501774))
[Interation 32] ('M_0_LRG', np.float64(12.746458904469865)) ('M_1_LRG', np.float64(13.870261732936454)) ('alpha_LRG', np.float64(1.0637256128610608)) ('f_sigv_LRG', np.float64(0.8759785352007879)) ('log_Mcent_LRG', np.float64(12.753494596646187)) ('sigma_M_LRG', np.float64(0.2661949201726938))
[Interation 32] ('M_0_LRG', np.float64(12.774818568697777)) ('M_1_LRG', np.float64(13.866634148407133)) ('alpha_LRG', np.float64(1.0523514253714092)) ('f_sigv_LRG', np.float64(0.8610106455571007)) ('log_Mcent_LRG', np.float64(12.751644532330188)) ('sigma_M_LRG', np.float64(0.2557163710311858))
[Interation 32] ('M_0_LRG', np.float64(12.773520920249997)) ('M_1_LRG', np.float64(13.847846778198594)) ('alpha_LRG', np.float64(1.0370896342901939)) ('f_sigv_LRG', np.float64(0.8739599478819812)) ('log_Mcent_LRG', np.float64(12.724188263871048)) ('sigma_M_LRG', np.float64(0.2157204762299268))
[Interation 32] ('M_0_LRG', np.float64(12.780559861962798)) ('M_1_LRG', np.float64(13.852448477164678)) ('alpha_LRG', np.float64(1.0314821605748883)) ('f_sigv_LRG', np.float64(0.8720597950466615)) ('log_Mcent_LRG', np.float64(12.72109253683182)) ('sigma_M_LRG', np.float64(0.20198510790292862))
[Interation 32] ('M_0_LRG', np.float64(12.765440539058426)) ('M_1_LRG', np.float64(13.872383518877836)) ('alpha_LRG', np.float64(1.0461127541994326)) ('f_sigv_LRG', np.float64(0.8718971680815054)) ('log_Mcent_LRG', np.float64(12.746523467518319)) ('sigma_M_LRG', np.float64(0.24700518304135033))
[Interation 32] ('M_0_LRG', np.float64(12.77420369625428)) ('M_1_LRG', np.float64(13.861088073703291)) ('alpha_LRG', np.float64(1.0411857562076354)) ('f_sigv_LRG', np.float64(0.8795775170940834)) ('log_Mcent_LRG', np.float64(12.740596681646503)) ('sigma_M_LRG', np.float64(0.237104259655606))
[Interation 32] ('M_0_LRG', np.float64(12.786978994867527)) ('M_1_LRG', np.float64(13.85168385006367)) ('alpha_LRG', np.float64(1.0331257591485297)) ('f_sigv_LRG', np.float64(0.8762211007051719)) ('log_Mcent_LRG', np.float64(12.730154410581411)) ('sigma_M_LRG', np.float64(0.21426643714094523))
[Interation 32] ('M_0_LRG', np.float64(12.78020369610039)) ('M_1_LRG', np.float64(13.864004045176998)) ('alpha_LRG', np.float64(1.0447995326487711)) ('f_sigv_LRG', np.float64(0.8711329174016327)) ('log_Mcent_LRG', np.float64(12.756411732645097)) ('sigma_M_LRG', np.float64(0.26935921914817385))
[Interation 32] ('M_0_LRG', np.float64(12.779151076774824)) ('M_1_LRG', np.float64(13.849389726714142)) ('alpha_LRG', np.float64(1.0496258310843407)) ('f_sigv_LRG', np.float64(0.8720619674416777)) ('log_Mcent_LRG', np.float64(12.733711961677269)) ('sigma_M_LRG', np.float64(0.22820953469782668))
[Interation 32] chi2=285.33291041752926
[Interation 32] chi2=320.2613170852071
[Interation 32] chi2=339.35843836788973
[Interation 32] chi2=328.5858769766602
[Interation 32] chi2=289.72749518431016
[Interation 32] chi2=274.6367284578065
[Interation 32] chi2=321.6116778317548
[Interation 32] chi2=280.8207322539554
[Interation 32] chi2=354.8284353790978
[Interation 32] chi2=279.4710403758758
[Interation 32] chi2=310.61910412405314
[Interation 32] chi2=314.7450191840214
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_16.npy
Set number of threads to 32
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_16.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_16.npy
Set number of threads to 32
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.780421964100693)) ('M_1_LRG', np.float64(13.863926610180846)) ('alpha_LRG', np.float64(1.0484172781967245)) ('f_sigv_LRG', np.float64(0.8654844110563544)) ('log_Mcent_LRG', np.float64(12.749121718516951)) ('sigma_M_LRG', np.float64(0.2568193278052822))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3467581272125244
Start satellite assignement
Satellite assignement done 0.07263565063476562
LRG mock catalogue done 0.14545297622680664
615479 central galaxies, 84030 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6691000461578369
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_16.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:17
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:17
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:17
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:17
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:17
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:17
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:17
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:17
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:19
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Load rppi measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Load correlation matrix for LRG at z0.5 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:21
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 34] ('M_0_LRG', np.float64(12.686126377754592)) ('M_1_LRG', np.float64(13.820763516991653)) ('alpha_LRG', np.float64(1.1322291835380718)) ('f_sigv_LRG', np.float64(0.8311459347255062)) ('log_Mcent_LRG', np.float64(12.699978615983516)) ('sigma_M_LRG', np.float64(0.1987090947946581))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 34] ('M_0_LRG', np.float64(12.886094239202633)) ('M_1_LRG', np.float64(13.845222822571158)) ('alpha_LRG', np.float64(1.05205255885837)) ('f_sigv_LRG', np.float64(0.8212154682744249)) ('log_Mcent_LRG', np.float64(12.74728677313536)) ('sigma_M_LRG', np.float64(0.2450183305060991))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 34] ('M_0_LRG', np.float64(12.731206686685363)) ('M_1_LRG', np.float64(13.829582392904854)) ('alpha_LRG', np.float64(1.1052711393764691)) ('f_sigv_LRG', np.float64(0.8207449702851248)) ('log_Mcent_LRG', np.float64(12.727499126094767)) ('sigma_M_LRG', np.float64(0.2599620978478142))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 34] ('M_0_LRG', np.float64(12.536193394356095)) ('M_1_LRG', np.float64(13.894402347642993)) ('alpha_LRG', np.float64(1.1722221980264957)) ('f_sigv_LRG', np.float64(0.8778154025323548)) ('log_Mcent_LRG', np.float64(12.770361025826892)) ('sigma_M_LRG', np.float64(0.28834012319162206))
[Interation 34] chi2=306.26821689774175
[Interation 34] chi2=382.4815427862758
[Interation 34] chi2=345.2934429534895
[Interation 34] chi2=318.1397956532947
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.668810752284147)) ('M_1_LRG', np.float64(13.797216995723913)) ('alpha_LRG', np.float64(1.1191344863607369)) ('f_sigv_LRG', np.float64(0.8331221005746173)) ('log_Mcent_LRG', np.float64(12.64584101054868)) ('sigma_M_LRG', np.float64(0.13354464220097423))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.693698380654343)) ('M_1_LRG', np.float64(13.866001248427319)) ('alpha_LRG', np.float64(1.112951001512677)) ('f_sigv_LRG', np.float64(0.8476884803500856)) ('log_Mcent_LRG', np.float64(12.73123577677883)) ('sigma_M_LRG', np.float64(0.21968541857269003))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.720048089983147)) ('M_1_LRG', np.float64(13.820441819054212)) ('alpha_LRG', np.float64(1.1012786678986946)) ('f_sigv_LRG', np.float64(0.8572330810330142)) ('log_Mcent_LRG', np.float64(12.701036300888768)) ('sigma_M_LRG', np.float64(0.17930681695852818))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.767501569632115)) ('M_1_LRG', np.float64(13.829498090652654)) ('alpha_LRG', np.float64(1.0747126744861437)) ('f_sigv_LRG', np.float64(0.8400685981339395)) ('log_Mcent_LRG', np.float64(12.743185780947696)) ('sigma_M_LRG', np.float64(0.2735260845320757))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.795170736734734)) ('M_1_LRG', np.float64(13.850535846185023)) ('alpha_LRG', np.float64(1.016020250447877)) ('f_sigv_LRG', np.float64(0.9087384360874111)) ('log_Mcent_LRG', np.float64(12.72464889479465)) ('sigma_M_LRG', np.float64(0.21267066894023745))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.753132846702606)) ('M_1_LRG', np.float64(13.903754201779554)) ('alpha_LRG', np.float64(1.0407545736629864)) ('f_sigv_LRG', np.float64(0.8798929988578255)) ('log_Mcent_LRG', np.float64(12.783780354438868)) ('sigma_M_LRG', np.float64(0.2835383018067956))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.663442039240207)) ('M_1_LRG', np.float64(13.864597024812513)) ('alpha_LRG', np.float64(1.1309718252966214)) ('f_sigv_LRG', np.float64(0.8455695512143265)) ('log_Mcent_LRG', np.float64(12.729435860605989)) ('sigma_M_LRG', np.float64(0.23187569014910447))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.750315467674483)) ('M_1_LRG', np.float64(13.885963440872125)) ('alpha_LRG', np.float64(1.02040381516979)) ('f_sigv_LRG', np.float64(0.8438124552706099)) ('log_Mcent_LRG', np.float64(12.786623295474218)) ('sigma_M_LRG', np.float64(0.3188440517895834))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.474454424219973)) ('M_1_LRG', np.float64(13.929010763249128)) ('alpha_LRG', np.float64(1.2231462008669052)) ('f_sigv_LRG', np.float64(0.8790972100725949)) ('log_Mcent_LRG', np.float64(12.787289927963487)) ('sigma_M_LRG', np.float64(0.31590722773614416))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.59809816063441)) ('M_1_LRG', np.float64(13.907654494845914)) ('alpha_LRG', np.float64(1.1028426390855632)) ('f_sigv_LRG', np.float64(0.8763319058220772)) ('log_Mcent_LRG', np.float64(12.758653989590224)) ('sigma_M_LRG', np.float64(0.25878864999422857))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.720012450077391)) ('M_1_LRG', np.float64(13.888482938498104)) ('alpha_LRG', np.float64(1.0818012776121488)) ('f_sigv_LRG', np.float64(0.8522859238188435)) ('log_Mcent_LRG', np.float64(12.773157990705004)) ('sigma_M_LRG', np.float64(0.27407819468687633))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 33] ('M_0_LRG', np.float64(12.660723703206171)) ('M_1_LRG', np.float64(13.911279823751366)) ('alpha_LRG', np.float64(1.0856911468515822)) ('f_sigv_LRG', np.float64(0.8769587673456998)) ('log_Mcent_LRG', np.float64(12.77884394017405)) ('sigma_M_LRG', np.float64(0.2866049462140041))
[Interation 33] chi2=336.9435270962766
[Interation 33] chi2=457.5589509303691
[Interation 33] chi2=307.22245673064634
[Interation 33] chi2=306.27496933246533
[Interation 33] chi2=385.4720595645933
[Interation 33] chi2=316.4430915170797
[Interation 33] chi2=361.4622050081845
[Interation 33] chi2=339.78821035053943
[Interation 33] chi2=357.2025841057709
[Interation 33] chi2=383.8625831036128
[Interation 33] chi2=292.30282335285807
[Interation 33] chi2=342.77007112200573
[Interation 35] ('M_0_LRG', np.float64(12.713350514721293)) ('M_1_LRG', np.float64(13.861613127195843)) ('alpha_LRG', np.float64(1.0836632214493513)) ('f_sigv_LRG', np.float64(0.8489670939760512)) ('log_Mcent_LRG', np.float64(12.737195024399067)) ('sigma_M_LRG', np.float64(0.24566486356814526))
[Interation 35] ('M_0_LRG', np.float64(12.78541625819728)) ('M_1_LRG', np.float64(13.829576342905884)) ('alpha_LRG', np.float64(1.0407280663510436)) ('f_sigv_LRG', np.float64(0.8583261736310164)) ('log_Mcent_LRG', np.float64(12.715431349570926)) ('sigma_M_LRG', np.float64(0.21139499701097247))
[Interation 35] ('M_0_LRG', np.float64(12.78596271156104)) ('M_1_LRG', np.float64(13.845597191883117)) ('alpha_LRG', np.float64(1.0329139476313238)) ('f_sigv_LRG', np.float64(0.8846694153116048)) ('log_Mcent_LRG', np.float64(12.726377008178455)) ('sigma_M_LRG', np.float64(0.21669861102503646))
[Interation 35] ('M_0_LRG', np.float64(12.726502201655386)) ('M_1_LRG', np.float64(13.858976036157102)) ('alpha_LRG', np.float64(1.070757666857399)) ('f_sigv_LRG', np.float64(0.858537393546583)) ('log_Mcent_LRG', np.float64(12.732759885111452)) ('sigma_M_LRG', np.float64(0.2339263962324269))
[Interation 35] chi2=352.1379004982097
[Interation 35] chi2=255.7062418298247
[Interation 35] chi2=283.915977079587
[Interation 35] chi2=321.57180801943235
[Interation 34] ('M_0_LRG', np.float64(12.815518680424276)) ('M_1_LRG', np.float64(13.852169809547782)) ('alpha_LRG', np.float64(1.0221758104978111)) ('f_sigv_LRG', np.float64(0.8585776945712862)) ('log_Mcent_LRG', np.float64(12.746248929973904)) ('sigma_M_LRG', np.float64(0.25953714967144265))
[Interation 34] ('M_0_LRG', np.float64(12.78575994247089)) ('M_1_LRG', np.float64(13.837761843000571)) ('alpha_LRG', np.float64(1.043216510584665)) ('f_sigv_LRG', np.float64(0.8572400481928917)) ('log_Mcent_LRG', np.float64(12.723351765258403)) ('sigma_M_LRG', np.float64(0.21880470592017093))
[Interation 34] ('M_0_LRG', np.float64(12.7553449225243)) ('M_1_LRG', np.float64(13.847076643261614)) ('alpha_LRG', np.float64(1.0537185316893851)) ('f_sigv_LRG', np.float64(0.8657639657889924)) ('log_Mcent_LRG', np.float64(12.727538368663048)) ('sigma_M_LRG', np.float64(0.2267984667624946))
[Interation 34] ('M_0_LRG', np.float64(12.7772431405244)) ('M_1_LRG', np.float64(13.847548762325657)) ('alpha_LRG', np.float64(1.0469224209999095)) ('f_sigv_LRG', np.float64(0.865620267269163)) ('log_Mcent_LRG', np.float64(12.724520032714825)) ('sigma_M_LRG', np.float64(0.21319036983526796))
[Interation 34] ('M_0_LRG', np.float64(12.725942033492844)) ('M_1_LRG', np.float64(13.865709719053472)) ('alpha_LRG', np.float64(1.0777497680248378)) ('f_sigv_LRG', np.float64(0.8558566140623848)) ('log_Mcent_LRG', np.float64(12.743104287614912)) ('sigma_M_LRG', np.float64(0.2505543559081827))
[Interation 34] ('M_0_LRG', np.float64(12.760965305542832)) ('M_1_LRG', np.float64(13.853380980538814)) ('alpha_LRG', np.float64(1.0531726096464016)) ('f_sigv_LRG', np.float64(0.8689680377696536)) ('log_Mcent_LRG', np.float64(12.736217718492497)) ('sigma_M_LRG', np.float64(0.23630503390905422))
[Interation 34] ('M_0_LRG', np.float64(12.789181384472675)) ('M_1_LRG', np.float64(13.86568959375507)) ('alpha_LRG', np.float64(1.0371363965788984)) ('f_sigv_LRG', np.float64(0.8673084942276872)) ('log_Mcent_LRG', np.float64(12.749530278689358)) ('sigma_M_LRG', np.float64(0.2548539616927755))
[Interation 34] ('M_0_LRG', np.float64(12.776782532495229)) ('M_1_LRG', np.float64(13.849410089081983)) ('alpha_LRG', np.float64(1.0486954632215864)) ('f_sigv_LRG', np.float64(0.8572412887955181)) ('log_Mcent_LRG', np.float64(12.731740139000904)) ('sigma_M_LRG', np.float64(0.2340752812020016))
[Interation 34] ('M_0_LRG', np.float64(12.776393397037861)) ('M_1_LRG', np.float64(13.854650013139405)) ('alpha_LRG', np.float64(1.038182469374749)) ('f_sigv_LRG', np.float64(0.8614063696793728)) ('log_Mcent_LRG', np.float64(12.735983302154976)) ('sigma_M_LRG', np.float64(0.24520974906876236))
[Interation 34] ('M_0_LRG', np.float64(12.769201446356796)) ('M_1_LRG', np.float64(13.847389413195005)) ('alpha_LRG', np.float64(1.0545718472783698)) ('f_sigv_LRG', np.float64(0.8623299991218769)) ('log_Mcent_LRG', np.float64(12.73109550911807)) ('sigma_M_LRG', np.float64(0.23190108866049408))
[Interation 34] ('M_0_LRG', np.float64(12.7802830365317)) ('M_1_LRG', np.float64(13.84966713512714)) ('alpha_LRG', np.float64(1.0450316753900812)) ('f_sigv_LRG', np.float64(0.8619520966472372)) ('log_Mcent_LRG', np.float64(12.73761045810696)) ('sigma_M_LRG', np.float64(0.24542483774181567))
[Interation 34] ('M_0_LRG', np.float64(12.778351112490741)) ('M_1_LRG', np.float64(13.85600309466049)) ('alpha_LRG', np.float64(1.0346980031936428)) ('f_sigv_LRG', np.float64(0.8594348655769131)) ('log_Mcent_LRG', np.float64(12.742338916337356)) ('sigma_M_LRG', np.float64(0.25251487858210137))
[Interation 34] chi2=324.8300866754122
[Interation 34] chi2=323.8113728308766
[Interation 34] chi2=313.85035314949727
[Interation 34] chi2=361.7624324867878
[Interation 34] chi2=306.9277614837808
[Interation 34] chi2=341.2771565383667
[Interation 34] chi2=309.26626290730695
[Interation 34] chi2=353.85454916270174
[Interation 34] chi2=295.61554791447384
[Interation 34] chi2=269.86139228717747
[Interation 34] chi2=290.68519909097864
[Interation 34] chi2=294.2135816015356
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_17.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_17.npy
Set number of threads to 32
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.763119111569813)) ('M_1_LRG', np.float64(13.84878721456853)) ('alpha_LRG', np.float64(1.0474884637880517)) ('f_sigv_LRG', np.float64(0.8579966326991024)) ('log_Mcent_LRG', np.float64(12.728830196359974)) ('sigma_M_LRG', np.float64(0.23135195899058247))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.3424804210662842
Start satellite assignement
Satellite assignement done 0.0742182731628418
LRG mock catalogue done 0.14553070068359375
614140 central galaxies, 85558 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6752207279205322
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_17.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:20
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:20
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:20
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:20
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:20
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load correlation matrix for LRG at z0.5 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Load correlation matrix for LRG at z0.5 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:23
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Load smu measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Initialize Abacus c000 cosmology
Load data vector for LRG
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:24
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:21
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 36] ('M_0_LRG', np.float64(12.57449229728227)) ('M_1_LRG', np.float64(13.247021346870547)) ('alpha_LRG', np.float64(0.9991055995470546)) ('f_sigv_LRG', np.float64(1.0165488865741468)) ('log_Mcent_LRG', np.float64(12.753354313046426)) ('sigma_M_LRG', np.float64(0.6180896196642626))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 36] ('M_0_LRG', np.float64(12.44157403669867)) ('M_1_LRG', np.float64(13.695610600856613)) ('alpha_LRG', np.float64(0.9128456753313707)) ('f_sigv_LRG', np.float64(1.023274552433345)) ('log_Mcent_LRG', np.float64(12.754250330782757)) ('sigma_M_LRG', np.float64(0.41229981995905135))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 36] ('M_0_LRG', np.float64(12.543888443439739)) ('M_1_LRG', np.float64(13.79788716805006)) ('alpha_LRG', np.float64(1.209972239188556)) ('f_sigv_LRG', np.float64(1.1084635287005424)) ('log_Mcent_LRG', np.float64(12.618718187528625)) ('sigma_M_LRG', np.float64(0.2595710256268205))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 36] ('M_0_LRG', np.float64(12.444878700334153)) ('M_1_LRG', np.float64(13.376375975179608)) ('alpha_LRG', np.float64(1.0005456142829967)) ('f_sigv_LRG', np.float64(0.7125279685801689)) ('log_Mcent_LRG', np.float64(12.680251302884214)) ('sigma_M_LRG', np.float64(0.5519443915269925))
[Interation 36] chi2=13117.105501633252
[Interation 36] chi2=2992.8837264811546
[Interation 36] chi2=2849.2880903024625
[Interation 36] chi2=5544.210600939216
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.703457542011483)) ('M_1_LRG', np.float64(14.459856841952059)) ('alpha_LRG', np.float64(0.9037357183156699)) ('f_sigv_LRG', np.float64(0.9210957080868836)) ('log_Mcent_LRG', np.float64(12.8708378704556)) ('sigma_M_LRG', np.float64(-0.014527855376935461))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.649688959124738)) ('M_1_LRG', np.float64(14.362560396153638)) ('alpha_LRG', np.float64(1.0551817281153357)) ('f_sigv_LRG', np.float64(0.8258120175719967)) ('log_Mcent_LRG', np.float64(12.923988430610958)) ('sigma_M_LRG', np.float64(0.20750521956227858))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.607811450614896)) ('M_1_LRG', np.float64(14.329390235891912)) ('alpha_LRG', np.float64(0.9934631181455755)) ('f_sigv_LRG', np.float64(0.74919984789579)) ('log_Mcent_LRG', np.float64(12.920091707860935)) ('sigma_M_LRG', np.float64(0.35707942400978426))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.48252087649006)) ('M_1_LRG', np.float64(14.32924552918529)) ('alpha_LRG', np.float64(0.9007358030179233)) ('f_sigv_LRG', np.float64(1.0588785719105593)) ('log_Mcent_LRG', np.float64(12.925987325712132)) ('sigma_M_LRG', np.float64(0.23896093827293663))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.846903273109476)) ('M_1_LRG', np.float64(14.127197196676223)) ('alpha_LRG', np.float64(0.8018720559664302)) ('f_sigv_LRG', np.float64(1.147952084505707)) ('log_Mcent_LRG', np.float64(12.887158993205734)) ('sigma_M_LRG', np.float64(0.463283615151515))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.70270634942748)) ('M_1_LRG', np.float64(14.4059803307645)) ('alpha_LRG', np.float64(0.8971384548847611)) ('f_sigv_LRG', np.float64(0.7923162988739724)) ('log_Mcent_LRG', np.float64(13.050754459056764)) ('sigma_M_LRG', np.float64(0.46605235993246596))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.369660266773675)) ('M_1_LRG', np.float64(13.992466312108984)) ('alpha_LRG', np.float64(0.9699390644320415)) ('f_sigv_LRG', np.float64(1.044854193815341)) ('log_Mcent_LRG', np.float64(12.773328839564249)) ('sigma_M_LRG', np.float64(0.47188899356694924))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.59842479320528)) ('M_1_LRG', np.float64(14.023198943006648)) ('alpha_LRG', np.float64(1.1082087382475805)) ('f_sigv_LRG', np.float64(0.8752618759381272)) ('log_Mcent_LRG', np.float64(12.787112078358518)) ('sigma_M_LRG', np.float64(0.41264715778112804))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.861342738141357)) ('M_1_LRG', np.float64(14.347789696297083)) ('alpha_LRG', np.float64(1.11024815465577)) ('f_sigv_LRG', np.float64(0.9420274844882655)) ('log_Mcent_LRG', np.float64(12.985386386208482)) ('sigma_M_LRG', np.float64(0.41110197806265636))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.287555038216391)) ('M_1_LRG', np.float64(14.230829541810229)) ('alpha_LRG', np.float64(1.0691476078150561)) ('f_sigv_LRG', np.float64(0.7435126733705976)) ('log_Mcent_LRG', np.float64(12.7991560408297)) ('sigma_M_LRG', np.float64(0.3492128807068126))
[Interation 35] chi2=3847.397581147863
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.598828494980419)) ('M_1_LRG', np.float64(13.783369491812804)) ('alpha_LRG', np.float64(0.9702485128006604)) ('f_sigv_LRG', np.float64(1.2620594462964756)) ('log_Mcent_LRG', np.float64(12.775655810479691)) ('sigma_M_LRG', np.float64(0.40676016097018))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 35] ('M_0_LRG', np.float64(12.980180179905268)) ('M_1_LRG', np.float64(14.269417766795986)) ('alpha_LRG', np.float64(0.5169905613618049)) ('f_sigv_LRG', np.float64(1.0006048018852358)) ('log_Mcent_LRG', np.float64(12.714209398583694)) ('sigma_M_LRG', np.float64(0.07565240323013545))
[Interation 35] chi2=1864.2650548687789
[Interation 35] chi2=2218.9308421650658
[Interation 35] chi2=40704.6740776416
[Interation 35] chi2=1866.7546950473745
[Interation 35] chi2=1418.6763876151706
[Interation 35] chi2=3515.67067060515
[Interation 35] chi2=2697.8800177019475
[Interation 35] chi2=1844.5295642381946
[Interation 35] chi2=2168.7754021173823
[Interation 35] chi2=2475.7121182715778
[Interation 35] chi2=854.6461981783692
[Interation 37] ('M_0_LRG', np.float64(12.684424487386561)) ('M_1_LRG', np.float64(13.83721624581131)) ('alpha_LRG', np.float64(1.1068746872021795)) ('f_sigv_LRG', np.float64(0.8622977671348817)) ('log_Mcent_LRG', np.float64(12.709250509164768)) ('sigma_M_LRG', np.float64(0.19797180872361225))
[Interation 37] ('M_0_LRG', np.float64(12.80200029924772)) ('M_1_LRG', np.float64(13.83717600255687)) ('alpha_LRG', np.float64(0.9962623810062338)) ('f_sigv_LRG', np.float64(0.90615060710009)) ('log_Mcent_LRG', np.float64(12.71792350838638)) ('sigma_M_LRG', np.float64(0.19623762199778216))
[Interation 37] ('M_0_LRG', np.float64(12.880581907373351)) ('M_1_LRG', np.float64(13.852033623129804)) ('alpha_LRG', np.float64(0.9809290240370737)) ('f_sigv_LRG', np.float64(0.8648558453672202)) ('log_Mcent_LRG', np.float64(12.741709576829587)) ('sigma_M_LRG', np.float64(0.2425897925743657))
[Interation 37] ('M_0_LRG', np.float64(12.657315823845112)) ('M_1_LRG', np.float64(13.88971304576646)) ('alpha_LRG', np.float64(1.0656158288095006)) ('f_sigv_LRG', np.float64(0.8817408492872165)) ('log_Mcent_LRG', np.float64(12.746768302901309)) ('sigma_M_LRG', np.float64(0.25626300770868493))
[Interation 37] chi2=315.6714321507141
[Interation 37] chi2=313.9752536867962
[Interation 37] chi2=377.29208940764636
[Interation 37] chi2=280.7560186761745
[Interation 36] ('M_0_LRG', np.float64(12.796703952872392)) ('M_1_LRG', np.float64(13.829328120511915)) ('alpha_LRG', np.float64(1.0097347444960294)) ('f_sigv_LRG', np.float64(0.8794678459366694)) ('log_Mcent_LRG', np.float64(12.71251221708737)) ('sigma_M_LRG', np.float64(0.19871264549983142))
[Interation 36] ('M_0_LRG', np.float64(12.775790820108844)) ('M_1_LRG', np.float64(13.859395331318321)) ('alpha_LRG', np.float64(1.0339809129853301)) ('f_sigv_LRG', np.float64(0.8645191987958627)) ('log_Mcent_LRG', np.float64(12.734374586646606)) ('sigma_M_LRG', np.float64(0.22331166241268452))
[Interation 36] ('M_0_LRG', np.float64(12.783916355025799)) ('M_1_LRG', np.float64(13.853674356845222)) ('alpha_LRG', np.float64(1.0200697198854167)) ('f_sigv_LRG', np.float64(0.8640470346402537)) ('log_Mcent_LRG', np.float64(12.746928178613004)) ('sigma_M_LRG', np.float64(0.27613229187189325))
[Interation 36] ('M_0_LRG', np.float64(12.838188557572826)) ('M_1_LRG', np.float64(13.823169489396346)) ('alpha_LRG', np.float64(1.0317301479259846)) ('f_sigv_LRG', np.float64(0.8463929481266558)) ('log_Mcent_LRG', np.float64(12.738642657514028)) ('sigma_M_LRG', np.float64(0.26166896777848586))
[Interation 36] ('M_0_LRG', np.float64(12.774190240195189)) ('M_1_LRG', np.float64(13.816881781225788)) ('alpha_LRG', np.float64(1.0533148863387345)) ('f_sigv_LRG', np.float64(0.8803281000448949)) ('log_Mcent_LRG', np.float64(12.697035606253573)) ('sigma_M_LRG', np.float64(0.18129392417443574))
[Interation 36] ('M_0_LRG', np.float64(12.774087444189881)) ('M_1_LRG', np.float64(13.851987609431202)) ('alpha_LRG', np.float64(1.0543172888605095)) ('f_sigv_LRG', np.float64(0.8433724888031968)) ('log_Mcent_LRG', np.float64(12.750712827081905)) ('sigma_M_LRG', np.float64(0.27291849052233463))
[Interation 36] ('M_0_LRG', np.float64(12.737839173671338)) ('M_1_LRG', np.float64(13.874443858905984)) ('alpha_LRG', np.float64(1.0828262232476407)) ('f_sigv_LRG', np.float64(0.8568747655814287)) ('log_Mcent_LRG', np.float64(12.750937955625131)) ('sigma_M_LRG', np.float64(0.25195046652437786))
[Interation 36] ('M_0_LRG', np.float64(12.786663800073255)) ('M_1_LRG', np.float64(13.84285554499951)) ('alpha_LRG', np.float64(1.0329920597930784)) ('f_sigv_LRG', np.float64(0.8594362145222196)) ('log_Mcent_LRG', np.float64(12.725329523754006)) ('sigma_M_LRG', np.float64(0.224011440723015))
[Interation 36] ('M_0_LRG', np.float64(12.796529851927575)) ('M_1_LRG', np.float64(13.829666811301601)) ('alpha_LRG', np.float64(1.0303454772578693)) ('f_sigv_LRG', np.float64(0.860827306895186)) ('log_Mcent_LRG', np.float64(12.728078637458646)) ('sigma_M_LRG', np.float64(0.23465947301339174))
[Interation 36] ('M_0_LRG', np.float64(12.77653276951369)) ('M_1_LRG', np.float64(13.867103609677095)) ('alpha_LRG', np.float64(1.0373789262319002)) ('f_sigv_LRG', np.float64(0.8707022241748086)) ('log_Mcent_LRG', np.float64(12.74854182901388)) ('sigma_M_LRG', np.float64(0.24543948348201805))
[Interation 36] ('M_0_LRG', np.float64(12.762760605437933)) ('M_1_LRG', np.float64(13.865553340658364)) ('alpha_LRG', np.float64(1.0686322180982546)) ('f_sigv_LRG', np.float64(0.8481371604376423)) ('log_Mcent_LRG', np.float64(12.76307860300353)) ('sigma_M_LRG', np.float64(0.28999560736723323))
[Interation 36] ('M_0_LRG', np.float64(12.812014675416753)) ('M_1_LRG', np.float64(13.858408691677742)) ('alpha_LRG', np.float64(1.0166659385464258)) ('f_sigv_LRG', np.float64(0.8790233812396439)) ('log_Mcent_LRG', np.float64(12.736629397849798)) ('sigma_M_LRG', np.float64(0.21389564115857207))
[Interation 36] chi2=328.5703009148921
[Interation 36] chi2=343.5578798888245
[Interation 36] chi2=303.7985234603325
[Interation 36] chi2=306.0648293483599
[Interation 36] chi2=377.4042774240616
[Interation 36] chi2=379.3131772591676
[Interation 36] chi2=357.83685979797855
[Interation 36] chi2=325.80664970584235
[Interation 36] chi2=298.7726595412265
[Interation 36] chi2=355.7687219183337
[Interation 36] chi2=331.27748869671376
[Interation 36] chi2=296.58797227363436
[Interation 38] ('M_0_LRG', np.float64(12.794312128659898)) ('M_1_LRG', np.float64(13.83871352461729)) ('alpha_LRG', np.float64(1.0460749428303457)) ('f_sigv_LRG', np.float64(0.8566679780214498)) ('log_Mcent_LRG', np.float64(12.719046759547595)) ('sigma_M_LRG', np.float64(0.1912187811805272))
[Interation 38] ('M_0_LRG', np.float64(12.794296815943126)) ('M_1_LRG', np.float64(13.826045610498863)) ('alpha_LRG', np.float64(1.0383997546594277)) ('f_sigv_LRG', np.float64(0.8528361579485211)) ('log_Mcent_LRG', np.float64(12.709634940353988)) ('sigma_M_LRG', np.float64(0.18858195057769772))
[Interation 38] ('M_0_LRG', np.float64(12.787749706643941)) ('M_1_LRG', np.float64(13.839894802810672)) ('alpha_LRG', np.float64(1.0495348710425962)) ('f_sigv_LRG', np.float64(0.8491388873960489)) ('log_Mcent_LRG', np.float64(12.725313270449504)) ('sigma_M_LRG', np.float64(0.21893140255067006))
[Interation 38] ('M_0_LRG', np.float64(12.80696355223873)) ('M_1_LRG', np.float64(13.822086265448732)) ('alpha_LRG', np.float64(1.0259726560641038)) ('f_sigv_LRG', np.float64(0.857868518834838)) ('log_Mcent_LRG', np.float64(12.703055957594312)) ('sigma_M_LRG', np.float64(0.16977476100889166))
[Interation 38] chi2=329.0932473678755
[Interation 38] chi2=327.38228387234994
[Interation 38] chi2=298.2560347988559
[Interation 38] chi2=322.1162352381305
[Interation 37] ('M_0_LRG', np.float64(12.7957828542352)) ('M_1_LRG', np.float64(13.829171036657552)) ('alpha_LRG', np.float64(1.05153624778143)) ('f_sigv_LRG', np.float64(0.8553835235457427)) ('log_Mcent_LRG', np.float64(12.718652267023852)) ('sigma_M_LRG', np.float64(0.2059566455123376))
[Interation 37] ('M_0_LRG', np.float64(12.78271738043733)) ('M_1_LRG', np.float64(13.817607281504584)) ('alpha_LRG', np.float64(1.0599329410144058)) ('f_sigv_LRG', np.float64(0.8559437237802889)) ('log_Mcent_LRG', np.float64(12.695879556429947)) ('sigma_M_LRG', np.float64(0.15908465530868826))
[Interation 37] ('M_0_LRG', np.float64(12.79410554186256)) ('M_1_LRG', np.float64(13.832926276238414)) ('alpha_LRG', np.float64(1.050219557511343)) ('f_sigv_LRG', np.float64(0.8565756515500224)) ('log_Mcent_LRG', np.float64(12.71762759045599)) ('sigma_M_LRG', np.float64(0.19589405898336448))
[Interation 37] ('M_0_LRG', np.float64(12.754678121078783)) ('M_1_LRG', np.float64(13.850617934711702)) ('alpha_LRG', np.float64(1.0550591072860278)) ('f_sigv_LRG', np.float64(0.8809017543233386)) ('log_Mcent_LRG', np.float64(12.718066832905098)) ('sigma_M_LRG', np.float64(0.18519287654010613))
[Interation 37] ('M_0_LRG', np.float64(12.765471048265422)) ('M_1_LRG', np.float64(13.843303440064295)) ('alpha_LRG', np.float64(1.0397511069191259)) ('f_sigv_LRG', np.float64(0.8757801107989966)) ('log_Mcent_LRG', np.float64(12.71667957191698)) ('sigma_M_LRG', np.float64(0.19423278473426636))
[Interation 37] ('M_0_LRG', np.float64(12.787793087486271)) ('M_1_LRG', np.float64(13.846059248987059)) ('alpha_LRG', np.float64(1.0367816402467533)) ('f_sigv_LRG', np.float64(0.8664626361523708)) ('log_Mcent_LRG', np.float64(12.725039389246893)) ('sigma_M_LRG', np.float64(0.21101036506784498))
[Interation 37] ('M_0_LRG', np.float64(12.798366082787915)) ('M_1_LRG', np.float64(13.839962787551876)) ('alpha_LRG', np.float64(1.0300800599384683)) ('f_sigv_LRG', np.float64(0.8667906990357825)) ('log_Mcent_LRG', np.float64(12.712124763523065)) ('sigma_M_LRG', np.float64(0.17867499397678055))
[Interation 37] ('M_0_LRG', np.float64(12.791846110207473)) ('M_1_LRG', np.float64(13.839963927903465)) ('alpha_LRG', np.float64(1.048979653406353)) ('f_sigv_LRG', np.float64(0.8548562956387671)) ('log_Mcent_LRG', np.float64(12.728171471894461)) ('sigma_M_LRG', np.float64(0.2216459844815752))
[Interation 37] ('M_0_LRG', np.float64(12.773274721343512)) ('M_1_LRG', np.float64(13.850656510518629)) ('alpha_LRG', np.float64(1.026116423225155)) ('f_sigv_LRG', np.float64(0.8740675188925255)) ('log_Mcent_LRG', np.float64(12.72269896168703)) ('sigma_M_LRG', np.float64(0.2089077218464528))
[Interation 37] ('M_0_LRG', np.float64(12.805175944309173)) ('M_1_LRG', np.float64(13.83197797194785)) ('alpha_LRG', np.float64(1.045996691721358)) ('f_sigv_LRG', np.float64(0.8549228924770172)) ('log_Mcent_LRG', np.float64(12.719871075208582)) ('sigma_M_LRG', np.float64(0.20181522078020953))
[Interation 37] ('M_0_LRG', np.float64(12.79573603029894)) ('M_1_LRG', np.float64(13.834661489427525)) ('alpha_LRG', np.float64(1.035616543073492)) ('f_sigv_LRG', np.float64(0.8625003909210094)) ('log_Mcent_LRG', np.float64(12.719405908198473)) ('sigma_M_LRG', np.float64(0.20752977291585317))
[Interation 37] ('M_0_LRG', np.float64(12.772742899823221)) ('M_1_LRG', np.float64(13.846821395474338)) ('alpha_LRG', np.float64(1.059628678990742)) ('f_sigv_LRG', np.float64(0.855512898118843)) ('log_Mcent_LRG', np.float64(12.733673693166889)) ('sigma_M_LRG', np.float64(0.23599532225119346))
[Interation 37] chi2=266.3228552044273
[Interation 37] chi2=281.372168307541
[Interation 37] chi2=323.0505523057891
[Interation 37] chi2=321.72711988590174
[Interation 37] chi2=333.2034861215221
[Interation 37] chi2=301.74708233502474
[Interation 37] chi2=274.08004602426576
[Interation 37] chi2=339.2318256217673
[Interation 37] chi2=336.761882658802
[Interation 37] chi2=365.5247590701181
[Interation 37] chi2=338.87255758830776
[Interation 37] chi2=350.1995157838026
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_18.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_18.npy
Set number of threads to 32
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.803360643144723)) ('M_1_LRG', np.float64(13.82973926741849)) ('alpha_LRG', np.float64(1.0422952323857504)) ('f_sigv_LRG', np.float64(0.8526333546261847)) ('log_Mcent_LRG', np.float64(12.716555981281031)) ('sigma_M_LRG', np.float64(0.2009950460272949))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.31319355964660645
Start satellite assignement
Satellite assignement done 0.0742495059967041
LRG mock catalogue done 0.14891672134399414
614754 central galaxies, 85166 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6469454765319824
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_18.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Load rppi measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Load rppi measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:27
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:28
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:28
Initialize Abacus c000 cosmology
Load data vector for LRG
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:23
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 39] ('M_0_LRG', np.float64(12.974909596059343)) ('M_1_LRG', np.float64(13.941426461769256)) ('alpha_LRG', np.float64(0.9313021277115004)) ('f_sigv_LRG', np.float64(0.9375816252619162)) ('log_Mcent_LRG', np.float64(12.834828840602851)) ('sigma_M_LRG', np.float64(0.3464464898208937))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 39] ('M_0_LRG', np.float64(12.765981523313929)) ('M_1_LRG', np.float64(13.954150844168367)) ('alpha_LRG', np.float64(1.004500726874099)) ('f_sigv_LRG', np.float64(0.9469344532123435)) ('log_Mcent_LRG', np.float64(12.777352001180894)) ('sigma_M_LRG', np.float64(0.2627093307330165))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 39] ('M_0_LRG', np.float64(12.881781972401008)) ('M_1_LRG', np.float64(13.941320818765695)) ('alpha_LRG', np.float64(0.9007240290196458)) ('f_sigv_LRG', np.float64(0.9059408898009377)) ('log_Mcent_LRG', np.float64(12.833981776253617)) ('sigma_M_LRG', np.float64(0.366776777603636))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 39] ('M_0_LRG', np.float64(12.83599746100948)) ('M_1_LRG', np.float64(13.962137436379834)) ('alpha_LRG', np.float64(1.0476765343671068)) ('f_sigv_LRG', np.float64(0.8317848708969786)) ('log_Mcent_LRG', np.float64(12.85165652507573)) ('sigma_M_LRG', np.float64(0.3865193821315983))
[Interation 39] chi2=519.3245941462593
[Interation 39] chi2=390.57363452052186
[Interation 39] chi2=393.84478704524923
[Interation 39] chi2=392.7890267766602
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.73736174475539)) ('M_1_LRG', np.float64(13.932125215854278)) ('alpha_LRG', np.float64(1.1063462982202725)) ('f_sigv_LRG', np.float64(0.8610463397141915)) ('log_Mcent_LRG', np.float64(12.831580944680661)) ('sigma_M_LRG', np.float64(0.37309376247987913))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.5979266628516)) ('M_1_LRG', np.float64(13.950303190828276)) ('alpha_LRG', np.float64(1.1622620144105258)) ('f_sigv_LRG', np.float64(0.8832214209568842)) ('log_Mcent_LRG', np.float64(12.818834689934198)) ('sigma_M_LRG', np.float64(0.3418920379355368))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.741089461501849)) ('M_1_LRG', np.float64(13.846093908221704)) ('alpha_LRG', np.float64(1.0957113962504266)) ('f_sigv_LRG', np.float64(0.8403845321553496)) ('log_Mcent_LRG', np.float64(12.72419906998456)) ('sigma_M_LRG', np.float64(0.23807656527339122))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.537973069898232)) ('M_1_LRG', np.float64(13.921598933921361)) ('alpha_LRG', np.float64(1.1715798798959027)) ('f_sigv_LRG', np.float64(0.897656918278112)) ('log_Mcent_LRG', np.float64(12.788722611769403)) ('sigma_M_LRG', np.float64(0.3043782088744913))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.668088767755567)) ('M_1_LRG', np.float64(13.933620578952562)) ('alpha_LRG', np.float64(1.0886252772405856)) ('f_sigv_LRG', np.float64(0.8835235199397322)) ('log_Mcent_LRG', np.float64(12.82537168776024)) ('sigma_M_LRG', np.float64(0.3676236638532051))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.647897257941944)) ('M_1_LRG', np.float64(13.905339669635879)) ('alpha_LRG', np.float64(1.140978240267662)) ('f_sigv_LRG', np.float64(0.8417013032938971)) ('log_Mcent_LRG', np.float64(12.804224533429753)) ('sigma_M_LRG', np.float64(0.3546441693627501))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.660379539358475)) ('M_1_LRG', np.float64(13.902527562870521)) ('alpha_LRG', np.float64(1.1188218801526806)) ('f_sigv_LRG', np.float64(0.8481226079504345)) ('log_Mcent_LRG', np.float64(12.785154429020231)) ('sigma_M_LRG', np.float64(0.3208188151111745))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.818984211925292)) ('M_1_LRG', np.float64(13.84953392500864)) ('alpha_LRG', np.float64(1.0288591481299476)) ('f_sigv_LRG', np.float64(0.8934793923473001)) ('log_Mcent_LRG', np.float64(12.728080761482417)) ('sigma_M_LRG', np.float64(0.24181383322873856))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.697428669764381)) ('M_1_LRG', np.float64(13.92142759125282)) ('alpha_LRG', np.float64(1.083553468299644)) ('f_sigv_LRG', np.float64(0.8639886664031697)) ('log_Mcent_LRG', np.float64(12.824702198599816)) ('sigma_M_LRG', np.float64(0.37283953109226925))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.810342582446014)) ('M_1_LRG', np.float64(13.892398219630527)) ('alpha_LRG', np.float64(1.0248493365094284)) ('f_sigv_LRG', np.float64(0.859676097299454)) ('log_Mcent_LRG', np.float64(12.795872756271066)) ('sigma_M_LRG', np.float64(0.33910075419035446))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.575383850241522)) ('M_1_LRG', np.float64(13.896696678439236)) ('alpha_LRG', np.float64(1.1309013783866724)) ('f_sigv_LRG', np.float64(0.8820110276459382)) ('log_Mcent_LRG', np.float64(12.736684980847539)) ('sigma_M_LRG', np.float64(0.23925469295530216))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 38] ('M_0_LRG', np.float64(12.647654329387112)) ('M_1_LRG', np.float64(13.939402254355338)) ('alpha_LRG', np.float64(1.0846054759022794)) ('f_sigv_LRG', np.float64(0.8981789206728986)) ('log_Mcent_LRG', np.float64(12.82306705646689)) ('sigma_M_LRG', np.float64(0.35179654117196185))
[Interation 38] chi2=319.50913180434554
[Interation 38] chi2=389.3482131501043
[Interation 38] chi2=293.2813728996602
[Interation 38] chi2=332.5345727762751
[Interation 38] chi2=373.6655156131786
[Interation 38] chi2=311.9646053589997
[Interation 38] chi2=329.17067458918143
[Interation 38] chi2=343.5787133097447
[Interation 38] chi2=315.8614944246521
[Interation 38] chi2=296.1440976159265
[Interation 38] chi2=300.31703611400457
[Interation 38] chi2=358.43550689014006
[Interation 40] ('M_0_LRG', np.float64(12.713536051605677)) ('M_1_LRG', np.float64(13.867217415966518)) ('alpha_LRG', np.float64(1.0843119692508858)) ('f_sigv_LRG', np.float64(0.8905163181066064)) ('log_Mcent_LRG', np.float64(12.737485541680778)) ('sigma_M_LRG', np.float64(0.23563361218543016))
[Interation 40] ('M_0_LRG', np.float64(12.700337328615507)) ('M_1_LRG', np.float64(13.885055812643145)) ('alpha_LRG', np.float64(1.0953203206479811)) ('f_sigv_LRG', np.float64(0.8692972036070468)) ('log_Mcent_LRG', np.float64(12.776214000691247)) ('sigma_M_LRG', np.float64(0.30712996727140063))
[Interation 40] ('M_0_LRG', np.float64(12.721218221993237)) ('M_1_LRG', np.float64(13.867822262559095)) ('alpha_LRG', np.float64(1.0784347232506835)) ('f_sigv_LRG', np.float64(0.8815566645041236)) ('log_Mcent_LRG', np.float64(12.7449054258073)) ('sigma_M_LRG', np.float64(0.25141936031415874))
[Interation 40] ('M_0_LRG', np.float64(12.688764434368528)) ('M_1_LRG', np.float64(13.878457827276009)) ('alpha_LRG', np.float64(1.1062275346440975)) ('f_sigv_LRG', np.float64(0.861180597150923)) ('log_Mcent_LRG', np.float64(12.76406190719494)) ('sigma_M_LRG', np.float64(0.289400505836644))
[Interation 40] chi2=303.37799822384113
[Interation 40] chi2=303.5920529088136
[Interation 40] chi2=320.1351880424249
[Interation 40] chi2=333.04714966579115
[Interation 39] ('M_0_LRG', np.float64(12.723136657430704)) ('M_1_LRG', np.float64(13.86827820735453)) ('alpha_LRG', np.float64(1.0754411879836614)) ('f_sigv_LRG', np.float64(0.8789799410327568)) ('log_Mcent_LRG', np.float64(12.747247771586297)) ('sigma_M_LRG', np.float64(0.2547395115971567))
[Interation 39] ('M_0_LRG', np.float64(12.739998356364698)) ('M_1_LRG', np.float64(13.875585892637153)) ('alpha_LRG', np.float64(1.060446582569672)) ('f_sigv_LRG', np.float64(0.8619888471765523)) ('log_Mcent_LRG', np.float64(12.747349106409326)) ('sigma_M_LRG', np.float64(0.2544361528529532))
[Interation 39] ('M_0_LRG', np.float64(12.71790319318027)) ('M_1_LRG', np.float64(13.873700428342271)) ('alpha_LRG', np.float64(1.083717308807618)) ('f_sigv_LRG', np.float64(0.8606297114779715)) ('log_Mcent_LRG', np.float64(12.765009304002385)) ('sigma_M_LRG', np.float64(0.2951758380050191))
[Interation 39] ('M_0_LRG', np.float64(12.714409597168697)) ('M_1_LRG', np.float64(13.860193968869972)) ('alpha_LRG', np.float64(1.070749155153667)) ('f_sigv_LRG', np.float64(0.8621419332993228)) ('log_Mcent_LRG', np.float64(12.731419640993604)) ('sigma_M_LRG', np.float64(0.23353288951499906))
[Interation 39] ('M_0_LRG', np.float64(12.7106562672203)) ('M_1_LRG', np.float64(13.882773268322556)) ('alpha_LRG', np.float64(1.0783258501741162)) ('f_sigv_LRG', np.float64(0.8718413631485963)) ('log_Mcent_LRG', np.float64(12.754196071834738)) ('sigma_M_LRG', np.float64(0.26477778005798286))
[Interation 39] ('M_0_LRG', np.float64(12.760448499697905)) ('M_1_LRG', np.float64(13.886202696947604)) ('alpha_LRG', np.float64(1.0525490237453552)) ('f_sigv_LRG', np.float64(0.8759098765305943)) ('log_Mcent_LRG', np.float64(12.771628254826043)) ('sigma_M_LRG', np.float64(0.2897418216810079))
[Interation 39] ('M_0_LRG', np.float64(12.78122156070868)) ('M_1_LRG', np.float64(13.862915406844827)) ('alpha_LRG', np.float64(1.0377888182724708)) ('f_sigv_LRG', np.float64(0.8770234225875122)) ('log_Mcent_LRG', np.float64(12.7461162466897)) ('sigma_M_LRG', np.float64(0.25413315269329306))
[Interation 39] ('M_0_LRG', np.float64(12.72901889458196)) ('M_1_LRG', np.float64(13.874025740311028)) ('alpha_LRG', np.float64(1.0800668876665664)) ('f_sigv_LRG', np.float64(0.8674288725933851)) ('log_Mcent_LRG', np.float64(12.746397438483797)) ('sigma_M_LRG', np.float64(0.2577615504412073))
[Interation 39] ('M_0_LRG', np.float64(12.71676031646248)) ('M_1_LRG', np.float64(13.878192264582957)) ('alpha_LRG', np.float64(1.080869438555373)) ('f_sigv_LRG', np.float64(0.8564391898797836)) ('log_Mcent_LRG', np.float64(12.759690887707553)) ('sigma_M_LRG', np.float64(0.28476056550855433))
[Interation 39] ('M_0_LRG', np.float64(12.712332763588213)) ('M_1_LRG', np.float64(13.895647789457312)) ('alpha_LRG', np.float64(1.0799006411558223)) ('f_sigv_LRG', np.float64(0.8599184105857934)) ('log_Mcent_LRG', np.float64(12.78310790014871)) ('sigma_M_LRG', np.float64(0.3123304886044397))
[Interation 39] ('M_0_LRG', np.float64(12.739256840220337)) ('M_1_LRG', np.float64(13.880405843665104)) ('alpha_LRG', np.float64(1.0732154313309439)) ('f_sigv_LRG', np.float64(0.8540889737589703)) ('log_Mcent_LRG', np.float64(12.764285825613937)) ('sigma_M_LRG', np.float64(0.2876439827301037))
[Interation 39] ('M_0_LRG', np.float64(12.731755813358895)) ('M_1_LRG', np.float64(13.870682776305365)) ('alpha_LRG', np.float64(1.0689769319787077)) ('f_sigv_LRG', np.float64(0.8706002082777261)) ('log_Mcent_LRG', np.float64(12.758690783301676)) ('sigma_M_LRG', np.float64(0.28418528773294993))
[Interation 39] chi2=295.1585387316149
[Interation 39] chi2=317.6881215743659
[Interation 39] chi2=414.65889400049053
[Interation 39] chi2=334.0051152130023
[Interation 39] chi2=318.82336342615685
[Interation 39] chi2=321.41415465815606
[Interation 39] chi2=308.6728238652868
[Interation 39] chi2=304.56343113645244
[Interation 39] chi2=290.6531345422882
[Interation 39] chi2=330.89713380885587
[Interation 39] chi2=321.7781462626482
[Interation 39] chi2=340.39044507489217
Load data vector for LRG
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_19.npy
Set number of threads to 32
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_19.npy
Set number of threads to 32
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.72789597547002)) ('M_1_LRG', np.float64(13.869955921322273)) ('alpha_LRG', np.float64(1.078418998838502)) ('f_sigv_LRG', np.float64(0.8688324033350855)) ('log_Mcent_LRG', np.float64(12.748223743708005)) ('sigma_M_LRG', np.float64(0.25987150703993167))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.32930994033813477
Start satellite assignement
Satellite assignement done 0.07336807250976562
LRG mock catalogue done 0.14473628997802734
615071 central galaxies, 84941 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6542994976043701
[START HOD FITTING]: /pscratch/sd/s/shengyu/galaxies/hod/fit/results/minimiser/LRG/fitmini_LRG_z0.4-0.6_dv-obs_19.npy
Set number of threads to 32
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:24
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:25
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:25
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:26
Load rppi measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:26
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:26
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:26
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:27
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Load rppi measurements at z0.4-0.6 for LRG...
Initialize Abacus c000 cosmology
Load data vector for LRG
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:27
Load smu measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:27
Initialize Abacus c000 cosmology
Load data vector for LRG
Load smu measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load rppi measurements at z0.4-0.6 for LRG...
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load Compaso cat from /global/cfs/cdirs/desi/cosmosim/Abacus/AbacusSummit_highbase_c000_ph100/halos/z0.500 ...
Done took 00:00:22
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Compute columns...
Done took  00:00:00
AbacusSummit_highbase_c000_ph100 at 0.5 loaded, took 00:00:22
Load correlation matrix for LRG at z0.5 ...
Initialize Abacus c000 cosmology
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load smu measurements at z0.4-0.6 for LRG...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Load correlation matrix for LRG at z0.5 ...
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 41] ('M_0_LRG', np.float64(12.47134820189788)) ('M_1_LRG', np.float64(13.659527850641208)) ('alpha_LRG', np.float64(0.9491403189981253)) ('f_sigv_LRG', np.float64(0.8966261754916043)) ('log_Mcent_LRG', np.float64(12.721471557281252)) ('sigma_M_LRG', np.float64(0.5149929412061516))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 41] ('M_0_LRG', np.float64(12.53565292053752)) ('M_1_LRG', np.float64(13.520901662762753)) ('alpha_LRG', np.float64(1.0133395672016803)) ('f_sigv_LRG', np.float64(1.025890714943282)) ('log_Mcent_LRG', np.float64(12.78554086051654)) ('sigma_M_LRG', np.float64(0.49381570036980316))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 41] ('M_0_LRG', np.float64(12.389813268282726)) ('M_1_LRG', np.float64(13.575846909882204)) ('alpha_LRG', np.float64(1.0181312486059995)) ('f_sigv_LRG', np.float64(1.0121931386992216)) ('log_Mcent_LRG', np.float64(12.878850361982343)) ('sigma_M_LRG', np.float64(0.49875835942805946))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 41] ('M_0_LRG', np.float64(12.454584635290816)) ('M_1_LRG', np.float64(13.515082267019407)) ('alpha_LRG', np.float64(1.012561955259562)) ('f_sigv_LRG', np.float64(0.9563582615559597)) ('log_Mcent_LRG', np.float64(12.750031081777506)) ('sigma_M_LRG', np.float64(0.3889651110704915))
[Interation 41] chi2=2800.248346282234
[Interation 41] chi2=6313.946587808813
[Interation 41] chi2=11325.962120006288
[Interation 41] chi2=8853.335047118057
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.54999292417023)) ('M_1_LRG', np.float64(14.049065305146684)) ('alpha_LRG', np.float64(1.05664626748723)) ('f_sigv_LRG', np.float64(1.0825662219446242)) ('log_Mcent_LRG', np.float64(12.883742433913033)) ('sigma_M_LRG', np.float64(0.39209694564338315))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.585776810985141)) ('M_1_LRG', np.float64(13.930988047799687)) ('alpha_LRG', np.float64(1.0364421276362632)) ('f_sigv_LRG', np.float64(0.8352385966418194)) ('log_Mcent_LRG', np.float64(12.708982038598698)) ('sigma_M_LRG', np.float64(0.21117746776759572))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.427990354294604)) ('M_1_LRG', np.float64(14.087412699696833)) ('alpha_LRG', np.float64(1.1929649175028232)) ('f_sigv_LRG', np.float64(1.0667860769336057)) ('log_Mcent_LRG', np.float64(12.863660112305311)) ('sigma_M_LRG', np.float64(0.24667128946422834))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.462407454633789)) ('M_1_LRG', np.float64(14.065402397996985)) ('alpha_LRG', np.float64(1.126947608845107)) ('f_sigv_LRG', np.float64(0.9927056331224742)) ('log_Mcent_LRG', np.float64(12.861127803599603)) ('sigma_M_LRG', np.float64(0.30943066241031003))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.463505740590891)) ('M_1_LRG', np.float64(13.999764351917692)) ('alpha_LRG', np.float64(1.0131179184896189)) ('f_sigv_LRG', np.float64(1.0426497155293037)) ('log_Mcent_LRG', np.float64(12.804560008221253)) ('sigma_M_LRG', np.float64(0.32134550481610613))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.683115105764529)) ('M_1_LRG', np.float64(13.79223051826787)) ('alpha_LRG', np.float64(0.8776387068999602)) ('f_sigv_LRG', np.float64(0.7981295957429303)) ('log_Mcent_LRG', np.float64(12.548348294669678)) ('sigma_M_LRG', np.float64(0.18712050940299063))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.56956067481562)) ('M_1_LRG', np.float64(13.96014086320679)) ('alpha_LRG', np.float64(1.124807498333298)) ('f_sigv_LRG', np.float64(0.8012035019683088)) ('log_Mcent_LRG', np.float64(12.777966962299004)) ('sigma_M_LRG', np.float64(0.3549182412847336))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.823595328297989)) ('M_1_LRG', np.float64(13.887707090179742)) ('alpha_LRG', np.float64(1.061508940077272)) ('f_sigv_LRG', np.float64(1.1808956026158606)) ('log_Mcent_LRG', np.float64(12.729697430100408)) ('sigma_M_LRG', np.float64(0.18472494299345277))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.299144837959272)) ('M_1_LRG', np.float64(14.202455279532275)) ('alpha_LRG', np.float64(1.1895402349385096)) ('f_sigv_LRG', np.float64(0.8890051245674081)) ('log_Mcent_LRG', np.float64(13.000559180946212)) ('sigma_M_LRG', np.float64(0.531503197054516))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.224421071598554)) ('M_1_LRG', np.float64(14.010120806550077)) ('alpha_LRG', np.float64(1.3373395278064493)) ('f_sigv_LRG', np.float64(0.8479610058592337)) ('log_Mcent_LRG', np.float64(12.815769864488278)) ('sigma_M_LRG', np.float64(0.34990324664448735))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.414625314429404)) ('M_1_LRG', np.float64(13.843825968835356)) ('alpha_LRG', np.float64(1.2986741881839396)) ('f_sigv_LRG', np.float64(0.9675923797631637)) ('log_Mcent_LRG', np.float64(12.913422598146978)) ('sigma_M_LRG', np.float64(0.47385341639273154))
Apply vsmear for LRG at z0.4-0.6
Priors: ('M_0_LRG', [12.5, 13.5]) ('M_1_LRG', [13, 14.5]) ('alpha_LRG', [0.5, 1.5]) ('f_sigv_LRG', [0.5, 1.5]) ('log_Mcent_LRG', [12.4, 13.5]) ('sigma_M_LRG', [0.05, 1])
First point: ('M_0_LRG', 12.5) ('M_1_LRG', 13.5) ('alpha_LRG', 1) ('f_sigv_LRG', 1) ('log_Mcent_LRG', 12.75) ('sigma_M_LRG', 0.5)
[Interation 40] ('M_0_LRG', np.float64(12.237123114402154)) ('M_1_LRG', np.float64(13.846568039200577)) ('alpha_LRG', np.float64(1.387685102448493)) ('f_sigv_LRG', np.float64(0.6990914488352342)) ('log_Mcent_LRG', np.float64(12.803146093668921)) ('sigma_M_LRG', np.float64(0.344020817510831))
[Interation 40] chi2=616.0990688022569
[Interation 40] chi2=604.1102029168605
[Interation 40] chi2=1081.6626418966518
[Interation 40] chi2=656.5460725250264
[Interation 40] chi2=1203.3899663200395
[Interation 40] chi2=560.1179129461535
[Interation 40] chi2=2291.6572490983995
[Interation 40] chi2=1420.2736515665426
[Interation 40] chi2=636.958768920102
[Interation 40] chi2=712.7813074026317
[Interation 40] chi2=2651.0717861906196
[Interation 40] chi2=3214.7742043753033
[Interation 42] ('M_0_LRG', np.float64(12.829150036114113)) ('M_1_LRG', np.float64(13.845287764127157)) ('alpha_LRG', np.float64(1.0736279119833383)) ('f_sigv_LRG', np.float64(0.8201760006778438)) ('log_Mcent_LRG', np.float64(12.742886355231724)) ('sigma_M_LRG', np.float64(0.24771756389136734))
[Interation 42] ('M_0_LRG', np.float64(12.626298867367717)) ('M_1_LRG', np.float64(13.895289686411006)) ('alpha_LRG', np.float64(1.1069344311315203)) ('f_sigv_LRG', np.float64(0.8999154967360403)) ('log_Mcent_LRG', np.float64(12.74400668576115)) ('sigma_M_LRG', np.float64(0.24764104989470975))
[Interation 42] ('M_0_LRG', np.float64(12.729199681427069)) ('M_1_LRG', np.float64(13.869640903693327)) ('alpha_LRG', np.float64(1.0994712117611447)) ('f_sigv_LRG', np.float64(0.8464127994291113)) ('log_Mcent_LRG', np.float64(12.748377486367062)) ('sigma_M_LRG', np.float64(0.26383819136367553))
[Interation 42] ('M_0_LRG', np.float64(12.67120900472317)) ('M_1_LRG', np.float64(13.861813338121253)) ('alpha_LRG', np.float64(1.151762642785649)) ('f_sigv_LRG', np.float64(0.8446376866519698)) ('log_Mcent_LRG', np.float64(12.736489754944092)) ('sigma_M_LRG', np.float64(0.2460159688762612))
[Interation 42] chi2=376.47665948674035
[Interation 42] chi2=316.1267047849604
[Interation 42] chi2=343.47407004668736
[Interation 42] chi2=329.0171086385309
[Interation 41] ('M_0_LRG', np.float64(12.755859533107959)) ('M_1_LRG', np.float64(13.856417103536584)) ('alpha_LRG', np.float64(1.0736514419555723)) ('f_sigv_LRG', np.float64(0.8635223347372474)) ('log_Mcent_LRG', np.float64(12.723537724455912)) ('sigma_M_LRG', np.float64(0.22040708778000545))
[Interation 41] ('M_0_LRG', np.float64(12.746546008972814)) ('M_1_LRG', np.float64(13.898316209967511)) ('alpha_LRG', np.float64(1.0787377704233103)) ('f_sigv_LRG', np.float64(0.8853779117617914)) ('log_Mcent_LRG', np.float64(12.793524217218394)) ('sigma_M_LRG', np.float64(0.3216111327652664))
[Interation 41] ('M_0_LRG', np.float64(12.72793241482886)) ('M_1_LRG', np.float64(13.845225640314082)) ('alpha_LRG', np.float64(1.0938256625242728)) ('f_sigv_LRG', np.float64(0.8657504842489576)) ('log_Mcent_LRG', np.float64(12.718035706337917)) ('sigma_M_LRG', np.float64(0.21349128487904895))
[Interation 41] ('M_0_LRG', np.float64(12.776875549614386)) ('M_1_LRG', np.float64(13.884792965279203)) ('alpha_LRG', np.float64(1.048002802159809)) ('f_sigv_LRG', np.float64(0.8895685882253779)) ('log_Mcent_LRG', np.float64(12.773045500402176)) ('sigma_M_LRG', np.float64(0.29154113433651474))
[Interation 41] ('M_0_LRG', np.float64(12.728027559587769)) ('M_1_LRG', np.float64(13.866520607325919)) ('alpha_LRG', np.float64(1.0867766297436932)) ('f_sigv_LRG', np.float64(0.8636262054379893)) ('log_Mcent_LRG', np.float64(12.745059495448173)) ('sigma_M_LRG', np.float64(0.25160149218988287))
[Interation 41] ('M_0_LRG', np.float64(12.729954256484504)) ('M_1_LRG', np.float64(13.840048084758221)) ('alpha_LRG', np.float64(1.0993529243114057)) ('f_sigv_LRG', np.float64(0.8539806559976746)) ('log_Mcent_LRG', np.float64(12.731042400269063)) ('sigma_M_LRG', np.float64(0.24105223749829902))
[Interation 41] ('M_0_LRG', np.float64(12.713531451646059)) ('M_1_LRG', np.float64(13.892322274211983)) ('alpha_LRG', np.float64(1.0969027600475363)) ('f_sigv_LRG', np.float64(0.8771187778587781)) ('log_Mcent_LRG', np.float64(12.77367009518457)) ('sigma_M_LRG', np.float64(0.2910206032251612))
[Interation 41] ('M_0_LRG', np.float64(12.699448959506027)) ('M_1_LRG', np.float64(13.89450807363407)) ('alpha_LRG', np.float64(1.09430490900616)) ('f_sigv_LRG', np.float64(0.8711810060717633)) ('log_Mcent_LRG', np.float64(12.783464907410949)) ('sigma_M_LRG', np.float64(0.31812489750256967))
[Interation 41] ('M_0_LRG', np.float64(12.756587562010742)) ('M_1_LRG', np.float64(13.872687332431681)) ('alpha_LRG', np.float64(1.1052909045367143)) ('f_sigv_LRG', np.float64(0.8583806955562419)) ('log_Mcent_LRG', np.float64(12.766441661427088)) ('sigma_M_LRG', np.float64(0.2914417037392598))
[Interation 41] ('M_0_LRG', np.float64(12.757938262811141)) ('M_1_LRG', np.float64(13.866674402609679)) ('alpha_LRG', np.float64(1.0719038355786543)) ('f_sigv_LRG', np.float64(0.8605858876221351)) ('log_Mcent_LRG', np.float64(12.75580918404536)) ('sigma_M_LRG', np.float64(0.27640653047491875))
[Interation 41] ('M_0_LRG', np.float64(12.70884214070458)) ('M_1_LRG', np.float64(13.8810755357273)) ('alpha_LRG', np.float64(1.0997995349553487)) ('f_sigv_LRG', np.float64(0.8658918626516087)) ('log_Mcent_LRG', np.float64(12.765646150975526)) ('sigma_M_LRG', np.float64(0.28689693128791427))
[Interation 41] ('M_0_LRG', np.float64(12.70879648771033)) ('M_1_LRG', np.float64(13.858380237208703)) ('alpha_LRG', np.float64(1.1091183161278741)) ('f_sigv_LRG', np.float64(0.8616814889039109)) ('log_Mcent_LRG', np.float64(12.741384146485922)) ('sigma_M_LRG', np.float64(0.2525574582975457))
[Interation 41] chi2=287.09667854069716
[Interation 41] chi2=315.1368163337845
[Interation 41] chi2=354.8213725917572
[Interation 41] chi2=370.7401636167163
[Interation 41] chi2=315.9640172566398
[Interation 41] chi2=339.5241114103313
[Interation 41] chi2=291.9081431152442
[Interation 41] chi2=333.58364255297386
[Interation 41] chi2=289.2570493901781
[Interation 41] chi2=282.1711183959705
[Interation 41] chi2=346.3903738811956
[Interation 41] chi2=275.82183765122267
[Interation 43] ('M_0_LRG', np.float64(12.702974907116943)) ('M_1_LRG', np.float64(13.857209037172519)) ('alpha_LRG', np.float64(1.097089486348284)) ('f_sigv_LRG', np.float64(0.8688780501072666)) ('log_Mcent_LRG', np.float64(12.731530402143072)) ('sigma_M_LRG', np.float64(0.23344303698018065))
[Interation 43] ('M_0_LRG', np.float64(12.745903018756247)) ('M_1_LRG', np.float64(13.87055033949389)) ('alpha_LRG', np.float64(1.0653713914077567)) ('f_sigv_LRG', np.float64(0.8660144983035051)) ('log_Mcent_LRG', np.float64(12.753485123993599)) ('sigma_M_LRG', np.float64(0.2772545485532637))
[Interation 43] ('M_0_LRG', np.float64(12.70928672905151)) ('M_1_LRG', np.float64(13.868938047637092)) ('alpha_LRG', np.float64(1.097352987109657)) ('f_sigv_LRG', np.float64(0.8639788386646942)) ('log_Mcent_LRG', np.float64(12.741007620856497)) ('sigma_M_LRG', np.float64(0.2508555007119713))
[Interation 43] ('M_0_LRG', np.float64(12.711131540362876)) ('M_1_LRG', np.float64(13.87863481411313)) ('alpha_LRG', np.float64(1.103176392153123)) ('f_sigv_LRG', np.float64(0.8627254481965603)) ('log_Mcent_LRG', np.float64(12.758699578716781)) ('sigma_M_LRG', np.float64(0.27586135875271434))
[Interation 43] chi2=310.5322012553547
[Interation 43] chi2=297.97857204680054
[Interation 43] chi2=324.8007443388736
[Interation 43] chi2=301.89706055539335
[Interation 42] ('M_0_LRG', np.float64(12.730165334529584)) ('M_1_LRG', np.float64(13.88633372871074)) ('alpha_LRG', np.float64(1.0758966275200836)) ('f_sigv_LRG', np.float64(0.8798472572330363)) ('log_Mcent_LRG', np.float64(12.759430340687423)) ('sigma_M_LRG', np.float64(0.27302071634814096))
[Interation 42] ('M_0_LRG', np.float64(12.733884668728251)) ('M_1_LRG', np.float64(13.857541592501203)) ('alpha_LRG', np.float64(1.0686656196276805)) ('f_sigv_LRG', np.float64(0.8756752212659265)) ('log_Mcent_LRG', np.float64(12.73132779148521)) ('sigma_M_LRG', np.float64(0.23772822689535744))
[Interation 42] ('M_0_LRG', np.float64(12.747770703054728)) ('M_1_LRG', np.float64(13.858167794906754)) ('alpha_LRG', np.float64(1.0686275662714388)) ('f_sigv_LRG', np.float64(0.8695865946676637)) ('log_Mcent_LRG', np.float64(12.73794392443872)) ('sigma_M_LRG', np.float64(0.24772802152073398))
[Interation 42] ('M_0_LRG', np.float64(12.744774289087305)) ('M_1_LRG', np.float64(13.856296496382438)) ('alpha_LRG', np.float64(1.0822659626489237)) ('f_sigv_LRG', np.float64(0.8744123370573459)) ('log_Mcent_LRG', np.float64(12.739695940638905)) ('sigma_M_LRG', np.float64(0.2431758000082585))
[Interation 42] ('M_0_LRG', np.float64(12.719841090663191)) ('M_1_LRG', np.float64(13.87433456340532)) ('alpha_LRG', np.float64(1.0914702882469125)) ('f_sigv_LRG', np.float64(0.8644014651720444)) ('log_Mcent_LRG', np.float64(12.75514969267852)) ('sigma_M_LRG', np.float64(0.27152916437853036))
[Interation 42] ('M_0_LRG', np.float64(12.712944599025962)) ('M_1_LRG', np.float64(13.86274492189036)) ('alpha_LRG', np.float64(1.097259773842355)) ('f_sigv_LRG', np.float64(0.8567585631617152)) ('log_Mcent_LRG', np.float64(12.740256251273513)) ('sigma_M_LRG', np.float64(0.25123393569064467))
[Interation 42] ('M_0_LRG', np.float64(12.715522053329156)) ('M_1_LRG', np.float64(13.852858613644006)) ('alpha_LRG', np.float64(1.0943339286833207)) ('f_sigv_LRG', np.float64(0.8810246042139103)) ('log_Mcent_LRG', np.float64(12.729668915897966)) ('sigma_M_LRG', np.float64(0.23517825346485222))
[Interation 42] ('M_0_LRG', np.float64(12.721595528979158)) ('M_1_LRG', np.float64(13.855186363011313)) ('alpha_LRG', np.float64(1.0835704669178248)) ('f_sigv_LRG', np.float64(0.8669169456426951)) ('log_Mcent_LRG', np.float64(12.730134054807221)) ('sigma_M_LRG', np.float64(0.23774570371408243))
[Interation 42] ('M_0_LRG', np.float64(12.723292871453664)) ('M_1_LRG', np.float64(13.87800260799914)) ('alpha_LRG', np.float64(1.0763260556300516)) ('f_sigv_LRG', np.float64(0.8808319594702669)) ('log_Mcent_LRG', np.float64(12.751347506446573)) ('sigma_M_LRG', np.float64(0.26381190611025684))
[Interation 42] ('M_0_LRG', np.float64(12.741369374591534)) ('M_1_LRG', np.float64(13.861102799833679)) ('alpha_LRG', np.float64(1.0724701276312603)) ('f_sigv_LRG', np.float64(0.8764993500837036)) ('log_Mcent_LRG', np.float64(12.73888243608141)) ('sigma_M_LRG', np.float64(0.2455265749440944))
[Interation 42] ('M_0_LRG', np.float64(12.693740593708313)) ('M_1_LRG', np.float64(13.863434019122408)) ('alpha_LRG', np.float64(1.1020973558344083)) ('f_sigv_LRG', np.float64(0.877628192704042)) ('log_Mcent_LRG', np.float64(12.735675513355764)) ('sigma_M_LRG', np.float64(0.24255814698056805))
[Interation 42] ('M_0_LRG', np.float64(12.738065276785544)) ('M_1_LRG', np.float64(13.871142074781455)) ('alpha_LRG', np.float64(1.0721397934640224)) ('f_sigv_LRG', np.float64(0.8776377199379503)) ('log_Mcent_LRG', np.float64(12.74948182987973)) ('sigma_M_LRG', np.float64(0.2614543569738261))
[Interation 42] chi2=314.3466664205029
[Interation 42] chi2=312.24202841734336
[Interation 42] chi2=312.65648154626905
[Interation 42] chi2=275.66260106286256
[Interation 42] chi2=311.69736600129505
[Interation 42] chi2=346.2820182617572
[Interation 42] chi2=301.9847604751489
[Interation 42] chi2=276.93317712196927
[Interation 42] chi2=330.03662892080547
[Interation 42] chi2=305.8220413241088
[Interation 42] chi2=337.9881556523818
[Interation 42] chi2=254.8746159543298
Load data vector for LRG
Load rppi measurements at z0.4-0.6 for LRG...
Load smu measurements at z0.4-0.6 for LRG...
Best fit point: ('M_0_LRG', np.float64(12.755514970408084)) ('M_1_LRG', np.float64(13.862694161812033)) ('alpha_LRG', np.float64(1.0654849185180393)) ('f_sigv_LRG', np.float64(0.870826868720581)) ('log_Mcent_LRG', np.float64(12.742696332406819)) ('sigma_M_LRG', np.float64(0.24860538750311323))
Create mock catalog for ['LRG']
Run HOD for LRG
Set density to 0.0007 gal/Mpc/h
HOD Computed 0.30965685844421387
Start satellite assignement
Satellite assignement done 0.07138895988464355
LRG mock catalogue done 0.14020133018493652
614882 central galaxies, 84502 satellites, fraction of satellite 0.12 
Done overall time  LRG 0.6162829399108887
